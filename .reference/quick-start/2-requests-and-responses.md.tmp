{"source": "/home/ilyachch/Projects/OpenSource/django-rest-framework-rusdoc/.reference/quick-start/2-requests-and-responses.md", "blocks": [{"translated_data": "# \u0423\u0447\u0435\u0431\u043d\u0438\u043a 2: \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u0432\u0435\u0442\u044b", "children": [{"text": "Tutorial 2: Requests and Responses", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "\u041d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043c\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0447\u043d\u0435\u043c \u043e\u0441\u0432\u0435\u0449\u0430\u0442\u044c \u0441\u0443\u0442\u044c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 REST. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432.", "children": [{"text": "From this point we're going to really start covering the core of REST framework. Let's introduce a couple of essential building blocks.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u041e\u0431\u044a\u0435\u043a\u0442\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430", "children": [{"text": "Request objects", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a REST \u0432\u0432\u043e\u0434\u0438\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 `Request`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 \u043e\u0431\u044b\u0447\u043d\u044b\u0439 `HttpRequest` \u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0433\u0438\u0431\u043a\u0438\u0439 \u0440\u0430\u0437\u0431\u043e\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 `Request` \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `request.data`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u0435\u043d `request.POST`, \u043d\u043e \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Web API.", "children": [{"text": "REST framework introduces a ", "block_type": "TextBlock"}, {"code": "Request", "block_type": "CodeSpanBlock"}, {"text": " object that extends the regular ", "block_type": "TextBlock"}, {"code": "HttpRequest", "block_type": "CodeSpanBlock"}, {"text": ", and provides more flexible request parsing. The core functionality of the ", "block_type": "TextBlock"}, {"code": "Request", "block_type": "CodeSpanBlock"}, {"text": " object is the ", "block_type": "TextBlock"}, {"code": "request.data", "block_type": "CodeSpanBlock"}, {"text": " attribute, which is similar to ", "block_type": "TextBlock"}, {"code": "request.POST", "block_type": "CodeSpanBlock"}, {"text": ", but more useful for working with Web APIs.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "request.POST  # Only handles form data.  Only works for 'POST' method.\nrequest.data  # Handles arbitrary data.  Works for 'POST', 'PUT' and 'PATCH' methods.", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u041e\u0431\u044a\u0435\u043a\u0442\u044b \u0440\u0435\u0430\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f", "children": [{"text": "Response objects", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0420\u0430\u043c\u043a\u0430 REST \u0442\u0430\u043a\u0436\u0435 \u0432\u0432\u043e\u0434\u0438\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 `Response`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u0438\u043f\u043e\u043c `TemplateResponse`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0435\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.", "children": [{"text": "REST framework also introduces a ", "block_type": "TextBlock"}, {"code": "Response", "block_type": "CodeSpanBlock"}, {"text": " object, which is a type of ", "block_type": "TextBlock"}, {"code": "TemplateResponse", "block_type": "CodeSpanBlock"}, {"text": " that takes unrendered content and uses content negotiation to determine the correct content type to return to the client.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "return Response(data)  # Renders to content type as requested by the client.", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u041a\u043e\u0434\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f", "children": [{"text": "Status codes", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f HTTP \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u0445 \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f, \u0438 \u043b\u0435\u0433\u043a\u043e \u043d\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0435\u0441\u043b\u0438 \u0432\u044b \u043e\u0448\u0438\u0431\u043b\u0438\u0441\u044c \u0441 \u043a\u043e\u0434\u043e\u043c \u043e\u0448\u0438\u0431\u043a\u0438. REST framework \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u044f\u0432\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a `HTTP_400_BAD_REQUEST` \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 `status`. \u0425\u043e\u0440\u043e\u0448\u0430\u044f \u0438\u0434\u0435\u044f - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u043f\u043e\u0432\u0441\u0435\u043c\u0435\u0441\u0442\u043d\u043e, \u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b.", "children": [{"text": "Using numeric HTTP status codes in your views doesn't always make for obvious reading, and it's easy to not notice if you get an error code wrong. REST framework provides more explicit identifiers for each status code, such as ", "block_type": "TextBlock"}, {"code": "HTTP_400_BAD_REQUEST", "block_type": "CodeSpanBlock"}, {"text": " in the ", "block_type": "TextBlock"}, {"code": "status", "block_type": "CodeSpanBlock"}, {"text": " module. It's a good idea to use these throughout rather than using numeric identifiers.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u041e\u0431\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 API", "children": [{"text": "Wrapping API views", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a REST \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0432\u0435 \u043e\u0431\u0435\u0440\u0442\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 API.", "children": [{"text": "REST framework provides two wrappers you can use to write API views.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "1. \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 `@api_view` \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445.\n2. \u041a\u043b\u0430\u0441\u0441 `APIView` \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.", "children": [{"children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "@api_view", "block_type": "CodeSpanBlock"}, {"text": " decorator for working with function based views.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "APIView", "block_type": "CodeSpanBlock"}, {"text": " class for working with class-based views.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": true, "level": 1, "start": 1, "block_type": "ListBlock"}, {"translated_data": "\u042d\u0442\u0438 \u043e\u0431\u0435\u0440\u0442\u043a\u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 `Request` \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c `Response`, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e.", "children": [{"text": "These wrappers provide a few bits of functionality such as making sure you receive ", "block_type": "TextBlock"}, {"code": "Request", "block_type": "CodeSpanBlock"}, {"text": " instances in your view, and adding context to ", "block_type": "TextBlock"}, {"code": "Response", "block_type": "CodeSpanBlock"}, {"text": " objects so that content negotiation can be performed.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041e\u0431\u0435\u0440\u0442\u043a\u0438 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u0442\u0430\u043a\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u043a\u0430\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 `405 Method Not Allowed`, \u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043b\u044e\u0431\u044b\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 `ParseError`, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0438\u0445 \u043f\u0440\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435 \u043a `request.data` \u0441 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0432\u0432\u043e\u0434\u043e\u043c.", "children": [{"text": "The wrappers also provide behavior such as returning ", "block_type": "TextBlock"}, {"code": "405 Method Not Allowed", "block_type": "CodeSpanBlock"}, {"text": " responses when appropriate, and handling any ", "block_type": "TextBlock"}, {"code": "ParseError", "block_type": "CodeSpanBlock"}, {"text": " exceptions that occur when accessing ", "block_type": "TextBlock"}, {"code": "request.data", "block_type": "CodeSpanBlock"}, {"text": " with malformed input.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0432\u043c\u0435\u0441\u0442\u0435", "children": [{"text": "Pulling it all together", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0418\u0442\u0430\u043a, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u0447\u043d\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0438 \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0448\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f.", "children": [{"text": "Okay, let's go ahead and start using these new components to refactor our views slightly.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework import status\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\n\n\n@api_view(['GET', 'POST'])\ndef snippet_list(request):\n    \"\"\"\n    List all code snippets, or create a new snippet.\n    \"\"\"\n    if request.method == 'GET':\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return Response(serializer.data)\n\n    elif request.method == 'POST':\n        serializer = SnippetSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041d\u0430\u0448\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u043c \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u043c. \u041e\u043d\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043b\u0430\u043a\u043e\u043d\u0438\u0447\u043d\u0435\u0435, \u0438 \u043a\u043e\u0434 \u0442\u0435\u043f\u0435\u0440\u044c \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 \u0442\u043e\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 Forms API. \u041c\u044b \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u0434\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0431\u043e\u043b\u0435\u0435 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u043c\u0438.", "children": [{"text": "Our instance view is an improvement over the previous example. It's a little more concise, and the code now feels very similar to if we were working with the Forms API. We're also using named status codes, which makes the response meanings more obvious.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0412\u043e\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 `views.py`.", "children": [{"text": "Here is the view for an individual snippet, in the ", "block_type": "TextBlock"}, {"code": "views.py", "block_type": "CodeSpanBlock"}, {"text": " module.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "@api_view(['GET', 'PUT', 'DELETE'])\ndef snippet_detail(request, pk):\n    \"\"\"\n    Retrieve, update or delete a code snippet.\n    \"\"\"\n    try:\n        snippet = Snippet.objects.get(pk=pk)\n    except Snippet.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == 'GET':\n        serializer = SnippetSerializer(snippet)\n        return Response(serializer.data)\n\n    elif request.method == 'PUT':\n        serializer = SnippetSerializer(snippet, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    elif request.method == 'DELETE':\n        snippet.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0412\u0441\u0435 \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0437\u043d\u0430\u043a\u043e\u043c\u044b\u043c - \u044d\u0442\u043e \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 Django.", "children": [{"text": "This should all feel very familiar - it is not a lot different from working with regular Django views.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043c\u044b \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u043d\u0430\u0448\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438\u043b\u0438 \u043e\u0442\u0432\u0435\u0442\u044b \u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e. `request.data` \u043c\u043e\u0436\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b `json`, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b. \u0422\u043e\u0447\u043d\u043e \u0442\u0430\u043a \u0436\u0435 \u043c\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043e\u0442\u0432\u0435\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u043d\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u043c REST-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0443 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0432 \u043d\u0443\u0436\u043d\u044b\u0439 \u043d\u0430\u043c \u0442\u0438\u043f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e.", "children": [{"text": "Notice that we're no longer explicitly tying our requests or responses to a given content type. ", "block_type": "TextBlock"}, {"code": "request.data", "block_type": "CodeSpanBlock"}, {"text": " can handle incoming ", "block_type": "TextBlock"}, {"code": "json", "block_type": "CodeSpanBlock"}, {"text": " requests, but it can also handle other formats. Similarly we're returning response objects with data, but allowing REST framework to render the response into the correct content type for us.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0443\u0444\u0444\u0438\u043a\u0441\u043e\u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043a \u043d\u0430\u0448\u0438\u043c URL-\u0430\u0434\u0440\u0435\u0441\u0430\u043c", "children": [{"text": "Adding optional format suffixes to our URLs", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0435\u043c, \u0447\u0442\u043e \u043d\u0430\u0448\u0438 \u043e\u0442\u0432\u0435\u0442\u044b \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u044b \u043a \u043e\u0434\u043d\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0441\u0443\u0444\u0444\u0438\u043a\u0441\u043e\u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0432 \u043d\u0430\u0448\u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438 API. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0443\u0444\u0444\u0438\u043a\u0441\u043e\u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0434\u0430\u0435\u0442 \u043d\u0430\u043c URL, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f\u0432\u043d\u043e \u0441\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442, \u0438 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0430\u0448 API \u0441\u043c\u043e\u0436\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0442\u0430\u043a\u0438\u0435 URL, \u043a\u0430\u043a [http://example.com/api/items/4.json](http://example.com/api/items/4.json).", "children": [{"text": "To take advantage of the fact that our responses are no longer hardwired to a single content type let's add support for format suffixes to our API endpoints. Using format suffixes gives us URLs that explicitly refer to a given format, and means our API will be able to handle URLs such as ", "block_type": "TextBlock"}, {"children": [{"text": "http://example.com/api/items/4.json", "block_type": "TextBlock"}], "url": "http://example.com/api/items/4.json", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 `format` \u043a \u043e\u0431\u043e\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c, \u043a\u0430\u043a \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u043d\u0438\u0436\u0435.", "children": [{"text": "Start by adding a ", "block_type": "TextBlock"}, {"code": "format", "block_type": "CodeSpanBlock"}, {"text": " keyword argument to both of the views, like so.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "def snippet_list(request, format=None):", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0438", "children": [{"text": "and", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "def snippet_detail(request, pk, format=None):", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 \u0444\u0430\u0439\u043b `snippets/urls.py`, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u0430\u0431\u043e\u0440 `format_suffix_patterns` \u0432 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c URL.", "children": [{"text": "Now update the ", "block_type": "TextBlock"}, {"code": "snippets/urls.py", "block_type": "CodeSpanBlock"}, {"text": " file slightly, to append a set of ", "block_type": "TextBlock"}, {"code": "format_suffix_patterns", "block_type": "CodeSpanBlock"}, {"text": " in addition to the existing URLs.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from django.urls import path\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    path('snippets/', views.snippet_list),\n    path('snippets/<int:pk>/', views.snippet_detail),\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041d\u0430\u043c \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u044d\u0442\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b url, \u043d\u043e \u044d\u0442\u043e \u0434\u0430\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u0447\u0438\u0441\u0442\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0441\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442.", "children": [{"text": "We don't necessarily need to add these extra url patterns in, but it gives us a simple, clean way of referring to a specific format.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u041a\u0430\u043a \u044d\u0442\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442?", "children": [{"text": "How's it looking?", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e API \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u0430\u043a \u043c\u044b \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u043b\u0438 \u0432 [\u0443\u0447\u0435\u0431\u043d\u0438\u043a\u0435 \u0447\u0430\u0441\u0442\u044c 1](1-serialization.md). \u0412\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a \u0436\u0435, \u0445\u043e\u0442\u044f \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.", "children": [{"text": "Go ahead and test the API from the command line, as we did in ", "block_type": "TextBlock"}, {"children": [{"text": "tutorial part 1", "block_type": "TextBlock"}], "url": "1-serialization.md", "title": null, "block_type": "LinkBlock"}, {"text": ". Everything is working pretty similarly, although we've got some nicer error handling if we send invalid requests.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0441\u043d\u0438\u043f\u043f\u0435\u0442\u043e\u0432, \u043a\u0430\u043a \u0438 \u0440\u0430\u043d\u044c\u0448\u0435.", "children": [{"text": "We can get a list of all of the snippets, as before.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "http http://127.0.0.1:8000/snippets/\n\nHTTP/1.1 200 OK\n...\n[\n  {\n    \"id\": 1,\n    \"title\": \"\",\n    \"code\": \"foo = \\\"bar\\\"\\n\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n  },\n  {\n    \"id\": 2,\n    \"title\": \"\",\n    \"code\": \"print(\\\"hello, world\\\")\\n\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n  }\n]", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041c\u044b \u043c\u043e\u0436\u0435\u043c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u0430\u0442 \u043e\u0442\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c, \u043b\u0438\u0431\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a `Accept`:", "children": [{"text": "We can control the format of the response that we get back, either by using the ", "block_type": "TextBlock"}, {"code": "Accept", "block_type": "CodeSpanBlock"}, {"text": " header:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "http http://127.0.0.1:8000/snippets/ Accept:application/json  # Request JSON\nhttp http://127.0.0.1:8000/snippets/ Accept:text/html         # Request HTML", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0418\u043b\u0438 \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0443\u0444\u0444\u0438\u043a\u0441\u0430 \u0444\u043e\u0440\u043c\u0430\u0442\u0430:", "children": [{"text": "Or by appending a format suffix:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "http http://127.0.0.1:8000/snippets.json  # JSON suffix\nhttp http://127.0.0.1:8000/snippets.api   # Browsable API suffix", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u0430\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a `Content-Type`.", "children": [{"text": "Similarly, we can control the format of the request that we send, using the ", "block_type": "TextBlock"}, {"code": "Content-Type", "block_type": "CodeSpanBlock"}, {"text": " header.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "# POST using form data\nhttp --form POST http://127.0.0.1:8000/snippets/ code=\"print(123)\"\n\n{\n  \"id\": 3,\n  \"title\": \"\",\n  \"code\": \"print(123)\",\n  \"linenos\": false,\n  \"language\": \"python\",\n  \"style\": \"friendly\"\n}\n\n# POST using JSON\nhttp --json POST http://127.0.0.1:8000/snippets/ code=\"print(456)\"\n\n{\n    \"id\": 4,\n    \"title\": \"\",\n    \"code\": \"print(456)\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n}", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c `--debug` \u043a \u0432\u044b\u0448\u0435\u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c `http`, \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0442\u0438\u043f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.", "children": [{"text": "If you add a ", "block_type": "TextBlock"}, {"code": "--debug", "block_type": "CodeSpanBlock"}, {"text": " switch to the ", "block_type": "TextBlock"}, {"code": "http", "block_type": "CodeSpanBlock"}, {"text": " requests above, you will be able to see the request type in request headers.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 API \u0432 \u0432\u0435\u0431-\u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435, \u043f\u043e\u0441\u0435\u0442\u0438\u0432 \u0441\u0430\u0439\u0442 [http://127.0.0.1:8000/snippets/](http://127.0.0.1:8000/snippets/).", "children": [{"text": "Now go and open the API in a web browser, by visiting ", "block_type": "TextBlock"}, {"children": [{"text": "http://127.0.0.1:8000/snippets/", "block_type": "TextBlock"}], "url": "http://127.0.0.1:8000/snippets/", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### Browsability", "children": [{"text": "Browsability", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 API \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0442\u0438\u043f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u043d \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 HTML, \u043a\u043e\u0433\u0434\u0430 \u0440\u0435\u0441\u0443\u0440\u0441 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u0435\u0431-\u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043e\u043c. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 API \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0435 \u0434\u043b\u044f \u0432\u0435\u0431-\u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 HTML.", "children": [{"text": "Because the API chooses the content type of the response based on the client request, it will, by default, return an HTML-formatted representation of the resource when that resource is requested by a web browser. This allows for the API to return a fully web-browsable HTML representation.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u0435\u0431-\u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043d\u043e\u0433\u043e API - \u044d\u0442\u043e \u043e\u0433\u0440\u043e\u043c\u043d\u044b\u0439 \u0432\u044b\u0438\u0433\u0440\u044b\u0448 \u0432 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u043e\u043d \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e API. \u042d\u0442\u043e \u0442\u0430\u043a\u0436\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043d\u0438\u0436\u0430\u0435\u0442 \u0431\u0430\u0440\u044c\u0435\u0440 \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u0436\u0435\u043b\u0430\u044e\u0449\u0438\u0445 \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u0432\u0430\u0448\u0438\u043c API \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0438\u043c.", "children": [{"text": "Having a web-browsable API is a huge usability win, and makes developing and using your API much easier. It also dramatically lowers the barrier-to-entry for other developers wanting to inspect and work with your API.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 browsable API \u0438 \u0435\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0435 \u0441\u043c. \u0432 \u0442\u0435\u043c\u0435 [browsable api](../topics/browsable-api.md).", "children": [{"text": "See the ", "block_type": "TextBlock"}, {"children": [{"text": "browsable api", "block_type": "TextBlock"}], "url": "../topics/browsable-api.md", "title": null, "block_type": "LinkBlock"}, {"text": " topic for more information about the browsable API feature and how to customize it.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0427\u0442\u043e \u0434\u0430\u043b\u044c\u0448\u0435?", "children": [{"text": "What's next?", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0412 [\u0443\u0447\u0435\u0431\u043d\u0438\u043a\u0435 \u0447\u0430\u0441\u0442\u044c 3](3-class-based-views.md) \u043c\u044b \u043d\u0430\u0447\u043d\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u0443\u0432\u0438\u0434\u0438\u043c, \u043a\u0430\u043a \u043e\u0431\u0449\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u044e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0438\u0441\u0430\u0442\u044c.", "children": [{"text": "In ", "block_type": "TextBlock"}, {"children": [{"text": "tutorial part 3", "block_type": "TextBlock"}], "url": "3-class-based-views.md", "title": null, "block_type": "LinkBlock"}, {"text": ", we'll start using class-based views, and see how generic views reduce the amount of code we need to write.", "block_type": "TextBlock"}], "block_type": "Paragraph"}]}