{"source": "/home/ilyachch/Projects/OpenSource/django-rest-framework-rusdoc/.reference/topics/html-and-forms.md", "blocks": [{"translated_data": "# HTML \u0438 \u0444\u043e\u0440\u043c\u044b", "children": [{"text": "HTML & Forms", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "REST-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043a\u0430\u043a \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0432 \u0441\u0442\u0438\u043b\u0435 API, \u0442\u0430\u043a \u0438 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 HTML-\u0444\u043e\u0440\u043c \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u0445.", "children": [{"text": "REST framework is suitable for returning both API style responses, and regular HTML pages. Additionally, serializers can be used as HTML forms and rendered in templates.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 HTML", "children": [{"text": "Rendering HTML", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0414\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 HTML-\u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u0431\u043e `TemplateHTMLRenderer`, \u043b\u0438\u0431\u043e `StaticHTMLRenderer`.", "children": [{"text": "In order to return HTML responses you'll need to use either ", "block_type": "TextBlock"}, {"code": "TemplateHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": ", or ", "block_type": "TextBlock"}, {"code": "StaticHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `TemplateHTMLRenderer` \u043e\u0436\u0438\u0434\u0430\u0435\u0442, \u0447\u0442\u043e \u043e\u0442\u0432\u0435\u0442 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d \u043b\u0438\u0431\u043e \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0432\u0435\u0442\u0435.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "TemplateHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": " class expects the response to contain a dictionary of context data, and renders an HTML page based on a template that must be specified either in the view or on the response.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `StaticHTMLRender` \u043e\u0436\u0438\u0434\u0430\u0435\u0442, \u0447\u0442\u043e \u043e\u0442\u0432\u0435\u0442 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0440\u0435\u043d\u0434\u0435\u0440\u0435\u043d\u043d\u043e\u0433\u043e HTML-\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "StaticHTMLRender", "block_type": "CodeSpanBlock"}, {"text": " class expects the response to contain a string of the pre-rendered HTML content.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043e\u0431\u044b\u0447\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u043e\u0432 API, \u0432\u0430\u043c, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u0438\u0441\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 HTML-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u044f\u0432\u043d\u043e, \u0430 \u043d\u0435 \u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u043e\u0432\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f.", "children": [{"text": "Because static HTML pages typically have different behavior from API responses you'll probably need to write any HTML views explicitly, rather than relying on the built-in generic views.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \"Profile\", \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044b\u0439 \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435 HTML:", "children": [{"text": "Here's an example of a view that returns a list of \"Profile\" instances, rendered in an HTML template:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "**views.py**:", "children": [{"children": [{"text": "views.py", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ":", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from my_project.example.models import Profile\nfrom rest_framework.renderers import TemplateHTMLRenderer\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\n\nclass ProfileList(APIView):\n    renderer_classes = [TemplateHTMLRenderer]\n    template_name = 'profile_list.html'\n\n    def get(self, request):\n        queryset = Profile.objects.all()\n        return Response({'profiles': queryset})", "language": null, "block_type": "CodeBlock"}, {"translated_data": "**profile_list.html**:", "children": [{"children": [{"text": "profile_list.html", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ":", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "<html><body>\n<h1>Profiles</h1>\n<ul>\n    {% for profile in profiles %}\n    <li>{{ profile.name }}</li>\n    {% endfor %}\n</ul>\n</body></html>", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u0424\u043e\u0440\u043c\u044b \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430", "children": [{"text": "Rendering Forms", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u0444\u043e\u0440\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0442\u0435\u0433 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 `render_form` \u0438 \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u0448\u0430\u0431\u043b\u043e\u043d.", "children": [{"text": "Serializers may be rendered as forms by using the ", "block_type": "TextBlock"}, {"code": "render_form", "block_type": "CodeSpanBlock"}, {"text": " template tag, and including the serializer instance as context to the template.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043c\u043e\u0434\u0435\u043b\u0438:", "children": [{"text": "The following view demonstrates an example of using a serializer in a template for viewing and updating a model instance:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "**views.py**:", "children": [{"children": [{"text": "views.py", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ":", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from django.shortcuts import get_object_or_404\nfrom my_project.example.models import Profile\nfrom rest_framework.renderers import TemplateHTMLRenderer\nfrom rest_framework.views import APIView\n\n\nclass ProfileDetail(APIView):\n    renderer_classes = [TemplateHTMLRenderer]\n    template_name = 'profile_detail.html'\n\n    def get(self, request, pk):\n        profile = get_object_or_404(Profile, pk=pk)\n        serializer = ProfileSerializer(profile)\n        return Response({'serializer': serializer, 'profile': profile})\n\n    def post(self, request, pk):\n        profile = get_object_or_404(Profile, pk=pk)\n        serializer = ProfileSerializer(profile, data=request.data)\n        if not serializer.is_valid():\n            return Response({'serializer': serializer, 'profile': profile})\n        serializer.save()\n        return redirect('profile-list')", "language": null, "block_type": "CodeBlock"}, {"translated_data": "**profile_detail.html**:", "children": [{"children": [{"text": "profile_detail.html", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ":", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "{% load rest_framework %}\n\n<html><body>\n\n<h1>Profile - {{ profile.name }}</h1>\n\n<form action=\"{% url 'profile-detail' pk=profile.pk %}\" method=\"POST\">\n    {% csrf_token %}\n    {% render_form serializer %}\n    <input type=\"submit\" value=\"Save\">\n</form>\n\n</body></html>", "language": null, "block_type": "CodeBlock"}, {"translated_data": "### \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "children": [{"text": "Using template packs", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u0422\u0435\u0433 `render_form` \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 `template_pack`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a\u043e\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u0444\u043e\u0440\u043c\u044b \u0438 \u043f\u043e\u043b\u0435\u0439 \u0444\u043e\u0440\u043c\u044b.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "render_form", "block_type": "CodeSpanBlock"}, {"text": " tag takes an optional ", "block_type": "TextBlock"}, {"code": "template_pack", "block_type": "CodeSpanBlock"}, {"text": " argument, that specifies which template directory should be used for rendering the form and form fields.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a REST \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0442\u0440\u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u043a\u0435\u0442\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u0432\u0441\u0435 \u043e\u043d\u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u043d\u0430 Bootstrap 3. \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0438\u043b\u0438: `\u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439`, `\u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439` \u0438 `\u0438\u043d\u043b\u0430\u0439\u043d`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0442\u0438\u043b\u044c `\u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439`. \u0427\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u044d\u0442\u0438\u0445 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0442\u0430\u043a\u0436\u0435 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c CSS Bootstrap 3.", "children": [{"text": "REST framework includes three built-in template packs, all based on Bootstrap 3. The built-in styles are ", "block_type": "TextBlock"}, {"code": "horizontal", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "vertical", "block_type": "CodeSpanBlock"}, {"text": ", and ", "block_type": "TextBlock"}, {"code": "inline", "block_type": "CodeSpanBlock"}, {"text": ". The default style is ", "block_type": "TextBlock"}, {"code": "horizontal", "block_type": "CodeSpanBlock"}, {"text": ". To use any of these template packs you'll want to also include the Bootstrap 3 CSS.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 HTML \u0431\u0443\u0434\u0435\u0442 \u0441\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0432\u0435\u0440\u0441\u0438\u044e CSS Bootstrap 3, \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u043d\u0443\u044e \u0432 CDN:", "children": [{"text": "The following HTML will link to a CDN hosted version of the Bootstrap 3 CSS:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "<head>\n    \u2026\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\">\n</head>", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041f\u0430\u043a\u0435\u0442\u044b \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0430\u043a\u0435\u0442\u044b \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0445\u043e\u0434\u0438\u0442 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0444\u043e\u0440\u043c \u0438 \u043f\u043e\u043b\u0435\u0439.", "children": [{"text": "Third party packages may include alternate template packs, by bundling a template directory containing the necessary form and field templates.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432. \u0412 \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u043a\u043b\u0430\u0441\u0441 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u043e\u0440\u043c\u044b \"\u0412\u0445\u043e\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443\".", "children": [{"text": "Let's take a look at how to render each of the three available template packs. For these examples we'll use a single serializer class to present a \"Login\" form.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class LoginSerializer(serializers.Serializer):\n    email = serializers.EmailField(\n        max_length=100,\n        style={'placeholder': 'Email', 'autofocus': True}\n    )\n    password = serializers.CharField(\n        max_length=100,\n        style={'input_type': 'password', 'placeholder': 'Password'}\n    )\n    remember_me = serializers.BooleanField()", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "#### `rest_framework/vertical`.", "children": [{"code": "rest_framework/vertical", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u043a\u0438 \u0444\u043e\u0440\u043c\u044b \u043d\u0430\u0434 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0432\u0445\u043e\u0434\u0430\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043c\u0430\u043a\u0435\u0442 Bootstrap.", "children": [{"text": "Presents form labels above their corresponding control inputs, using the standard Bootstrap layout.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "*\u042d\u0442\u043e \u043f\u0430\u043a\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.*", "children": [{"children": [{"text": "This is the default template pack.", "block_type": "TextBlock"}], "block_type": "EmphasisTextBlock"}], "block_type": "Paragraph"}, {"code": "{% load rest_framework %}\n\n...\n\n<form action=\"{% url 'login' %}\" method=\"post\" novalidate>\n    {% csrf_token %}\n    {% render_form serializer template_pack='rest_framework/vertical' %}\n    <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n</form>", "language": null, "block_type": "CodeBlock"}, {"translated_data": "![\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u044b](../img/vertical.png)", "children": [{"url": "../img/vertical.png", "alt": "Vertical form example", "title": null, "block_type": "ImageBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "#### `rest_framework/horizontal`.", "children": [{"code": "rest_framework/horizontal", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u044f\u0440\u043b\u044b\u043a\u0438 \u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u044f\u0434\u043e\u043c \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a 2/10.", "children": [{"text": "Presents labels and controls alongside each other, using a 2/10 column split.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "*\u042d\u0442\u043e \u0441\u0442\u0438\u043b\u044c \u0444\u043e\u0440\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0432 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0445 API \u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0441\u043a\u0438\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u0430\u0445.*", "children": [{"children": [{"text": "This is the form style used in the browsable API and admin renderers.", "block_type": "TextBlock"}], "block_type": "EmphasisTextBlock"}], "block_type": "Paragraph"}, {"code": "{% load rest_framework %}\n\n...\n\n<form class=\"form-horizontal\" action=\"{% url 'login' %}\" method=\"post\" novalidate>\n    {% csrf_token %}\n    {% render_form serializer %}\n    <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n            <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n        </div>\n    </div>\n</form>", "language": null, "block_type": "CodeBlock"}, {"translated_data": "![\u041f\u0440\u0438\u043c\u0435\u0440 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u044b](../img/horizontal.png)", "children": [{"url": "../img/horizontal.png", "alt": "Horizontal form example", "title": null, "block_type": "ImageBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "#### `rest_framework/inline`.", "children": [{"code": "rest_framework/inline", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0439 \u0441\u0442\u0438\u043b\u044c \u0444\u043e\u0440\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043b\u0438\u043d\u0438\u044e.", "children": [{"text": "A compact form style that presents all the controls inline.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "{% load rest_framework %}\n\n...\n\n<form class=\"form-inline\" action=\"{% url 'login' %}\" method=\"post\" novalidate>\n    {% csrf_token %}\n    {% render_form serializer template_pack='rest_framework/inline' %}\n    <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n</form>", "language": null, "block_type": "CodeBlock"}, {"translated_data": "![\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u043d\u043b\u0430\u0439\u043d-\u0444\u043e\u0440\u043c\u044b](../img/inline.png)", "children": [{"url": "../img/inline.png", "alt": "Inline form example", "title": null, "block_type": "ImageBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0421\u0442\u0438\u043b\u0438 \u043f\u043e\u043b\u0435\u0439", "children": [{"text": "Field styles", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u043e\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u0441\u0432\u043e\u0439 \u0441\u0442\u0438\u043b\u044c \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430, \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 `style`. \u042d\u0442\u043e\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043e\u043f\u0446\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u043c \u0438 \u043c\u0430\u043a\u0435\u0442\u043e\u043c.", "children": [{"text": "Serializer fields can have their rendering style customized by using the ", "block_type": "TextBlock"}, {"code": "style", "block_type": "CodeSpanBlock"}, {"text": " keyword argument. This argument is a dictionary of options that control the template and layout used.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0441\u0442\u0438\u043b\u044f \u043f\u043e\u043b\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0438\u043b\u044f `base_template`, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0431\u0440\u0430\u0442\u044c, \u043a\u0430\u043a\u043e\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u0438\u0437 \u043f\u0430\u043a\u0435\u0442\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c.", "children": [{"text": "The most common way to customize the field style is to use the ", "block_type": "TextBlock"}, {"code": "base_template", "block_type": "CodeSpanBlock"}, {"text": " style keyword argument to select which template in the template pack should be use.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c `CharField` \u043a\u0430\u043a HTML textarea, \u0430 \u043d\u0435 \u043a\u0430\u043a HTML input \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u0432\u0440\u043e\u0434\u0435 \u044d\u0442\u043e\u0433\u043e:", "children": [{"text": "For example, to render a ", "block_type": "TextBlock"}, {"code": "CharField", "block_type": "CodeSpanBlock"}, {"text": " as an HTML textarea rather than the default HTML input, you would use something like this:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "details = serializers.CharField(\n    max_length=1000,\n    style={'base_template': 'textarea.html'}\n)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u043b\u043e\u0441\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 *\u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432*, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0446\u0438\u044e \u0441\u0442\u0438\u043b\u044f `template`, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u043c\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u0430:", "children": [{"text": "If you instead want a field to be rendered using a custom template that is ", "block_type": "TextBlock"}, {"children": [{"text": "not part of an included template pack", "block_type": "TextBlock"}], "block_type": "EmphasisTextBlock"}, {"text": ", you can instead use the ", "block_type": "TextBlock"}, {"code": "template", "block_type": "CodeSpanBlock"}, {"text": " style option, to fully specify a template name:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "details = serializers.CharField(\n    max_length=1000,\n    style={'template': 'my-field-templates/custom-input.html'}\n)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0428\u0430\u0431\u043b\u043e\u043d\u044b \u043f\u043e\u043b\u0435\u0439 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0441\u0442\u0438\u043b\u044f, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0438\u0445 \u0442\u0438\u043f\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0448\u0430\u0431\u043b\u043e\u043d `textarea.html` \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e `rows`, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f.", "children": [{"text": "Field templates can also use additional style properties, depending on their type. For example, the ", "block_type": "TextBlock"}, {"code": "textarea.html", "block_type": "CodeSpanBlock"}, {"text": " template also accepts a ", "block_type": "TextBlock"}, {"code": "rows", "block_type": "CodeSpanBlock"}, {"text": " property that can be used to affect the sizing of the control.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "details = serializers.CharField(\n    max_length=1000,\n    style={'base_template': 'textarea.html', 'rows': 10}\n)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u043f\u0446\u0438\u0439 `base_template` \u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043d\u0438\u043c\u0438 \u043e\u043f\u0446\u0438\u0439 \u0441\u0442\u0438\u043b\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u043d\u0438\u0436\u0435.", "children": [{"text": "The complete list of ", "block_type": "TextBlock"}, {"code": "base_template", "block_type": "CodeSpanBlock"}, {"text": " options and their associated style options is listed below.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "| base_template | \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u043f\u043e\u043b\u0435\u0439 | \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0442\u0438\u043b\u044f |\n| ---------------------- | ----------------------------------------------------------- | ---------------------------------------------- |\n| input.html | \u041b\u044e\u0431\u043e\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435, \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u0438\u043b\u0438 \u043f\u043e\u043b\u0435 \u0434\u0430\u0442\u044b/\u0432\u0440\u0435\u043c\u0435\u043d\u0438 | \u0442\u0438\u043f_\u0432\u0432\u043e\u0434\u0430, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c, \u0441\u043a\u0440\u044b\u0442\u0430\u044f_\u043c\u0435\u0442\u043a\u0430, \u0430\u0432\u0442\u043e\u0444\u043e\u043a\u0443\u0441 |\n| textarea.html | `CharField` | rows, placeholder, hide_label |\n| select.html | `ChoiceField` \u0438\u043b\u0438 \u0442\u0438\u043f\u044b \u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 | hide_label |\n| radio.html | `ChoiceField` \u0438\u043b\u0438 \u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u043f\u043e\u043b\u044f | inline, hide_label |\n| select_multiple.html | `MultipleChoiceField` \u0438\u043b\u0438 \u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0441 `many=True` | hide_label |\n| checkbox_multiple.html | `MultipleChoiceField` \u0438\u043b\u0438 \u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0441 `many=True` | inline, hide_label |\n| checkbox.html | `BooleanField` | hide_label |\n| fieldset.html | \u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 | hide_label |\n| list_fieldset.html | `ListField` \u0438\u043b\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0441 `many=True` | hide_label | hide_label |", "children": [{"text": "| base_template          | Valid field types                                           | Additional style options                       |\n| ---------------------- | ----------------------------------------------------------- | ---------------------------------------------- |\n| input.html             | Any string, numeric or date/time field                      | input_type, placeholder, hide_label, autofocus |\n| textarea.html          | ", "block_type": "TextBlock"}, {"code": "CharField", "block_type": "CodeSpanBlock"}, {"text": "                                                 | rows, placeholder, hide_label                  |\n| select.html            | ", "block_type": "TextBlock"}, {"code": "ChoiceField", "block_type": "CodeSpanBlock"}, {"text": " or relational field types                     | hide_label                                     |\n| radio.html             | ", "block_type": "TextBlock"}, {"code": "ChoiceField", "block_type": "CodeSpanBlock"}, {"text": " or relational field types                     | inline, hide_label                             |\n| select_multiple.html   | ", "block_type": "TextBlock"}, {"code": "MultipleChoiceField", "block_type": "CodeSpanBlock"}, {"text": " or relational fields with ", "block_type": "TextBlock"}, {"code": "many=True", "block_type": "CodeSpanBlock"}, {"text": " | hide_label                                     |\n| checkbox_multiple.html | ", "block_type": "TextBlock"}, {"code": "MultipleChoiceField", "block_type": "CodeSpanBlock"}, {"text": " or relational fields with ", "block_type": "TextBlock"}, {"code": "many=True", "block_type": "CodeSpanBlock"}, {"text": " | inline, hide_label                             |\n| checkbox.html          | ", "block_type": "TextBlock"}, {"code": "BooleanField", "block_type": "CodeSpanBlock"}, {"text": "                                              | hide_label                                     |\n| fieldset.html          | Nested serializer                                           | hide_label                                     |\n| list_fieldset.html     | ", "block_type": "TextBlock"}, {"code": "ListField", "block_type": "CodeSpanBlock"}, {"text": " or nested serializer with ", "block_type": "TextBlock"}, {"code": "many=True", "block_type": "CodeSpanBlock"}, {"text": "           | hide_label                                     |", "block_type": "TextBlock"}], "block_type": "Paragraph"}]}