{"source": "/home/ilyachch/Projects/OpenSource/django-rest-framework-rusdoc/.reference/api-navigation/filtering.md", "blocks": [{"block_type": "SeparatorBlock"}, {"translated_data": "\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a:", "children": [{"text": "source:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* Filters.py", "children": [{"children": [{"text": "filters.py", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f", "children": [{"text": "Filtering", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "> \u041a\u043e\u0440\u043d\u0435\u0432\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u043c, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445.\n\u041e\u0431\u044b\u0447\u043d\u043e, \u043e\u0434\u043d\u0430\u043a\u043e, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.\n>\n>-[\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Django] (https://docs.djangoproject.com/en/stable/topics/db/queries/#retrieving-price-objects-with-filters)", "children": [{"children": [{"text": "The root QuerySet provided by the Manager describes all objects in the database table. Usually, though, you'll need to select only a subset of the complete set of objects.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "NewlineBlock"}, {"children": [{"text": "\u2014 ", "block_type": "TextBlock"}, {"children": [{"text": "Django documentation", "block_type": "TextBlock"}], "url": "https://docs.djangoproject.com/en/stable/topics/db/queries/#retrieving-specific-objects-with-filters", "title": null, "block_type": "LinkBlock"}], "block_type": "Paragraph"}], "block_type": "BlockQuote"}, {"translated_data": "\u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u0431\u0449\u0438\u0445 \u0432\u0438\u0434\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 REST Framework \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0432\u0435\u0441\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.\n\u0427\u0430\u0441\u0442\u043e \u0432\u044b \u0437\u0430\u0445\u043e\u0442\u0438\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448 API \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u043b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f Queryset.", "children": [{"text": "The default behavior of REST framework's generic list views is to return the entire queryset for a model manager. Often you will want your API to restrict the items that are returned by the queryset.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0421\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043b\u044e\u0431\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u044b `genericapiview` - \u044d\u0442\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 .get_queryset ()`.", "children": [{"text": "The simplest way to filter the queryset of any view that subclasses ", "block_type": "TextBlock"}, {"code": "GenericAPIView", "block_type": "CodeSpanBlock"}, {"text": " is to override the ", "block_type": "TextBlock"}, {"code": ".get_queryset()", "block_type": "CodeSpanBlock"}, {"text": " method.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438.", "children": [{"text": "Overriding this method allows you to customize the queryset returned by the view in a number of different ways.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e", "children": [{"text": "Filtering against the current user", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432\u044b \u0437\u0430\u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c Queryset, \u0447\u0442\u043e\u0431\u044b \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0447\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a \u043d\u044b\u043d\u0435\u0448\u043d\u0435\u043c\u0443 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441.", "children": [{"text": "You might want to filter the queryset to ensure that only results relevant to the currently authenticated user making the request are returned.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043f\u0443\u0442\u0435\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f `request.user`.", "children": [{"text": "You can do so by filtering based on the value of ", "block_type": "TextBlock"}, {"code": "request.user", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from myapp.models import Purchase\nfrom myapp.serializers import PurchaseSerializer\nfrom rest_framework import generics\n\nclass PurchaseList(generics.ListAPIView):\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        This view should return a list of all the purchases\n        for the currently authenticated user.\n        \"\"\"\n        user = self.request.user\n        return Purchase.objects.filter(purchaser=user)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0442\u0438\u0432 URL", "children": [{"text": "Filtering against the URL", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0414\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u0438\u043b\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u0430\u043a\u043e\u0439 -\u0442\u043e \u0447\u0430\u0441\u0442\u0438 URL.", "children": [{"text": "Another style of filtering might involve restricting the queryset based on some part of the URL.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0432\u0430\u0448\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f URL \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u044c, \u043f\u043e\u0434\u043e\u0431\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443:", "children": [{"text": "For example if your URL config contained an entry like this:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "re_path('^purchases/(?P<username>.+)/$', PurchaseList.as_view()),", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0417\u0430\u0442\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0435\u0440\u043d\u0443\u043b\u043e \u0437\u0430\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441, \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c\u044e URL -\u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:", "children": [{"text": "You could then write a view that returned a purchase queryset filtered by the username portion of the URL:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class PurchaseList(generics.ListAPIView):\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        This view should return a list of all the purchases for\n        the user as determined by the username portion of the URL.\n        \"\"\"\n        username = self.kwargs['username']\n        return Purchase.objects.filter(purchaser__username=username)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430", "children": [{"text": "Filtering against query parameters", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0431\u044b\u043b\u043e \u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 URL.", "children": [{"text": "A final example of filtering the initial queryset would be to determine the initial queryset based on query parameters in the url.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c `.get_queryset ()` \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 URL -\u0430\u0434\u0440\u0435\u0441\u0430\u043c\u0438, \u0442\u0430\u043a\u0438\u043c\u0438 \u043a\u0430\u043a `http: //example.com/api/purchases? Username = denvercoder9`, \u0438 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u0443\u0439\u0442\u0435 Queryset \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440` username '\u0432\u043a\u043b\u044e\u0447\u0435\u043d \u0432 URL:", "children": [{"text": "We can override ", "block_type": "TextBlock"}, {"code": ".get_queryset()", "block_type": "CodeSpanBlock"}, {"text": " to deal with URLs such as ", "block_type": "TextBlock"}, {"code": "http://example.com/api/purchases?username=denvercoder9", "block_type": "CodeSpanBlock"}, {"text": ", and filter the queryset only if the ", "block_type": "TextBlock"}, {"code": "username", "block_type": "CodeSpanBlock"}, {"text": " parameter is included in the URL:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class PurchaseList(generics.ListAPIView):\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        Optionally restricts the returned purchases to a given user,\n        by filtering against a `username` query parameter in the URL.\n        \"\"\"\n        queryset = Purchase.objects.all()\n        username = self.request.query_params.get('username')\n        if username is not None:\n            queryset = queryset.filter(purchaser__username=username)\n        return queryset", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u041e\u0431\u0449\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f", "children": [{"text": "Generic Filtering", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u043e\u043c\u0438\u043c\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 REST \u0442\u0430\u043a\u0436\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0431\u044d\u043a\u044d\u043d\u0434\u043e\u0432 \u043e\u0431\u0449\u0435\u0439 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043b\u0435\u0433\u043a\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0438\u0441\u043a\u0438 \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b.", "children": [{"text": "As well as being able to override the default queryset, REST framework also includes support for generic filtering backends that allow you to easily construct complex searches and filters.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041e\u0431\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0435\u0431\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f HTML \u0432 API \u0438 AD API \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430.", "children": [{"text": "Generic filters can also present themselves as HTML controls in the browsable API and admin API.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "! [\u041f\u0440\u0438\u043c\u0435\u0440 \u0444\u0438\u043b\u044c\u0442\u0440\u0430] (../ img/filter-controls.png)", "children": [{"url": "../img/filter-controls.png", "alt": "Filter Example", "title": null, "block_type": "ImageBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u044d\u043a\u044d\u043d\u0434\u043e\u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u0430", "children": [{"text": "Setting filter backends", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0411\u044d\u043a\u044d\u043d\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043c\u0438\u0440\u0443, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 `default_filter_backends`.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440.", "children": [{"text": "The default filter backends may be set globally, using the ", "block_type": "TextBlock"}, {"code": "DEFAULT_FILTER_BACKENDS", "block_type": "CodeSpanBlock"}, {"text": " setting. For example.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "REST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']\n}", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u044d\u043a\u044d\u043d\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u0438\u043b\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f `genericapiview` \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043b\u0430\u0441\u0441\u0430.", "children": [{"text": "You can also set the filter backends on a per-view, or per-viewset basis, using the ", "block_type": "TextBlock"}, {"code": "GenericAPIView", "block_type": "CodeSpanBlock"}, {"text": " class-based views.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "import django_filters.rest_framework\nfrom django.contrib.auth.models import User\nfrom myapp.serializers import UserSerializer\nfrom rest_framework import generics\n\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = [django_filters.rest_framework.DjangoFilterBackend]", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u043f\u043e\u0438\u0441\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432", "children": [{"text": "Filtering and object lookups", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0431\u044d\u043a\u044d\u043d\u0434 \u0444\u0438\u043b\u044c\u0442\u0440\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0432\u0438\u0434\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430, \u043e\u043d \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430.", "children": [{"text": "Note that if a filter backend is configured for a view, then as well as being used to filter list views, it will also be used to filter the querysets used for returning a single object.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0438 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c `4675`, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 URL -\u0430\u0434\u0440\u0435\u0441 \u0432\u0435\u0440\u043d\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043b\u0438\u0431\u043e \u0432\u0435\u0440\u043d\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 404, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0431\u044b\u043b\u0438 \u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0443 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430:", "children": [{"text": "For instance, given the previous example, and a product with an id of ", "block_type": "TextBlock"}, {"code": "4675", "block_type": "CodeSpanBlock"}, {"text": ", the following URL would either return the corresponding object, or return a 404 response, depending on if the filtering conditions were met by the given product instance:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "http://example.com/api/products/4675/?category=clothing&max_price=10.00", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441", "children": [{"text": "Overriding the initial queryset", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u0443\u044e `.get_queryset ()`, \u0442\u0430\u043a \u0438 \u043e\u0431\u0449\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u043c\u0435\u0441\u0442\u0435, \u0438 \u0432\u0441\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u043a\u0430\u043a \u0438 \u043e\u0436\u0438\u0434\u0430\u043b\u043e\u0441\u044c.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 `product` \u0438\u043c\u0435\u043b \u043c\u043d\u043e\u0433\u043e \u043a\u043e \u043c\u043d\u043e\u0433\u0438\u043c \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f\u043c \u0441` user ', \u0438\u043c\u0435\u043d\u0435\u043c \u00ab\u043f\u043e\u043a\u0443\u043f\u043a\u0430\u00bb, \u0432\u044b, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0437\u0430\u0445\u043e\u0442\u0438\u0442\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043a\u0430\u043a \u044d\u0442\u043e:", "children": [{"text": "Note that you can use both an overridden ", "block_type": "TextBlock"}, {"code": ".get_queryset()", "block_type": "CodeSpanBlock"}, {"text": " and generic filtering together, and everything will work as expected. For example, if ", "block_type": "TextBlock"}, {"code": "Product", "block_type": "CodeSpanBlock"}, {"text": " had a many-to-many relationship with ", "block_type": "TextBlock"}, {"code": "User", "block_type": "CodeSpanBlock"}, {"text": ", named ", "block_type": "TextBlock"}, {"code": "purchase", "block_type": "CodeSpanBlock"}, {"text": ", you might want to write a view like this:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class PurchasedProductsList(generics.ListAPIView):\n    \"\"\"\n    Return a list of all the products that the authenticated\n    user has ever purchased, with optional filtering.\n    \"\"\"\n    model = Product\n    serializer_class = ProductSerializer\n    filterset_class = ProductFilter\n\n    def get_queryset(self):\n        user = self.request.user\n        return user.purchase_set.all()", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# Guide API", "children": [{"text": "API Guide", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "## djangofilterbackend", "children": [{"text": "DjangoFilterBackend", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 [`` django-filter`] (https://django-filter.readthedocs.io/en/latest/index.html) \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043a\u043b\u0430\u0441\u0441 djangofilterbackend`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u0441\u043e\u043a\u043e \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u043f\u043e\u043b\u0435\u0432\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Framework.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"children": [{"code": "django-filter", "block_type": "CodeSpanBlock"}], "url": "https://django-filter.readthedocs.io/en/latest/index.html", "title": null, "block_type": "LinkBlock"}, {"text": " library includes a ", "block_type": "TextBlock"}, {"code": "DjangoFilterBackend", "block_type": "CodeSpanBlock"}, {"text": " class which supports highly customizable field filtering for REST framework.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c `djangofilterbackend`, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435` django-filter '.", "children": [{"text": "To use ", "block_type": "TextBlock"}, {"code": "DjangoFilterBackend", "block_type": "CodeSpanBlock"}, {"text": ", first install ", "block_type": "TextBlock"}, {"code": "django-filter", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "pip install django-filter", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0417\u0430\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 `'django_filters'' \u043a Django` staded_apps`:", "children": [{"text": "Then add ", "block_type": "TextBlock"}, {"code": "'django_filters'", "block_type": "CodeSpanBlock"}, {"text": " to Django's ", "block_type": "TextBlock"}, {"code": "INSTALLED_APPS", "block_type": "CodeSpanBlock"}, {"text": ":", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "INSTALLED_APPS = [\n    ...\n    'django_filters',\n    ...\n]", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043b\u0438\u0431\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0431\u044d\u043a\u044d\u043d\u0434 \u0444\u0438\u043b\u044c\u0442\u0440\u0430 \u0432 \u0441\u0432\u043e\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438:", "children": [{"text": "You should now either add the filter backend to your settings:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "REST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']\n}", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0418\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0431\u044d\u043a\u044d\u043d\u0434 \u0444\u0438\u043b\u044c\u0442\u0440\u0430 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0432\u0438\u0434 \u0438\u043b\u0438 \u0441\u0435\u0442.", "children": [{"text": "Or add the filter backend to an individual View or ViewSet.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from django_filters.rest_framework import DjangoFilterBackend\n\nclass UserListView(generics.ListAPIView):\n    ...\n    filter_backends = [DjangoFilterBackend]", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u0441\u0435, \u0447\u0442\u043e \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e,-\u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `filterest_fields` \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0438\u043b\u0438 \u0441\u0435\u0442, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u044f\u044f \u043d\u0430\u0431\u043e\u0440 \u043f\u043e\u043b\u0435\u0439, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c.", "children": [{"text": "If all you need is simple equality-based filtering, you can set a ", "block_type": "TextBlock"}, {"code": "filterset_fields", "block_type": "CodeSpanBlock"}, {"text": " attribute on the view, or viewset, listing the set of fields you wish to filter against.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class ProductList(generics.ListAPIView):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n    filter_backends = [DjangoFilterBackend]\n    filterset_fields = ['category', 'in_stock']", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u042d\u0442\u043e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043a\u043b\u0430\u0441\u0441 `filterset` \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0432\u0430\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u043a\u0430\u043a:", "children": [{"text": "This will automatically create a ", "block_type": "TextBlock"}, {"code": "FilterSet", "block_type": "CodeSpanBlock"}, {"text": " class for the given fields, and will allow you to make requests such as:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "http://example.com/api/products?category=clothing&in_stock=True", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043a \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u00ab\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u00bb, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f.\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e \u00abFilterSet\u00bb \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 [django-filter] (https://django-filter.readthedocs.io/en/latest/index.html).\n\u0422\u0430\u043a\u0436\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b \u043f\u043e [DRF Integration] (https://django-filter.readthedocs.io/en/latest/guide/rest_framework.html).", "children": [{"text": "For more advanced filtering requirements you can specify a ", "block_type": "TextBlock"}, {"code": "FilterSet", "block_type": "CodeSpanBlock"}, {"text": " class that should be used by the view. You can read more about ", "block_type": "TextBlock"}, {"code": "FilterSet", "block_type": "CodeSpanBlock"}, {"text": "s in the ", "block_type": "TextBlock"}, {"children": [{"text": "django-filter documentation", "block_type": "TextBlock"}], "url": "https://django-filter.readthedocs.io/en/latest/index.html", "title": null, "block_type": "LinkBlock"}, {"text": ". It's also recommended that you read the section on ", "block_type": "TextBlock"}, {"children": [{"text": "DRF integration", "block_type": "TextBlock"}], "url": "https://django-filter.readthedocs.io/en/latest/guide/rest_framework.html", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## searchfilter", "children": [{"text": "SearchFilter", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `searchfilter` \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u043e\u0438\u0441\u043a \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0438\u0441\u043a\u0430 [Django Admin] (https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.\nadmin.modeladmin.search_fields).", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "SearchFilter", "block_type": "CodeSpanBlock"}, {"text": " class supports simple single query parameter based searching, and is based on the ", "block_type": "TextBlock"}, {"children": [{"text": "Django admin's search functionality", "block_type": "TextBlock"}], "url": "https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0432 API Browsable \u0431\u0443\u0434\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f SearchFilter`:", "children": [{"text": "When in use, the browsable API will include a ", "block_type": "TextBlock"}, {"code": "SearchFilter", "block_type": "CodeSpanBlock"}, {"text": " control:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "! [\u041f\u043e\u0438\u0441\u043a \u0444\u0438\u043b\u044c\u0442\u0440\u0430] (../ img/search-filter.png)", "children": [{"url": "../img/search-filter.png", "alt": "Search Filter", "title": null, "block_type": "ImageBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `searchfilter` \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 search_fields`.\n\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c `search_fields` \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043c\u0435\u043d \u043f\u043e\u043b\u0435\u0439 \u0442\u0438\u043f\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a` charfield` \u0438\u043b\u0438 `textfield`.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "SearchFilter", "block_type": "CodeSpanBlock"}, {"text": " class will only be applied if the view has a ", "block_type": "TextBlock"}, {"code": "search_fields", "block_type": "CodeSpanBlock"}, {"text": " attribute set. The ", "block_type": "TextBlock"}, {"code": "search_fields", "block_type": "CodeSpanBlock"}, {"text": " attribute should be a list of names of text type fields on the model, such as ", "block_type": "TextBlock"}, {"code": "CharField", "block_type": "CodeSpanBlock"}, {"text": " or ", "block_type": "TextBlock"}, {"code": "TextField", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework import filters\n\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = [filters.SearchFilter]\n    search_fields = ['username', 'email']", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435, \u0434\u0435\u043b\u0430\u044f \u0442\u0430\u043a\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u043a\u0430\u043a:", "children": [{"text": "This will allow the client to filter the items in the list by making queries such as:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "http://example.com/api/users?search=russell", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043d\u0430 \u0438\u043d\u043e\u0441\u0442\u0440\u0430\u043d\u043d\u043e\u0439 \u043a\u043b\u0430\u0434\u043a\u0435 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043c\u0430\u043d\u0444\u0438\u043b\u0434\u0435 \u0441 \u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439 API API API:", "children": [{"text": "You can also perform a related lookup on a ForeignKey or ManyToManyField with the lookup API double-underscore notation:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "search_fields = ['username', 'email', 'profile__profession']", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0414\u043b\u044f [jsonfield] (https://docs.djangoproject.com/en/3.0/ref/contrib/postgres/fields/#jsonfield) \u0438 [hstorefield] (https://docs.djangoproject.com/en/3.0/ref\n/\u041f\u043e\u043b\u044f Contrib/Postgres/Fields/#hstorefield) \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u0443\u044e \u0434\u0432\u043e\u0439\u043d\u0443\u044e \u043d\u043e\u0442\u0430\u0446\u0438\u044e:", "children": [{"text": "For ", "block_type": "TextBlock"}, {"children": [{"text": "JSONField", "block_type": "TextBlock"}], "url": "https://docs.djangoproject.com/en/3.0/ref/contrib/postgres/fields/#jsonfield", "title": null, "block_type": "LinkBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"children": [{"text": "HStoreField", "block_type": "TextBlock"}], "url": "https://docs.djangoproject.com/en/3.0/ref/contrib/postgres/fields/#hstorefield", "title": null, "block_type": "LinkBlock"}, {"text": " fields you can filter based on nested values within the data structure using the same double-underscore notation:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "search_fields = ['data__breed', 'data__owner__other_pets__0__name']", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u043e\u0438\u0441\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f.\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e\u0438\u0441\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u0440\u043c\u0438\u043d\u043e\u0432 \u043f\u043e\u0438\u0441\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0438/\u0438\u043b\u0438 \u0437\u0430\u043f\u044f\u0442\u043e\u0439.\n\u0415\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u043b\u0435\u043d\u043e\u0432 \u043f\u043e\u0438\u0441\u043a\u0430, \u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u044b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435, \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u0432\u0441\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0442\u0435\u0440\u043c\u0438\u043d\u044b \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b.", "children": [{"text": "By default, searches will use case-insensitive partial matches. The search parameter may contain multiple search terms, which should be whitespace and/or comma separated. If multiple search terms are used then objects will be returned in the list only if all the provided terms are matched.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u043e\u0438\u0441\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043e \u043f\u0443\u0442\u0435\u043c \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043a `search_fields`.", "children": [{"text": "The search behavior may be restricted by prepending various characters to the ", "block_type": "TextBlock"}, {"code": "search_fields", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* '^' \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u0438\u0441\u043a\u043e\u043c.\n* '=' \u0422\u043e\u0447\u043d\u044b\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f.\n* '@' \u041f\u043e\u043b\u043d\u043e\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u043e\u0438\u0441\u043a.\n(\u0412 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 Django [Postgresql Backend] (https://docs.djangoproject.com/en/stable/ref/contrib/postgres/search/).)\n* '$' \u041f\u043e\u0438\u0441\u043a \u0440\u0435\u0436\u0438\u043c\u0430.", "children": [{"children": [{"text": "'^' Starts-with search.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "'=' Exact matches.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "'@' Full-text search. (Currently only supported Django's ", "block_type": "TextBlock"}, {"children": [{"text": "PostgreSQL backend", "block_type": "TextBlock"}], "url": "https://docs.djangoproject.com/en/stable/ref/contrib/postgres/search/", "title": null, "block_type": "LinkBlock"}, {"text": ".)", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "'$' Regex search.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "search_fields = ['=username', '=email']", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e\u0438\u0441\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u00ab\u041f\u043e\u0438\u0441\u043a\u00bb, \u043d\u043e \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e \u0441 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u043e\u0439 `search_param`.", "children": [{"text": "By default, the search parameter is named ", "block_type": "TextBlock"}, {"code": "'search'", "block_type": "CodeSpanBlock"}, {"text": ", but this may be overridden with the ", "block_type": "TextBlock"}, {"code": "SEARCH_PARAM", "block_type": "CodeSpanBlock"}, {"text": " setting.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441 `searchfilter` \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e` get_search_fields () `.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043a\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 `title`, \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430` title_only` \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435:", "children": [{"text": "To dynamically change search fields based on request content, it's possible to subclass the ", "block_type": "TextBlock"}, {"code": "SearchFilter", "block_type": "CodeSpanBlock"}, {"text": " and override the ", "block_type": "TextBlock"}, {"code": "get_search_fields()", "block_type": "CodeSpanBlock"}, {"text": " function. For example, the following subclass will only search on ", "block_type": "TextBlock"}, {"code": "title", "block_type": "CodeSpanBlock"}, {"text": " if the query parameter ", "block_type": "TextBlock"}, {"code": "title_only", "block_type": "CodeSpanBlock"}, {"text": " is in the request:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework import filters\n\nclass CustomSearchFilter(filters.SearchFilter):\n    def get_search_fields(self, view, request):\n        if request.query_params.get('title_only'):\n            return ['title']\n        return super().get_search_fields(view, request)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0441\u043c. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e [django] (https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.modeladmin.search_fields).", "children": [{"text": "For more details, see the ", "block_type": "TextBlock"}, {"children": [{"text": "Django documentation", "block_type": "TextBlock"}], "url": "https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "## ordingfilter", "children": [{"text": "OrderingFilter", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `OrdingFilter` \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u00ab \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 -\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u00bb, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "OrderingFilter", "block_type": "CodeSpanBlock"}, {"text": " class supports simple query parameter controlled ordering of results.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "! [\u0417\u0430\u043a\u0430\u0437\u0430\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440] (../ img/ording-filter.png)", "children": [{"url": "../img/ordering-filter.png", "alt": "Ordering Filter", "title": null, "block_type": "ImageBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u00ab\u0437\u0430\u043a\u0430\u0437\u00bb, \u043d\u043e \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f \u0441 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u043e\u0439 `ordering_param`.", "children": [{"text": "By default, the query parameter is named ", "block_type": "TextBlock"}, {"code": "'ordering'", "block_type": "CodeSpanBlock"}, {"text": ", but this may by overridden with the ", "block_type": "TextBlock"}, {"code": "ORDERING_PARAM", "block_type": "CodeSpanBlock"}, {"text": " setting.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0437\u0430\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:", "children": [{"text": "For example, to order users by username:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "http://example.com/api/users?ordering=username", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041a\u043b\u0438\u0435\u043d\u0442 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0435 \u0437\u0430\u043a\u0430\u0437\u044b, \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0438\u0432 \u0438\u043c\u044f \u043f\u043e\u043b\u044f \u0441 '-', \u043a\u0430\u043a \u0442\u0430\u043a:", "children": [{"text": "The client may also specify reverse orderings by prefixing the field name with '-', like so:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "http://example.com/api/users?ordering=-username", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043a\u0430\u0437\u043e\u0432:", "children": [{"text": "Multiple orderings may also be specified:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "http://example.com/api/users?ordering=account,username", "language": null, "block_type": "CodeBlock"}, {"translated_data": "### \u0423\u043a\u0430\u0437\u0430\u043d\u0438\u0435, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u043a\u0430\u0437\u0430\u043d\u044b \u043f\u0440\u043e\u0442\u0438\u0432", "children": [{"text": "Specifying which fields may be ordered against", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e\u0431\u044b \u0432\u044b \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043b\u0438, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u043b\u044f API \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0442\u044c \u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u0435 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u0438\u044f.\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `ordering_fields` \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0430\u043a:", "children": [{"text": "It's recommended that you explicitly specify which fields the API should allowing in the ordering filter. You can do this by setting an ", "block_type": "TextBlock"}, {"code": "ordering_fields", "block_type": "CodeSpanBlock"}, {"text": " attribute on the view, like so:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = [filters.OrderingFilter]\n    ordering_fields = ['username', 'email']", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u0443\u044e \u0443\u0442\u0435\u0447\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a\u0443\u044e \u043a\u0430\u043a \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0437\u0430\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044f \u0445\u044d\u0448\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.", "children": [{"text": "This helps prevent unexpected data leakage, such as allowing users to order against a password hash field or other sensitive data.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u044b * \u043d\u0435 * \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `ordering_fields` \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438, \u043a\u043b\u0430\u0441\u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0435 \u043f\u043e\u043b\u044f \u043d\u0430 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0435, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c` serializer_class`.", "children": [{"text": "If you ", "block_type": "TextBlock"}, {"children": [{"text": "don't", "block_type": "TextBlock"}], "block_type": "EmphasisTextBlock"}, {"text": " specify an ", "block_type": "TextBlock"}, {"code": "ordering_fields", "block_type": "CodeSpanBlock"}, {"text": " attribute on the view, the filter class will default to allowing the user to filter on any readable fields on the serializer specified by the ", "block_type": "TextBlock"}, {"code": "serializer_class", "block_type": "CodeSpanBlock"}, {"text": " attribute.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0437\u0430\u043f\u0440\u043e\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c, \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0442\u044c \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 * \u043b\u044e\u0431\u043e\u0435 * \u043f\u043e\u043b\u0435 Model \u0438\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 `__all__ '\n`.", "children": [{"text": "If you are confident that the queryset being used by the view doesn't contain any sensitive data, you can also explicitly specify that a view should allow ordering on ", "block_type": "TextBlock"}, {"children": [{"text": "any", "block_type": "TextBlock"}], "block_type": "EmphasisTextBlock"}, {"text": " model field or queryset aggregate, by using the special value ", "block_type": "TextBlock"}, {"code": "'__all__'", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class BookingsListView(generics.ListAPIView):\n    queryset = Booking.objects.all()\n    serializer_class = BookingSerializer\n    filter_backends = [filters.OrderingFilter]\n    ordering_fields = '__all__'", "language": null, "block_type": "CodeBlock"}, {"translated_data": "### \u0423\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e", "children": [{"text": "Specifying a default ordering", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `\u0417\u0430\u043a\u0430\u0437\u0430` \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.", "children": [{"text": "If an ", "block_type": "TextBlock"}, {"code": "ordering", "block_type": "CodeSpanBlock"}, {"text": " attribute is set on the view, this will be used as the default ordering.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0432\u043c\u0435\u0441\u0442\u043e \u044d\u0442\u043e\u0433\u043e \u0432\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0435 \u044d\u0442\u0438\u043c, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 `order_by` \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441, \u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430` ordering` \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u0438\u0435 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u0448\u0430\u0431\u043b\u043e\u043d \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430.\n\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043f\u043e -\u0440\u0430\u0437\u043d\u043e\u043c\u0443, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432.", "children": [{"text": "Typically you'd instead control this by setting ", "block_type": "TextBlock"}, {"code": "order_by", "block_type": "CodeSpanBlock"}, {"text": " on the initial queryset, but using the ", "block_type": "TextBlock"}, {"code": "ordering", "block_type": "CodeSpanBlock"}, {"text": " parameter on the view allows you to specify the ordering in a way that it can then be passed automatically as context to a rendered template. This makes it possible to automatically render column headers differently if they are being used to order the results.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = [filters.OrderingFilter]\n    ordering_fields = ['username', 'email']\n    ordering = ['username']", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0410\u0442\u0440\u0438\u0431\u0443\u0442 `ordering` \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u0438\u0431\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u043b\u0438\u0431\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c/\u043a\u043e\u0440\u043f\u0443\u0441\u043e\u043c \u0441\u0442\u0440\u043e\u043a.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "ordering", "block_type": "CodeSpanBlock"}, {"text": " attribute may be either a string or a list/tuple of strings.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0430\u044f \u043e\u0431\u0449\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f", "children": [{"text": "Custom generic filtering", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "\u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0431\u044d\u043a\u044d\u043d\u0434 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432.", "children": [{"text": "You can also provide your own generic filtering backend, or write an installable app for other developers to use.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c `basefilterbackend` \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434` .filter_queryset (self, \u0437\u0430\u043f\u0440\u043e\u0441, queryset, view) `.\n\u041c\u0435\u0442\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441.", "children": [{"text": "To do so override ", "block_type": "TextBlock"}, {"code": "BaseFilterBackend", "block_type": "CodeSpanBlock"}, {"text": ", and override the ", "block_type": "TextBlock"}, {"code": ".filter_queryset(self, request, queryset, view)", "block_type": "CodeSpanBlock"}, {"text": " method. The method should return a new, filtered queryset.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041f\u043e\u043c\u0438\u043c\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u043e\u0438\u0441\u043a \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e, \u043e\u0431\u0449\u0438\u0435 \u0431\u044d\u043a\u044d\u043d\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b \u0434\u043b\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0442\u043e\u0433\u043e, \u043a\u0430\u043a\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u0438\u0434\u043d\u044b \u043b\u044e\u0431\u043e\u043c\u0443 \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u0438\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e.", "children": [{"text": "As well as allowing clients to perform searches and filtering, generic filter backends can be useful for restricting which objects should be visible to any given request or user.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u041f\u0440\u0438\u043c\u0435\u0440", "children": [{"text": "Example", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0430\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u0438\u0434\u0435\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d\u0438 \u0441\u043e\u0437\u0434\u0430\u043b\u0438.", "children": [{"text": "For example, you might need to restrict users to only being able to see objects they created.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class IsOwnerFilterBackend(filters.BaseFilterBackend):\n    \"\"\"\n    Filter that only allows users to see their own objects.\n    \"\"\"\n    def filter_queryset(self, request, queryset, view):\n        return queryset.filter(owner=request.user)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041c\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0434\u043e\u0441\u0442\u0438\u0447\u044c \u0442\u043e\u0433\u043e \u0436\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0432 `get_queryset ()` \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u0445, \u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u044d\u043a\u044d\u043d\u0434\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u043b\u0435\u0433\u0447\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u044d\u0442\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c \u0438\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0435\u0433\u043e \u043f\u043e \u0432\u0441\u0435\u043c\u0443 API.", "children": [{"text": "We could achieve the same behavior by overriding ", "block_type": "TextBlock"}, {"code": "get_queryset()", "block_type": "CodeSpanBlock"}, {"text": " on the views, but using a filter backend allows you to more easily add this restriction to multiple views, or to apply it across the entire API.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430", "children": [{"text": "Customizing the interface", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041e\u0431\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0432 API -\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435.\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 `to_html ()`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c\u043e\u0435 HTML -\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u0430.\n\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u044c:", "children": [{"text": "Generic filters may also present an interface in the browsable API. To do so you should implement a ", "block_type": "TextBlock"}, {"code": "to_html()", "block_type": "CodeSpanBlock"}, {"text": " method which returns a rendered HTML representation of the filter. This method should have the following signature:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "`to_html (Self, \u0437\u0430\u043f\u0440\u043e\u0441, \u0437\u0430\u043f\u0440\u043e\u0441, \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440)`", "children": [{"code": "to_html(self, request, queryset, view)", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041c\u0435\u0442\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 HTML.", "children": [{"text": "The method should return a rendered HTML string.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "# \u0421\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u044b", "children": [{"text": "Third party packages", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u044b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432.", "children": [{"text": "The following third party packages provide additional filter implementations.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## Django Rest Framework Filters Package", "children": [{"text": "Django REST framework filters package", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "[Django-rest-framework-filters \u043f\u0430\u043a\u0435\u0442] (https://github.com/philipn/django-rest-framework-filters) \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c djangofilterbackend` \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043b\u0435\u0433\u043a\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u043f\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f\u043c \u0438\u043b\u0438\n\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0438\u043f\u043e\u0432 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044f.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"children": [{"text": "django-rest-framework-filters package", "block_type": "TextBlock"}], "url": "https://github.com/philipn/django-rest-framework-filters", "title": null, "block_type": "LinkBlock"}, {"text": " works together with the ", "block_type": "TextBlock"}, {"code": "DjangoFilterBackend", "block_type": "CodeSpanBlock"}, {"text": " class, and allows you to easily create filters across relationships, or create multiple filter lookup types for a given field.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## Django Rest Framework \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a", "children": [{"text": "Django REST framework full word search filter", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "[Djangestframeworkword-word-filter] (https://github.com/trollknurr/django-rest-framework-word-search-pilter) \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u043a\u0430\u043a \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 `filters.searchfilter`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043a\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u0438\u043b\u0438 \u0442\u043e\u0447\u043d\u043e\u0435\n\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"children": [{"text": "djangorestframework-word-filter", "block_type": "TextBlock"}], "url": "https://github.com/trollknurr/django-rest-framework-word-search-filter", "title": null, "block_type": "LinkBlock"}, {"text": " developed as alternative to ", "block_type": "TextBlock"}, {"code": "filters.SearchFilter", "block_type": "CodeSpanBlock"}, {"text": " which will search full word in text, or exact match.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## Django URL -\u0444\u0438\u043b\u044c\u0442\u0440", "children": [{"text": "Django URL Filter", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "[django-url-filter] (https://github.com/miki725/django-url-filter) \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432, \u0431\u043b\u0430\u0433\u043e\u043f\u0440\u0438\u044f\u0442\u043d\u044b\u0445 \u0434\u043b\u044f \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430.\n\u042d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u0441\u0435\u0440\u0438\u0430\u043b\u044b \u0438 \u043f\u043e\u043b\u044f DRF \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043c\u044b\u0441\u043b\u0435, \u0447\u0442\u043e \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0432\u043b\u043e\u0436\u0438\u0442\u044c, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043e\u043d\u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438 \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438.\n\u042d\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n\u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u0449\u0438\u043c \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0430 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e Django `Queryset.", "children": [{"children": [{"text": "django-url-filter", "block_type": "TextBlock"}], "url": "https://github.com/miki725/django-url-filter", "title": null, "block_type": "LinkBlock"}, {"text": " provides a safe way to filter data via human-friendly URLs. It works very similar to DRF serializers and fields in a sense that they can be nested except they are called filtersets and filters. That provides easy way to filter related data. Also this library is generic-purpose so it can be used to filter other sources of data and not only Django ", "block_type": "TextBlock"}, {"code": "QuerySet", "block_type": "CodeSpanBlock"}, {"text": "s.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## DRF-URL-\u0424\u0438\u043b\u044c\u0442\u0435\u0440", "children": [{"text": "drf-url-filters", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "[DRF-url-Filter] (https://github.com/manjitkumar/drf-url-filters)-\u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 Django \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u043d\u0430 DRF `modelViewSet` QuerySet` \u0432 \u0447\u0438\u0441\u0442\u043e\u043c, \u043f\u0440\u043e\u0441\u0442\u043e\u043c \u0438 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u043e\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u0435\n\u0410\u043d\u043a\u0435\u0442\n\u041e\u043d \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445.\n\u041a\u0440\u0430\u0441\u0438\u0432\u044b\u0439 \u043f\u0430\u043a\u0435\u0442 Python `Fultbout '\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n\u0421\u0430\u043c\u043e\u0435 \u043f\u0440\u0438\u044f\u0442\u043d\u043e\u0435 \u0432 \u0441\u043b\u0430\u0434\u043e\u0441\u0442\u0440\u0430\u0441\u0442\u043d\u043e\u043c - \u044d\u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.", "children": [{"children": [{"text": "drf-url-filter", "block_type": "TextBlock"}], "url": "https://github.com/manjitkumar/drf-url-filters", "title": null, "block_type": "LinkBlock"}, {"text": " is a simple Django app to apply filters on drf ", "block_type": "TextBlock"}, {"code": "ModelViewSet", "block_type": "CodeSpanBlock"}, {"text": "'s ", "block_type": "TextBlock"}, {"code": "Queryset", "block_type": "CodeSpanBlock"}, {"text": " in a clean, simple and configurable way. It also supports validations on incoming query params and their values. A beautiful python package ", "block_type": "TextBlock"}, {"code": "Voluptuous", "block_type": "CodeSpanBlock"}, {"text": " is being used for validations on the incoming query parameters. The best part about voluptuous is you can define your own validations as per your query params requirements.", "block_type": "TextBlock"}], "block_type": "Paragraph"}]}