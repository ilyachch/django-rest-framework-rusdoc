{"source": "/home/ilyachch/Projects/OpenSource/django-rest-framework-rusdoc/.reference/api-navigation/testing.md", "blocks": [{"block_type": "SeparatorBlock"}, {"translated_data": "\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a:\n- test.py", "children": [{"text": "source:\n    - test.py", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435", "children": [{"text": "Testing", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "> \u041a\u043e\u0434 \u0431\u0435\u0437 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442\u0441\u044f, \u043a\u0430\u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e.\n>\n> & mdash;\n[\u0414\u0436\u0435\u0439\u043a\u043e\u0431 \u041a\u0430\u043f\u043b\u0430\u043d-\u041c\u043e\u0441\u0441] (https://jacobian.org/writing/django-apps-with-buildout/#s-reate-a-test-wrapper)", "children": [{"children": [{"text": "Code without tests is broken as designed.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "NewlineBlock"}, {"children": [{"text": "&mdash; ", "block_type": "TextBlock"}, {"children": [{"text": "Jacob Kaplan-Moss", "block_type": "TextBlock"}], "url": "https://jacobian.org/writing/django-apps-with-buildout/#s-create-a-test-wrapper", "title": null, "block_type": "LinkBlock"}], "block_type": "Paragraph"}], "block_type": "BlockQuote"}, {"translated_data": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 REST \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 Django, \u0438 \u0443\u043b\u0443\u0447\u0448\u0430\u044e\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 API.", "children": [{"text": "REST framework includes a few helper classes that extend Django's existing test framework, and improve support for making API requests.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "# Apirequestfactory", "children": [{"text": "APIRequestFactory", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "Extends [Django's \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 `requestFactory` class] (https://docs.djangoproject.com/en/stable/topics/testing/advanced/#django.test.client.requestfactory).", "children": [{"text": "Extends ", "block_type": "TextBlock"}, {"children": [{"text": "Django's existing ", "block_type": "TextBlock"}, {"code": "RequestFactory", "block_type": "CodeSpanBlock"}, {"text": " class", "block_type": "TextBlock"}], "url": "https://docs.djangoproject.com/en/stable/topics/testing/advanced/#django.test.client.RequestFactory", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432", "children": [{"text": "Creating test requests", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `apirequestfactory '\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0447\u0442\u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u044b\u0439 API \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 Django` requestFactory'.\n\u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442 `.get ()`, `.post ()`, `.put ()`, `.patch ()`, `.delete ()`, `.head ()` \u0438 `.\n() `\u041c\u0435\u0442\u043e\u0434\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "APIRequestFactory", "block_type": "CodeSpanBlock"}, {"text": " class supports an almost identical API to Django's standard ", "block_type": "TextBlock"}, {"code": "RequestFactory", "block_type": "CodeSpanBlock"}, {"text": " class.  This means that the standard ", "block_type": "TextBlock"}, {"code": ".get()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".post()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".put()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".patch()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".delete()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".head()", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": ".options()", "block_type": "CodeSpanBlock"}, {"text": " methods are all available.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.test import APIRequestFactory\n\n# Using the standard RequestFactory API to create a form POST request\nfactory = APIRequestFactory()\nrequest = factory.post('/notes/', {'title': 'new idea'})", "language": null, "block_type": "CodeBlock"}, {"translated_data": "#### \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 `format`", "children": [{"text": "Using the ", "block_type": "TextBlock"}, {"code": "format", "block_type": "CodeSpanBlock"}, {"text": " argument", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u041c\u0435\u0442\u043e\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442 \u043a\u043e\u0440\u043f\u0443\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u00abpost\u00bb, `put` \u0438` patch ', \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u00ab\u0444\u043e\u0440\u043c\u0430\u0442\u00bb, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043b\u0435\u0433\u043a\u043e \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430, \u043a\u0440\u043e\u043c\u0435 \u043a\u0430\u043a \u043c\u043d\u043e\u0433\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0444\u043e\u0440\u043c\u044b.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "Methods which create a request body, such as ", "block_type": "TextBlock"}, {"code": "post", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "put", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": "patch", "block_type": "CodeSpanBlock"}, {"text": ", include a ", "block_type": "TextBlock"}, {"code": "format", "block_type": "CodeSpanBlock"}, {"text": " argument, which make it easy to generate requests using a content type other than multipart form data.  For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "# Create a JSON POST request\nfactory = APIRequestFactory()\nrequest = factory.post('/notes/', {'title': 'new idea'}, format='json')", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b: `'Multipart'` \u0438`' json' '.\n\u0414\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0441 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c Django `requestFactory '\u0444\u043e\u0440\u043c\u0430\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e -`' Multipart '.", "children": [{"text": "By default the available formats are ", "block_type": "TextBlock"}, {"code": "'multipart'", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": "'json'", "block_type": "CodeSpanBlock"}, {"text": ".  For compatibility with Django's existing ", "block_type": "TextBlock"}, {"code": "RequestFactory", "block_type": "CodeSpanBlock"}, {"text": " the default format is ", "block_type": "TextBlock"}, {"code": "'multipart'", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0448\u0438\u0440\u043e\u043a\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0444\u043e\u0440\u043c\u0430\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, [\u0441\u043c. \u0420\u0430\u0437\u0434\u0435\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438] (#configuration).", "children": [{"text": "To support a wider set of request formats, or change the default format, ", "block_type": "TextBlock"}, {"children": [{"text": "see the configuration section", "block_type": "TextBlock"}], "url": "#configuration", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "#### \u044f\u0432\u043d\u043e \u043a\u043e\u0434\u0438\u0440\u0443\u044f \u043a\u043e\u0440\u043f\u0443\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430", "children": [{"text": "Explicitly encoding the request body", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u044f\u0432\u043d\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 \u0444\u043b\u0430\u0433 `content_type`.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "If you need to explicitly encode the request body, you can do so by setting the ", "block_type": "TextBlock"}, {"code": "content_type", "block_type": "CodeSpanBlock"}, {"text": " flag.  For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "request = factory.post('/notes/', json.dumps({'title': 'new idea'}), content_type='application/json')", "language": null, "block_type": "CodeBlock"}, {"translated_data": "#### \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435", "children": [{"text": "PUT and PATCH with form data", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u041e\u0434\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u0442\u043e\u0438\u0442 \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u043c\u0435\u0436\u0434\u0443 `QuequistFactory` \u0438 Framework's Framework Django, - \u044d\u0442\u043e \u0442\u043e, \u0447\u0442\u043e \u043c\u043d\u043e\u0433\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432, \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u0442` .post () `.", "children": [{"text": "One difference worth noting between Django's ", "block_type": "TextBlock"}, {"code": "RequestFactory", "block_type": "CodeSpanBlock"}, {"text": " and REST framework's ", "block_type": "TextBlock"}, {"code": "APIRequestFactory", "block_type": "CodeSpanBlock"}, {"text": " is that multipart form data will be encoded for methods other than just ", "block_type": "TextBlock"}, {"code": ".post()", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f `apirequestfactory`, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0444\u043e\u0440\u043c\u0443, \u043a\u0430\u043a SO:", "children": [{"text": "For example, using ", "block_type": "TextBlock"}, {"code": "APIRequestFactory", "block_type": "CodeSpanBlock"}, {"text": ", you can make a form PUT request like so:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "factory = APIRequestFactory()\nrequest = factory.put('/notes/547/', {'title': 'remember to email dave'})", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Django `requestFactory`, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u044f\u0432\u043d\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e:", "children": [{"text": "Using Django's ", "block_type": "TextBlock"}, {"code": "RequestFactory", "block_type": "CodeSpanBlock"}, {"text": ", you'd need to explicitly encode the data yourself:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from django.test.client import encode_multipart, RequestFactory\n\nfactory = RequestFactory()\ndata = {'title': 'remember to email dave'}\ncontent = encode_multipart('BoUnDaRyStRiNg', data)\ncontent_type = 'multipart/form-data; boundary=BoUnDaRyStRiNg'\nrequest = factory.put('/notes/547/', content, content_type=content_type)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u043f\u0440\u0438\u043d\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438", "children": [{"text": "Forcing authentication", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0437\u0430\u0432\u043e\u0434\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0447\u0430\u0441\u0442\u043e \u0443\u0434\u043e\u0431\u043d\u043e \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441, \u0430 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.", "children": [{"text": "When testing views directly using a request factory, it's often convenient to be able to directly authenticate the request, rather than having to construct the correct authentication credentials.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u043d\u0430\u0441\u0438\u043b\u044c\u043d\u043e \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 `force_authenticate ()`.", "children": [{"text": "To forcibly authenticate a request, use the ", "block_type": "TextBlock"}, {"code": "force_authenticate()", "block_type": "CodeSpanBlock"}, {"text": " method.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.test import force_authenticate\n\nfactory = APIRequestFactory()\nuser = User.objects.get(username='olivia')\nview = AccountDetail.as_view()\n\n# Make an authenticated request to the view...\nrequest = factory.get('/accounts/django-superstars/')\nforce_authenticate(request, user=user)\nresponse = view(request)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041f\u043e\u0434\u043f\u0438\u0441\u044c\u044e \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f `force_authenticate (\u0437\u0430\u043f\u0440\u043e\u0441, user = none, token = none)`.\n\u041f\u0440\u0438 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0432\u044b\u0437\u043e\u0432\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u043e\u0431\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0442\u043e\u043a\u0435\u043d\u0430.", "children": [{"text": "The signature for the method is ", "block_type": "TextBlock"}, {"code": "force_authenticate(request, user=None, token=None)", "block_type": "CodeSpanBlock"}, {"text": ".  When making the call, either or both of the user and token may be set.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u043d\u0430\u0441\u0438\u043b\u044c\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0442\u043e\u043a\u0435\u043d\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0447\u0442\u043e -\u0442\u043e \u0432\u0440\u043e\u0434\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e:", "children": [{"text": "For example, when forcibly authenticating using a token, you might do something like the following:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "user = User.objects.get(username='olivia')\nrequest = factory.get('/accounts/django-superstars/')\nforce_authenticate(request, user=user, token=user.auth_token)", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "** \u041f\u0420\u0418\u041c\u0415\u0427\u0410\u041d\u0418\u0415 **: `force_authenticate` \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442` request.user` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0443 `user`\u2019 in-memory.\n\u0415\u0441\u043b\u0438 \u0432\u044b \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 `user` \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0442\u0435\u0441\u0442\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435` user`, \u0432\u0430\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0437\u0432\u043e\u043d\u0438\u0442\u044c [`refresh_from_db ()`] (https://docs.djangoproject.com/en/stable\n/ref/models/instances/#django.db.models.model.refresh_from_db) \u043c\u0435\u0436\u0434\u0443 \u0442\u0435\u0441\u0442\u0430\u043c\u0438.", "children": [{"children": [{"text": "Note", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "force_authenticate", "block_type": "CodeSpanBlock"}, {"text": " directly sets ", "block_type": "TextBlock"}, {"code": "request.user", "block_type": "CodeSpanBlock"}, {"text": " to the in-memory ", "block_type": "TextBlock"}, {"code": "user", "block_type": "CodeSpanBlock"}, {"text": " instance. If you are re-using the same ", "block_type": "TextBlock"}, {"code": "user", "block_type": "CodeSpanBlock"}, {"text": " instance across multiple tests that update the saved ", "block_type": "TextBlock"}, {"code": "user", "block_type": "CodeSpanBlock"}, {"text": " state, you may need to call ", "block_type": "TextBlock"}, {"children": [{"code": "refresh_from_db()", "block_type": "CodeSpanBlock"}], "url": "https://docs.djangoproject.com/en/stable/ref/models/instances/#django.db.models.Model.refresh_from_db", "title": null, "block_type": "LinkBlock"}, {"text": " between tests.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "** \u041f\u0420\u0418\u041c\u0415\u0427\u0410\u041d\u0418\u0415 **: \u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 `apirequestfactory` \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 - \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 Django` httprequest`, \u0430 \u043d\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 REST Framework `request`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0432\u0438\u0434 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d.", "children": [{"children": [{"text": "Note", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": When using ", "block_type": "TextBlock"}, {"code": "APIRequestFactory", "block_type": "CodeSpanBlock"}, {"text": ", the object that is returned is Django's standard ", "block_type": "TextBlock"}, {"code": "HttpRequest", "block_type": "CodeSpanBlock"}, {"text": ", and not REST framework's ", "block_type": "TextBlock"}, {"code": "Request", "block_type": "CodeSpanBlock"}, {"text": " object, which is only generated once the view is called.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043d\u0430 \u043e\u0431\u044a\u0435\u043a\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0435.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 `.token` \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0430, \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430` .user` \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0441\u0435\u0430\u043d\u0441\u0430.", "children": [{"text": "This means that setting attributes directly on the request object may not always have the effect you expect.  For example, setting ", "block_type": "TextBlock"}, {"code": ".token", "block_type": "CodeSpanBlock"}, {"text": " directly will have no effect, and setting ", "block_type": "TextBlock"}, {"code": ".user", "block_type": "CodeSpanBlock"}, {"text": " directly will only work if session authentication is being used.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "# Request will only authenticate if `SessionAuthentication` is in use.\nrequest = factory.get('/accounts/django-superstars/')\nrequest.user = user\nresponse = view(request)", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "## \u0432\u044b\u043d\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 CSRF", "children": [{"text": "Forcing CSRF validation", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e `apirequestfactory` \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 CSRF, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0435 \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b REST.\n\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u044f\u0432\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e CSRF, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 \u0444\u043b\u0430\u0433 `reforce_csrf_checks` \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u0432\u043e\u0434\u0430.", "children": [{"text": "By default, requests created with ", "block_type": "TextBlock"}, {"code": "APIRequestFactory", "block_type": "CodeSpanBlock"}, {"text": " will not have CSRF validation applied when passed to a REST framework view.  If you need to explicitly turn CSRF validation on, you can do so by setting the ", "block_type": "TextBlock"}, {"code": "enforce_csrf_checks", "block_type": "CodeSpanBlock"}, {"text": " flag when instantiating the factory.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "factory = APIRequestFactory(enforce_csrf_checks=True)", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "** \u041f\u0420\u0418\u041c\u0415\u0427\u0410\u041d\u0418\u0415 **: \u0421\u0442\u043e\u0438\u0442 \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 `requestFactory 'Django \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u044d\u0442\u0443 \u043e\u043f\u0446\u0438\u044e, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e Django \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 CSRF \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u043c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u0438\u0434\u043e\u0432.\n\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 Framework REST, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 CSRF \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0430\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 CSRF \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f.", "children": [{"children": [{"text": "Note", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": It's worth noting that Django's standard ", "block_type": "TextBlock"}, {"code": "RequestFactory", "block_type": "CodeSpanBlock"}, {"text": " doesn't need to include this option, because when using regular Django the CSRF validation takes place in middleware, which is not run when testing views directly.  When using REST framework, CSRF validation takes place inside the view, so the request factory needs to disable view-level CSRF checks.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# Apiclient", "children": [{"text": "APIClient", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "Extends [Django's \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 `client` class] (https://docs.djangoproject.com/en/stable/topics/testing/tools/#the-test-client).", "children": [{"text": "Extends ", "block_type": "TextBlock"}, {"children": [{"text": "Django's existing ", "block_type": "TextBlock"}, {"code": "Client", "block_type": "CodeSpanBlock"}, {"text": " class", "block_type": "TextBlock"}], "url": "https://docs.djangoproject.com/en/stable/topics/testing/tools/#the-test-client", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0414\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b", "children": [{"text": "Making requests", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `apiclient` \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u043e\u0442 \u0436\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0447\u0442\u043e \u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 Django` client`.\n\u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442 `.get ()`, `.post ()`, `.put ()`, `.patch ()`, `.delete ()`, `.head ()` \u0438 `.\n() `\u041c\u0435\u0442\u043e\u0434\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "APIClient", "block_type": "CodeSpanBlock"}, {"text": " class supports the same request interface as Django's standard ", "block_type": "TextBlock"}, {"code": "Client", "block_type": "CodeSpanBlock"}, {"text": " class.  This means that the standard ", "block_type": "TextBlock"}, {"code": ".get()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".post()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".put()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".patch()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".delete()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".head()", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": ".options()", "block_type": "CodeSpanBlock"}, {"text": " methods are all available.  For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.test import APIClient\n\nclient = APIClient()\nclient.post('/notes/', {'title': 'new idea'}, format='json')", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0448\u0438\u0440\u043e\u043a\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0444\u043e\u0440\u043c\u0430\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, [\u0441\u043c. \u0420\u0430\u0437\u0434\u0435\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438] (#configuration).", "children": [{"text": "To support a wider set of request formats, or change the default format, ", "block_type": "TextBlock"}, {"children": [{"text": "see the configuration section", "block_type": "TextBlock"}], "url": "#configuration", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f", "children": [{"text": "Authenticating", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "#### .login (** kwargs)", "children": [{"text": ".login(**kwargs)", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u041c\u0435\u0442\u043e\u0434 `login` \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u0442 \u0442\u043e\u0447\u043d\u043e \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u0441 \u043e\u0431\u044b\u0447\u043d\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u043c Django` client '.\n\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u0440\u043e\u0442\u0438\u0432 \u043b\u044e\u0431\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u00abSessionAuthentication\u00bb.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "login", "block_type": "CodeSpanBlock"}, {"text": " method functions exactly as it does with Django's regular ", "block_type": "TextBlock"}, {"code": "Client", "block_type": "CodeSpanBlock"}, {"text": " class.  This allows you to authenticate requests against any views which include ", "block_type": "TextBlock"}, {"code": "SessionAuthentication", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "# Make all requests in the context of a logged in session.\nclient = APIClient()\nclient.login(username='lauren', password='secret')", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u0432\u044b\u0445\u043e\u0434\u0438\u0442\u044c \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0432\u044b\u0437\u043e\u0432\u0438\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 `logout` \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e.", "children": [{"text": "To logout, call the ", "block_type": "TextBlock"}, {"code": "logout", "block_type": "CodeSpanBlock"}, {"text": " method as usual.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "# Log out\nclient.logout()", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041c\u0435\u0442\u043e\u0434 `login` \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f API, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0441\u0435\u0430\u043d\u0441\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0435\u0431 -\u0441\u0430\u0439\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 AJAX \u0441 API.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "login", "block_type": "CodeSpanBlock"}, {"text": " method is appropriate for testing APIs that use session authentication, for example web sites which include AJAX interaction with the API.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "#### .credentials (** kwargs)", "children": [{"text": ".credentials(**kwargs)", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u041c\u0435\u0442\u043e\u0434 \u00ab\u0443\u0447\u0435\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\u00bb \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u0442\u0435\u043c \u0431\u0443\u0434\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0432\u043e \u0432\u0441\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "credentials", "block_type": "CodeSpanBlock"}, {"text": " method can be used to set headers that will then be included on all subsequent requests by the test client.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.authtoken.models import Token\nfrom rest_framework.test import APIClient\n\n# Include an appropriate `Authorization:` header on all requests.\ntoken = Token.objects.get(user__username='lauren')\nclient = APIClient()\nclient.credentials(HTTP_AUTHORIZATION='Token ' + token.key)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432\u044b\u0437\u043e\u0432 \u00ab\u0443\u0447\u0435\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\u00bb \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0440\u0430\u0437 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043b\u044e\u0431\u044b\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u044f \u043c\u0435\u0442\u043e\u0434 \u0431\u0435\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.", "children": [{"text": "Note that calling ", "block_type": "TextBlock"}, {"code": "credentials", "block_type": "CodeSpanBlock"}, {"text": " a second time overwrites any existing credentials.  You can unset any existing credentials by calling the method with no arguments.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "# Stop including any credentials\nclient.credentials()", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041c\u0435\u0442\u043e\u0434 \u00ab\u0443\u0447\u0435\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\u00bb \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f API, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f OAuth1a \u0438 OAuth2 \u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0441\u0445\u0435\u043c\u044b \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "credentials", "block_type": "CodeSpanBlock"}, {"text": " method is appropriate for testing APIs that require authentication headers, such as basic authentication, OAuth1a and OAuth2 authentication, and simple token authentication schemes.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "#### .force_authenticate (user = none, token = none)", "children": [{"text": ".force_authenticate(user=None, token=None)", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u0418\u043d\u043e\u0433\u0434\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u0431\u043e\u0439\u0442\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0438 \u0437\u0430\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f.", "children": [{"text": "Sometimes you may want to bypass authentication entirely and force all requests by the test client to be automatically treated as authenticated.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u044f\u0440\u043b\u044b\u043a\u043e\u043c, \u0435\u0441\u043b\u0438 \u0432\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0435 API, \u043d\u043e \u043d\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b.", "children": [{"text": "This can be a useful shortcut if you're testing the API but don't want to have to construct valid authentication credentials in order to make test requests.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "user = User.objects.get(username='lauren')\nclient = APIClient()\nclient.force_authenticate(user=user)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0432\u044b\u0437\u043e\u0432\u0438\u0442\u0435 `force_authenticate` \u043d\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438/\u0438\u043b\u0438 \u0442\u043e\u043a\u0435\u043d\u0430 \u043d\u0430` none`.", "children": [{"text": "To unauthenticate subsequent requests, call ", "block_type": "TextBlock"}, {"code": "force_authenticate", "block_type": "CodeSpanBlock"}, {"text": " setting the user and/or token to ", "block_type": "TextBlock"}, {"code": "None", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "client.force_authenticate(user=None)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## Validation", "children": [{"text": "CSRF validation", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f CSRF \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 `apiclient`.\n\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u044f\u0432\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 CSRF, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 \u0444\u043b\u0430\u0433 `reforce_csrf_checks` \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.", "children": [{"text": "By default CSRF validation is not applied when using ", "block_type": "TextBlock"}, {"code": "APIClient", "block_type": "CodeSpanBlock"}, {"text": ".  If you need to explicitly enable CSRF validation, you can do so by setting the ", "block_type": "TextBlock"}, {"code": "enforce_csrf_checks", "block_type": "CodeSpanBlock"}, {"text": " flag when instantiating the client.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "client = APIClient(enforce_csrf_checks=True)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 CSRF \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043a \u043b\u044e\u0431\u044b\u043c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c \u0441\u0435\u0430\u043d\u0441\u0430.\n\u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 CSRF \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u0431\u044b\u043b \u0432\u043e\u0448\u0435\u043b \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u0432\u044b\u0437\u044b\u0432\u0430\u044f `login ()`.", "children": [{"text": "As usual CSRF validation will only apply to any session authenticated views.  This means CSRF validation will only occur if the client has been logged in by calling ", "block_type": "TextBlock"}, {"code": "login()", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# Requestsclient", "children": [{"text": "RequestsClient", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 REST \u0442\u0430\u043a\u0436\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0432\u0430\u0448\u0438\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 Python, `\u0437\u0430\u043f\u0440\u043e\u0441\u044b`.\n\u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e, \u0435\u0441\u043b\u0438:", "children": [{"text": "REST framework also includes a client for interacting with your application\nusing the popular Python library, ", "block_type": "TextBlock"}, {"code": "requests", "block_type": "CodeSpanBlock"}, {"text": ". This may be useful if:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* \u0412\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441 API \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0438\u0437 \u0434\u0440\u0443\u0433\u043e\u0439 \u0443\u0441\u043b\u0443\u0433\u0438 Python,", "children": [{"children": [{"text": "You are expecting to interface with the API primarily from another Python service,", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"translated_data": "\u0438 \u0445\u043e\u0447\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u043b\u0443\u0436\u0431\u0443 \u043d\u0430 \u0442\u043e\u043c \u0436\u0435 \u0443\u0440\u043e\u0432\u043d\u0435, \u0447\u0442\u043e \u0438 \u043a\u043b\u0438\u0435\u043d\u0442.", "children": [{"text": "and want to test the service at the same level as the client will see.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* \u0412\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0433\u043b\u0438 \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u044b \u043f\u0440\u043e\u0442\u0438\u0432 \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0438\u043b\u0438", "children": [{"children": [{"text": "You want to write tests in such a way that they can also be run against a staging or", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"translated_data": "\u0436\u0438\u0432\u0430\u044f \u0441\u0440\u0435\u0434\u0430.\n(\u0421\u043c. \u00ab\u0416\u0438\u0432\u044b\u0435 \u0442\u0435\u0441\u0442\u044b\u00bb \u043d\u0438\u0436\u0435.)", "children": [{"text": "live environment. (See \"Live tests\" below.)", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u042d\u0442\u043e \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0442\u043e\u0447\u043d\u043e \u0442\u043e\u0442 \u0436\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u0447\u0442\u043e \u0438 \u0435\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0441\u0435\u0430\u043d\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n\u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e.", "children": [{"text": "This exposes exactly the same interface as if you were using a requests session\ndirectly.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.test import RequestsClient\n\nclient = RequestsClient()\nresponse = client.get('http://testserver/users/')\nassert response.status_code == 200", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442, \u0447\u0442\u043e\u0431\u044b \u0432\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u043b\u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043a\u0432\u0430\u043b\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 URL -\u0430\u0434\u0440\u0435\u0441\u0430.", "children": [{"text": "Note that the requests client requires you to pass fully qualified URLs.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## RequestSclient \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445", "children": [{"text": "RequestsClient and working with the database", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `requestsClient` \u043f\u043e\u043b\u0435\u0437\u0435\u043d, \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u043c \u0441\u043b\u0443\u0436\u0431\u044b.\n\u042d\u0442\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u043e\u0433\u043e, \u0447\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 Django, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u044d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u0441\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0447\u0435\u0440\u0435\u0437 API.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "RequestsClient", "block_type": "CodeSpanBlock"}, {"text": " class is useful if you want to write tests that solely interact with the service interface. This is a little stricter than using the standard Django test client, as it means that all interactions should be via the API.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 `requestsClient`, \u0432\u044b \u0437\u0430\u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0442\u0435\u0441\u0442\u0430, \u0430 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 API, \u0430 \u043d\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c, \u0447\u0442\u043e `customer.objects.count () == 3` \u0432\u044b \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0440\u0438 \u0437\u0430\u043f\u0438\u0441\u0438.", "children": [{"text": "If you're using ", "block_type": "TextBlock"}, {"code": "RequestsClient", "block_type": "CodeSpanBlock"}, {"text": " you'll want to ensure that test setup, and results assertions are performed as regular API calls, rather than interacting with the database models directly. For example, rather than checking that ", "block_type": "TextBlock"}, {"code": "Customer.objects.count() == 3", "block_type": "CodeSpanBlock"}, {"text": " you would list the customers endpoint, and ensure that it contains three records.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f", "children": [{"text": "Headers & Authentication", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0442\u0430\u043a\u0438\u043c \u0436\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u043c\n\u043a\u0430\u043a [\u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e `requests.session` ancement] (https://requests.readthedocs.io/en/master/user/advanced/#session-objects).", "children": [{"text": "Custom headers and authentication credentials can be provided in the same way\nas ", "block_type": "TextBlock"}, {"children": [{"text": "when using a standard ", "block_type": "TextBlock"}, {"code": "requests.Session", "block_type": "CodeSpanBlock"}, {"text": " instance", "block_type": "TextBlock"}], "url": "https://requests.readthedocs.io/en/master/user/advanced/#session-objects", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from requests.auth import HTTPBasicAuth\n\nclient.auth = HTTPBasicAuth('user', 'pass')\nclient.headers.update({'x-test': 'true'})", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## csrf", "children": [{"text": "CSRF", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 `sessionAuthentication`, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d CSRF\n\u0414\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 `post`,` put`, `patch` \u0438\u043b\u0438` delete '.", "children": [{"text": "If you're using ", "block_type": "TextBlock"}, {"code": "SessionAuthentication", "block_type": "CodeSpanBlock"}, {"text": " then you'll need to include a CSRF token\nfor any ", "block_type": "TextBlock"}, {"code": "POST", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "PUT", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "PATCH", "block_type": "CodeSpanBlock"}, {"text": " or ", "block_type": "TextBlock"}, {"code": "DELETE", "block_type": "CodeSpanBlock"}, {"text": " requests.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u0441\u043b\u0435\u0434\u0443\u044f \u0442\u043e\u043c\u0443 \u0436\u0435 \u043f\u043e\u0442\u043e\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u043a\u043b\u0438\u0435\u043d\u0442 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 JavaScript.\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 `get`, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d CSRF, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e\n\u0442\u043e\u043a\u0435\u043d \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435.", "children": [{"text": "You can do so by following the same flow that a JavaScript based client would use.\nFirst, make a ", "block_type": "TextBlock"}, {"code": "GET", "block_type": "CodeSpanBlock"}, {"text": " request in order to obtain a CSRF token, then present that\ntoken in the following request.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440...", "children": [{"text": "For example...", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "client = RequestsClient()\n\n# Obtain a CSRF token.\nresponse = client.get('http://testserver/homepage/')\nassert response.status_code == 200\ncsrftoken = response.cookies['csrftoken']\n\n# Interact with the API.\nresponse = client.post('http://testserver/organisations/', json={\n    'name': 'MegaCorp',\n    'status': 'active'\n}, headers={'X-CSRFToken': csrftoken})\nassert response.status_code == 200", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u0416\u0438\u0432\u044b\u0435 \u0442\u0435\u0441\u0442\u044b", "children": [{"text": "Live tests", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u0440\u0438 \u0442\u0449\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u0430\u043a `requestsclient, \u0438` coreapiclient\n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435, \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f\n\u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043f\u0440\u043e\u0442\u0438\u0432 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0430\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u044b.", "children": [{"text": "With careful usage both the ", "block_type": "TextBlock"}, {"code": "RequestsClient", "block_type": "CodeSpanBlock"}, {"text": " and the ", "block_type": "TextBlock"}, {"code": "CoreAPIClient", "block_type": "CodeSpanBlock"}, {"text": " provide\nthe ability to write test cases that can run either in development, or be run\ndirectly against your staging server or production environment.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u0442\u0438\u043b\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439\n\u041c\u043e\u0449\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0432\u0430\u0448 \u0436\u0438\u0432\u043e\u0439 \u0441\u0435\u0440\u0432\u0438\u0441.\n\u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u044b\u0445\n\u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043a \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0435 \u0438 \u0440\u0430\u0437\u0440\u044b\u0432, \u0447\u0442\u043e\u0431\u044b \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0447\u0442\u043e \u0442\u0435\u0441\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0442\u0430\u043a, \u043a\u0430\u043a \u043e\u043d\u0438\n\u041d\u0435 \u0432\u043b\u0438\u044f\u0439\u0442\u0435 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.", "children": [{"text": "Using this style to create basic tests of a few core pieces of functionality is\na powerful way to validate your live service. Doing so may require some careful\nattention to setup and teardown to ensure that the tests run in a way that they\ndo not directly affect customer data.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# Coreapiclient", "children": [{"text": "CoreAPIClient", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "Coreapiclient \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441 \u0432\u0430\u0448\u0438\u043c API \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Python\n`\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 Coreapi.", "children": [{"text": "The CoreAPIClient allows you to interact with your API using the Python\n", "block_type": "TextBlock"}, {"code": "coreapi", "block_type": "CodeSpanBlock"}, {"text": " client library.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "# Fetch the API schema\nclient = CoreAPIClient()\nschema = client.get('http://testserver/schema/')\n\n# Create a new organisation\nparams = {'name': 'MegaCorp', 'status': 'active'}\nclient.action(schema, ['organisations', 'create'], params)\n\n# Ensure that the organisation exists in the listing\ndata = client.action(schema, ['organisations', 'list'])\nassert(len(data) == 1)\nassert(data == [{'name': 'MegaCorp', 'status': 'active'}])", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f", "children": [{"text": "Headers & Authentication", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441 `coreapiclient` \u0432\n\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u043a\u0430\u043a \u0441 `requestsclient`.", "children": [{"text": "Custom headers and authentication may be used with ", "block_type": "TextBlock"}, {"code": "CoreAPIClient", "block_type": "CodeSpanBlock"}, {"text": " in a\nsimilar way as with ", "block_type": "TextBlock"}, {"code": "RequestsClient", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from requests.auth import HTTPBasicAuth\n\nclient = CoreAPIClient()\nclient.session.auth = HTTPBasicAuth('user', 'pass')\nclient.session.headers.update({'x-test': 'true'})", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 API", "children": [{"text": "API Test cases", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 REST \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 [\u043a\u043b\u0430\u0441\u0441\u044b \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430 Django] (https://docs.djangoproject.com/en/stable/topics/testing/tools/#provided-test-case-classes),\n\u041d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 `apiclient` \u0432\u043c\u0435\u0441\u0442\u043e \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e Django` client '.", "children": [{"text": "REST framework includes the following test case classes, that mirror the existing ", "block_type": "TextBlock"}, {"children": [{"text": "Django's test case classes", "block_type": "TextBlock"}], "url": "https://docs.djangoproject.com/en/stable/topics/testing/tools/#provided-test-case-classes", "title": null, "block_type": "LinkBlock"}, {"text": ", but use ", "block_type": "TextBlock"}, {"code": "APIClient", "block_type": "CodeSpanBlock"}, {"text": " instead of Django's default ", "block_type": "TextBlock"}, {"code": "Client", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* `ApisimpleTestSact`\n* `ApitransactionTestCase`\n* `Apitestcase`\n* `ApiliveSerVertStAcke`", "children": [{"children": [{"code": "APISimpleTestCase", "block_type": "CodeSpanBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "APITransactionTestCase", "block_type": "CodeSpanBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "APITestCase", "block_type": "CodeSpanBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "APILiveServerTestCase", "block_type": "CodeSpanBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"translated_data": "## \u041f\u0440\u0438\u043c\u0435\u0440", "children": [{"text": "Example", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 REST Framework, \u043a\u0430\u043a \u0434\u043b\u044f \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 Django.\n\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c `self.client` \u0431\u0443\u0434\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c` apiclient '.", "children": [{"text": "You can use any of REST framework's test case classes as you would for the regular Django test case classes.  The ", "block_type": "TextBlock"}, {"code": "self.client", "block_type": "CodeSpanBlock"}, {"text": " attribute will be an ", "block_type": "TextBlock"}, {"code": "APIClient", "block_type": "CodeSpanBlock"}, {"text": " instance.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from django.urls import reverse\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\nfrom myproject.apps.core.models import Account\n\nclass AccountTests(APITestCase):\n    def test_create_account(self):\n        \"\"\"\n        Ensure we can create a new account object.\n        \"\"\"\n        url = reverse('account-list')\n        data = {'name': 'DabApps'}\n        response = self.client.post(url, data, format='json')\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertEqual(Account.objects.count(), 1)\n        self.assertEqual(Account.objects.get().name, 'DabApps')", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# Urlpatternstestcase", "children": [{"text": "URLPatternsTestCase", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 REST \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438 `urlPatterns '\u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430.\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0442 \u00abSimpleTestSteCase\u00bb \u0414\u0436\u0430\u043d\u0433\u043e, \u0438, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u043c\u0435\u0448\u0430\u0442\u044c \u0441 \u0434\u0440\u0443\u0433\u0438\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430.", "children": [{"text": "REST framework also provides a test case class for isolating ", "block_type": "TextBlock"}, {"code": "urlpatterns", "block_type": "CodeSpanBlock"}, {"text": " on a per-class basis. Note that this inherits from Django's ", "block_type": "TextBlock"}, {"code": "SimpleTestCase", "block_type": "CodeSpanBlock"}, {"text": ", and will most likely need to be mixed with another test case class.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u041f\u0440\u0438\u043c\u0435\u0440", "children": [{"text": "Example", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"code": "from django.urls import include, path, reverse\nfrom rest_framework.test import APITestCase, URLPatternsTestCase\n\n\nclass AccountTests(APITestCase, URLPatternsTestCase):\n    urlpatterns = [\n        path('api/', include('api.urls')),\n    ]\n\n    def test_create_account(self):\n        \"\"\"\n        Ensure we can create a new account object.\n        \"\"\"\n        url = reverse('account-list')\n        response = self.client.get(url, format='json')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(len(response.data), 1)", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u043e\u0432", "children": [{"text": "Testing responses", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "## \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u0430", "children": [{"text": "Checking the response data", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u0440\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0447\u0430\u0441\u0442\u043e \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u043e\u0442\u0432\u0435\u0442, \u0430 \u043d\u0435 \u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u043e\u0442\u0432\u0435\u0442.", "children": [{"text": "When checking the validity of test responses it's often more convenient to inspect the data that the response was created with, rather than inspecting the fully rendered response.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043b\u0435\u0433\u0447\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c `recsom.data`:", "children": [{"text": "For example, it's easier to inspect ", "block_type": "TextBlock"}, {"code": "response.data", "block_type": "CodeSpanBlock"}, {"text": ":", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "response = self.client.get('/users/4/')\nself.assertEqual(response.data, {'id': 4, 'username': 'lauren'})", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0412\u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 `response.content`:", "children": [{"text": "Instead of inspecting the result of parsing ", "block_type": "TextBlock"}, {"code": "response.content", "block_type": "CodeSpanBlock"}, {"text": ":", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "response = self.client.get('/users/4/')\nself.assertEqual(json.loads(response.content), {'id': 4, 'username': 'lauren'})", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## redending \u043e\u0442\u0432\u0435\u0442\u044b", "children": [{"text": "Rendering responses", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f `apirequestfactory`, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u0435\u0449\u0435 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0446\u0438\u043a\u043b\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430-\u043e\u0442\u0432\u0435\u0442\u0430 \u0414\u0436\u0430\u043d\u0433\u043e.\n\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a `response.content`, \u0432\u0430\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043e\u0442\u0432\u0435\u0442.", "children": [{"text": "If you're testing views directly using ", "block_type": "TextBlock"}, {"code": "APIRequestFactory", "block_type": "CodeSpanBlock"}, {"text": ", the responses that are returned will not yet be rendered, as rendering of template responses is performed by Django's internal request-response cycle.  In order to access ", "block_type": "TextBlock"}, {"code": "response.content", "block_type": "CodeSpanBlock"}, {"text": ", you'll first need to render the response.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "view = UserDetail.as_view()\nrequest = factory.get('/users/4')\nresponse = view(request, pk='4')\nresponse.render()  # Cannot access `response.content` without this.\nself.assertEqual(response.content, '{\"username\": \"lauren\", \"id\": 4}')", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f", "children": [{"text": "Configuration", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "## \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e", "children": [{"text": "Setting the default format", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0424\u043e\u0440\u043c\u0430\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u043b\u0430\u0432\u0438\u0448\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 `test_request_default_format`.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c JSON \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u043c\u0435\u0441\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0444\u043e\u0440\u043c\u044b Multipart, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0432 \u0432\u0430\u0448\u0435\u043c \u0444\u0430\u0439\u043b\u0435 `futs.py`:", "children": [{"text": "The default format used to make test requests may be set using the ", "block_type": "TextBlock"}, {"code": "TEST_REQUEST_DEFAULT_FORMAT", "block_type": "CodeSpanBlock"}, {"text": " setting key.  For example, to always use JSON for test requests by default instead of standard multipart form requests, set the following in your ", "block_type": "TextBlock"}, {"code": "settings.py", "block_type": "CodeSpanBlock"}, {"text": " file:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "REST_FRAMEWORK = {\n    ...\n    'TEST_REQUEST_DEFAULT_FORMAT': 'json'\n}", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432", "children": [{"text": "Setting the available formats", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0447\u0442\u043e -\u0442\u043e \u0434\u0440\u0443\u0433\u043e\u0435, \u043a\u0440\u043e\u043c\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 Multipart \u0438\u043b\u0438 JSON, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 `test_request_renderer_classes`.", "children": [{"text": "If you need to test requests using something other than multipart or json requests, you can do so by setting the ", "block_type": "TextBlock"}, {"code": "TEST_REQUEST_RENDERER_CLASSES", "block_type": "CodeSpanBlock"}, {"text": " setting.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f `format = 'html'` \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445, \u0443 \u0432\u0430\u0441 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0447\u0442\u043e -\u0442\u043e \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0435 \u0432 \u0432\u0430\u0448\u0435\u043c \u0444\u0430\u0439\u043b\u0435` futs.py.", "children": [{"text": "For example, to add support for using ", "block_type": "TextBlock"}, {"code": "format='html'", "block_type": "CodeSpanBlock"}, {"text": " in test requests, you might have something like this in your ", "block_type": "TextBlock"}, {"code": "settings.py", "block_type": "CodeSpanBlock"}, {"text": " file.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "REST_FRAMEWORK = {\n    ...\n    'TEST_REQUEST_RENDERER_CLASSES': [\n        'rest_framework.renderers.MultiPartRenderer',\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.TemplateHTMLRenderer'\n    ]\n}", "language": null, "block_type": "CodeBlock"}]}