{"source": "/home/ilyachch/Projects/OpenSource/django-rest-framework-rusdoc/.reference/api-navigation/schemas.md", "blocks": [{"block_type": "SeparatorBlock"}, {"translated_data": "\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a:\n- \u0421\u0445\u0435\u043c\u044b", "children": [{"text": "source:\n    - schemas", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u0421\u0445\u0435\u043c\u0430", "children": [{"text": "Schema", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "> \u041c\u0430\u0448\u0438\u043d\u043e \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 [\u0441\u0445\u0435\u043c\u0430] \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0447\u0435\u0440\u0435\u0437 API, \u043a\u0430\u043a\u043e\u0432\u044b \u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u0430, \u043a\u0430\u043a \u043e\u043d\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0438 \u043a\u0430\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u043d\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442.\n>\n> & mdash;\nHeroku, [JSON Schema \u0434\u043b\u044f API \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b Heroku] (https://blog.heroku.com/archives/2014/1/8/json_schema_for_heroku_platform_api)", "children": [{"children": [{"text": "A machine-readable ", "block_type": "TextBlock"}, {"text": "[schema]", "block_type": "TextBlock"}, {"text": " describes what resources are available via the API, what their URLs are, how they are represented and what operations they support.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "NewlineBlock"}, {"children": [{"text": "&mdash; Heroku, ", "block_type": "TextBlock"}, {"children": [{"text": "JSON Schema for the Heroku Platform API", "block_type": "TextBlock"}], "url": "https://blog.heroku.com/archives/2014/1/8/json_schema_for_heroku_platform_api", "title": null, "block_type": "LinkBlock"}], "block_type": "Paragraph"}], "block_type": "BlockQuote"}, {"translated_data": "\u0421\u0445\u0435\u043c\u044b API \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u044f\u0434 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f\n\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u0442\u0430\u043b\u043e\u043d\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435\n\u043c\u043e\u0436\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441 \u0432\u0430\u0448\u0438\u043c API.", "children": [{"text": "API schemas are a useful tool that allow for a range of use cases, including\ngenerating reference documentation, or driving dynamic client libraries that\ncan interact with your API.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "Django Rest Framework \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438\n[Openapi] (https://github.com/oai/openapi-\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f) \u0421\u0445\u0435\u043c\u044b.", "children": [{"text": "Django REST Framework provides support for automatic generation of\n", "block_type": "TextBlock"}, {"children": [{"text": "OpenAPI", "block_type": "TextBlock"}], "url": "https://github.com/OAI/OpenAPI-Specification", "title": null, "block_type": "LinkBlock"}, {"text": " schemas.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u041e\u0431\u0437\u043e\u0440", "children": [{"text": "Overview", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0423 \u043f\u043e\u043a\u043e\u043b\u0435\u043d\u0438\u044f \u0441\u0445\u0435\u043c\u044b \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0438\u0436\u0443\u0449\u0438\u0445\u0441\u044f \u0447\u0430\u0441\u0442\u0435\u0439.\n\u0421\u0442\u043e\u0438\u0442 \u0438\u043c\u0435\u0442\u044c \u043e\u0431\u0437\u043e\u0440:", "children": [{"text": "Schema generation has several moving parts. It's worth having an overview:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* `Schemagenerator`-\u044d\u0442\u043e \u043a\u043b\u0430\u0441\u0441 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0445\u043e\u0434\u044c\u0431\u0443\n\u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b URL -\u0430\u0434\u0440\u0435\u0441\u0430, \u043f\u043e\u0438\u0441\u043a \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u0432 `apiview`, \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u0438\u0445\n\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0445\u0435\u043c\u044b \u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0445\u0435\u043c\u044b.\n* `Autoschema` \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0434\u0435\u0442\u0430\u043b\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0441\u0445\u0435\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430\n\u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437.\n\u041f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u00ab\u0421\u0445\u0435\u043c\u0430\u00bb.\n\u0422\u044b\n\u041f\u043e\u0434\u043a\u043b\u0430\u0441\u0441 `autoschema`, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u0432\u043e\u044e \u0441\u0445\u0435\u043c\u0443.\n* \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f GeneratesChema` \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0441\u0445\u0435\u043c\u0443\n\u043d\u0435 \u0432 \u0441\u0435\u0442\u0438.\n* \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u0438\u0442\u044c `schemaview` \u0434\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u0434\u0430\u0447\u0438\n\u0412\u0430\u0448\u0430 \u0441\u0445\u0435\u043c\u0430.\n* `sutres.default_schema_class` \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u0442\u044c` autoschema`\n\u041f\u043e\u0434\u043a\u043b\u0430\u0441\u0441, \u0447\u0442\u043e\u0431\u044b \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u043c \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.", "children": [{"children": [{"code": "SchemaGenerator", "block_type": "CodeSpanBlock"}, {"text": " is a top-level class that is responsible for walking your\nconfigured URL patterns, finding ", "block_type": "TextBlock"}, {"code": "APIView", "block_type": "CodeSpanBlock"}, {"text": " subclasses, enquiring for their\nschema representation, and compiling the final schema object.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " encapsulates all the details necessary for per-view schema\nintrospection. Is attached to each view via the ", "block_type": "TextBlock"}, {"code": "schema", "block_type": "CodeSpanBlock"}, {"text": " attribute. You\nsubclass ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " in order to customize your schema.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "generateschema", "block_type": "CodeSpanBlock"}, {"text": " management command allows you to generate a static schema\noffline.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "Alternatively, you can route ", "block_type": "TextBlock"}, {"code": "SchemaView", "block_type": "CodeSpanBlock"}, {"text": " to dynamically generate and serve\nyour schema.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "settings.DEFAULT_SCHEMA_CLASS", "block_type": "CodeSpanBlock"}, {"text": " allows you to specify an ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": "\nsubclass to serve as your project's default.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"translated_data": "\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0435.", "children": [{"text": "The following sections explain more.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c\u044b OpenAPI", "children": [{"text": "Generating an OpenAPI Schema", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "### \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438", "children": [{"text": "Install dependencies", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"code": "pip install pyyaml uritemplate", "language": null, "block_type": "CodeBlock"}, {"translated_data": "* `pyyaml` \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0445\u0435\u043c\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 OpenAPI \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 YAML.\n* `urtemplate` \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432 \u043f\u0443\u0442\u0438.", "children": [{"children": [{"code": "pyyaml", "block_type": "CodeSpanBlock"}, {"text": " is used to generate schema into YAML-based OpenAPI format.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "uritemplate", "block_type": "CodeSpanBlock"}, {"text": " is used internally to get parameters in path.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"translated_data": "### \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0445\u0435\u043c\u044b \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f `Generateschema`", "children": [{"text": "Generating a static schema with the ", "block_type": "TextBlock"}, {"code": "generateschema", "block_type": "CodeSpanBlock"}, {"text": " management command", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u0430\u0448\u0430 \u0441\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f `Generateschema`:", "children": [{"text": "If your schema is static, you can use the ", "block_type": "TextBlock"}, {"code": "generateschema", "block_type": "CodeSpanBlock"}, {"text": " management command:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "./manage.py generateschema --file openapi-schema.yml", "language": "bash", "block_type": "CodeBlock"}, {"translated_data": "\u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u0441\u0445\u0435\u043c\u0443 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0430\u043d\u043d\u043e\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0435 \u043b\u044e\u0431\u044b\u043c\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0445\u0435\u043c\u044b\n\u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440.", "children": [{"text": "Once you've generated a schema in this way you can annotate it with any\nadditional information that cannot be automatically inferred by the schema\ngenerator.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0445\u043e\u0442\u0435\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0432\u043e\u044e \u0441\u0445\u0435\u043c\u0443 API \u0432 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0435\u0435\n\u0421 \u043a\u0430\u0436\u0434\u044b\u043c \u043d\u043e\u0432\u044b\u043c \u0432\u044b\u043f\u0443\u0441\u043a\u043e\u043c \u0438\u043b\u0438 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u0441\u0445\u0435\u043c\u0443 API \u0438\u0437 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043c\u0430\u0441\u0441\u043e\u0432\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u0441\u0430\u0439\u0442\u0430.", "children": [{"text": "You might want to check your API schema into version control and update it\nwith each new release, or serve the API schema from your site's static media.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0445\u0435\u043c\u044b \u0441 `schemaview`", "children": [{"text": "Generating a dynamic schema with ", "block_type": "TextBlock"}, {"code": "SchemaView", "block_type": "CodeSpanBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u0430 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0445\u0435\u043c\u0430, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0432\u044b\u0431\u043e\u0440 \u0438\u043d\u043e\u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0445 \u043a\u043b\u044e\u0447\u0435\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u00abSchemaView\u00bb, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0442\u044c\n\u0412\u0430\u0448\u0430 \u0441\u0445\u0435\u043c\u0430 \u043f\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044e.", "children": [{"text": "If you require a dynamic schema, because foreign key choices depend on database\nvalues, for example, you can route a ", "block_type": "TextBlock"}, {"code": "SchemaView", "block_type": "CodeSpanBlock"}, {"text": " that will generate and serve\nyour schema on demand.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u043d\u0430\u043f\u0440\u0430\u0432\u0438\u0442\u044c `schemaview`, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 hale` get_schema_view () `helper.", "children": [{"text": "To route a ", "block_type": "TextBlock"}, {"code": "SchemaView", "block_type": "CodeSpanBlock"}, {"text": ", use the ", "block_type": "TextBlock"}, {"code": "get_schema_view()", "block_type": "CodeSpanBlock"}, {"text": " helper.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0412 `urls.py`:", "children": [{"text": "In ", "block_type": "TextBlock"}, {"code": "urls.py", "block_type": "CodeSpanBlock"}, {"text": ":", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.schemas import get_schema_view\n\nurlpatterns = [\n    # ...\n    # Use the `get_schema_view()` helper to add a `SchemaView` to project URLs.\n    #   * `title` and `description` parameters are passed to `SchemaGenerator`.\n    #   * Provide view name for use with `reverse()`.\n    path('openapi', get_schema_view(\n        title=\"Your Project\",\n        description=\"API for all things \u2026\",\n        version=\"1.0.0\"\n    ), name='openapi-schema'),\n    # ...\n]", "language": "python", "block_type": "CodeBlock"}, {"translated_data": "#### `get_schema_view ()`", "children": [{"code": "get_schema_view()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "`Get_schema_view ()` helper \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430:", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "get_schema_view()", "block_type": "CodeSpanBlock"}, {"text": " helper takes the following keyword arguments:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"children": [{"children": [{"code": "title", "block_type": "CodeSpanBlock"}, {"text": ": May be used to provide a descriptive title for the schema definition.", "block_type": "TextBlock"}], "block_type": "Paragraph"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"children": [{"code": "description", "block_type": "CodeSpanBlock"}, {"text": ": Longer descriptive text.", "block_type": "TextBlock"}], "block_type": "Paragraph"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"children": [{"code": "version", "block_type": "CodeSpanBlock"}, {"text": ": The version of the API.", "block_type": "TextBlock"}], "block_type": "Paragraph"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"children": [{"code": "url", "block_type": "CodeSpanBlock"}, {"text": ": May be used to pass a canonical base URL for the schema.", "block_type": "TextBlock"}], "block_type": "Paragraph"}], "nested_children": [{}], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"children": [{"code": "urlconf", "block_type": "CodeSpanBlock"}, {"text": ": A string representing the import path to the URL conf that you want\n to generate an API schema for. This defaults to the value of Django's\n ", "block_type": "TextBlock"}, {"code": "ROOT_URLCONF", "block_type": "CodeSpanBlock"}, {"text": " setting.", "block_type": "TextBlock"}], "block_type": "Paragraph"}], "nested_children": [{}], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"children": [{"code": "patterns", "block_type": "CodeSpanBlock"}, {"text": ": List of url patterns to limit the schema introspection to. If you\nonly want the ", "block_type": "TextBlock"}, {"code": "myproject.api", "block_type": "CodeSpanBlock"}, {"text": " urls to be exposed in the schema:", "block_type": "TextBlock"}], "block_type": "Paragraph"}], "nested_children": [{}], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"children": [{"code": "generator_class", "block_type": "CodeSpanBlock"}, {"text": ": May be used to specify a ", "block_type": "TextBlock"}, {"code": "SchemaGenerator", "block_type": "CodeSpanBlock"}, {"text": " subclass to be\npassed to the ", "block_type": "TextBlock"}, {"code": "SchemaView", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"children": [{"code": "authentication_classes", "block_type": "CodeSpanBlock"}, {"text": ": May be used to specify the list of authentication\nclasses that will apply to the schema endpoint. Defaults to\n", "block_type": "TextBlock"}, {"code": "settings.DEFAULT_AUTHENTICATION_CLASSES", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"children": [{"code": "permission_classes", "block_type": "CodeSpanBlock"}, {"text": ": May be used to specify the list of permission classes\nthat will apply to the schema endpoint. Defaults to\n", "block_type": "TextBlock"}, {"code": "settings.DEFAULT_PERMISSION_CLASSES", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"children": [{"code": "renderer_classes", "block_type": "CodeSpanBlock"}, {"text": ": May be used to pass the set of renderer classes that can\nbe used to render the API root endpoint.", "block_type": "TextBlock"}], "block_type": "Paragraph"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"children": [{"text": "SchemaGenerator", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"children": [{"children": [{"text": "Schema-level customization", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.schemas.openapi import SchemaGenerator", "language": "python", "block_type": "CodeBlock"}, {"children": [{"code": "SchemaGenerator", "block_type": "CodeSpanBlock"}, {"text": " is a class that walks a list of routed URL patterns, requests\nthe schema for each view and collates the resulting OpenAPI schema.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "Typically you won't need to instantiate ", "block_type": "TextBlock"}, {"code": "SchemaGenerator", "block_type": "CodeSpanBlock"}, {"text": " yourself, but you can\ndo so like so:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "generator = SchemaGenerator(title='Stock Prices API')", "language": null, "block_type": "CodeBlock"}, {"children": [{"text": "Arguments:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"children": [{"code": "title", "block_type": "CodeSpanBlock"}, {"text": " ", "block_type": "TextBlock"}, {"children": [{"text": "required", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": The name of the API.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "description", "block_type": "CodeSpanBlock"}, {"text": ": Longer descriptive text.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "version", "block_type": "CodeSpanBlock"}, {"text": ": The version of the API. Defaults to ", "block_type": "TextBlock"}, {"code": "0.1.0", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "url", "block_type": "CodeSpanBlock"}, {"text": ": The root URL of the API schema. This option is not required unless the schema is included under path prefix.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "patterns", "block_type": "CodeSpanBlock"}, {"text": ": A list of URLs to inspect when generating the schema. Defaults to the project's URL conf.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "urlconf", "block_type": "CodeSpanBlock"}, {"text": ": A URL conf module name to use when generating the schema. Defaults to ", "block_type": "TextBlock"}, {"code": "settings.ROOT_URLCONF", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"children": [{"text": "In order to customize the top-level schema, subclass\n", "block_type": "TextBlock"}, {"code": "rest_framework.schemas.openapi.SchemaGenerator", "block_type": "CodeSpanBlock"}, {"text": " and provide your subclass\nas an argument to the ", "block_type": "TextBlock"}, {"code": "generateschema", "block_type": "CodeSpanBlock"}, {"text": " command or ", "block_type": "TextBlock"}, {"code": "get_schema_view()", "block_type": "CodeSpanBlock"}, {"text": " helper\nfunction.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "get_schema(self, request=None, public=False)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"children": [{"text": "Returns a dictionary that represents the OpenAPI schema:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "generator = SchemaGenerator(title='Stock Prices API')\nschema = generator.get_schema()", "language": null, "block_type": "CodeBlock"}, {"children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "request", "block_type": "CodeSpanBlock"}, {"text": " argument is optional, and may be used if you want to apply\nper-user permissions to the resulting schema generation.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "This is a good point to override if you want to customize the generated\ndictionary For example you might wish to add terms of service to the ", "block_type": "TextBlock"}, {"children": [{"text": "top-level\n", "block_type": "TextBlock"}, {"code": "info", "block_type": "CodeSpanBlock"}, {"text": " object", "block_type": "TextBlock"}], "url": "https://swagger.io/specification/#infoObject", "title": null, "block_type": "LinkBlock"}, {"text": ":", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class TOSSchemaGenerator(SchemaGenerator):\n    def get_schema(self, *args, **kwargs):\n        schema = super().get_schema(*args, **kwargs)\n        schema[\"info\"][\"termsOfService\"] = \"https://example.com/tos.html\"\n        return schema", "language": null, "block_type": "CodeBlock"}, {"children": [{"text": "AutoSchema", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"children": [{"children": [{"text": "Per-View Customization", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.schemas.openapi import AutoSchema", "language": "python", "block_type": "CodeBlock"}, {"children": [{"text": "By default, view introspection is performed by an ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " instance\naccessible via the ", "block_type": "TextBlock"}, {"code": "schema", "block_type": "CodeSpanBlock"}, {"text": " attribute on ", "block_type": "TextBlock"}, {"code": "APIView", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "auto_schema = some_view.schema", "language": null, "block_type": "CodeBlock"}, {"children": [{"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " provides the OpenAPI elements needed for each view, request method\nand path:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"children": [{"text": "A list of ", "block_type": "TextBlock"}, {"children": [{"text": "OpenAPI components", "block_type": "TextBlock"}], "url": "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#componentsObject", "title": null, "block_type": "LinkBlock"}, {"text": ". In DRF terms these are\nmappings of serializers that describe request and response bodies.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "The appropriate ", "block_type": "TextBlock"}, {"children": [{"text": "OpenAPI operation object", "block_type": "TextBlock"}], "url": "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#operationObject", "title": null, "block_type": "LinkBlock"}, {"text": " that describes\nthe endpoint, including path and query parameters for pagination, filtering,\nand so on.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"code": "components = auto_schema.get_components(...)\noperation = auto_schema.get_operation(...)", "language": "python", "block_type": "CodeBlock"}, {"children": [{"text": "In compiling the schema, ", "block_type": "TextBlock"}, {"code": "SchemaGenerator", "block_type": "CodeSpanBlock"}, {"text": " calls ", "block_type": "TextBlock"}, {"code": "get_components()", "block_type": "CodeSpanBlock"}, {"text": " and\n", "block_type": "TextBlock"}, {"code": "get_operation()", "block_type": "CodeSpanBlock"}, {"text": " for each view, allowed method, and path.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"children": [{"children": [{"text": "Note", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": The automatic introspection of components, and many operation\nparameters relies on the relevant attributes and methods of\n", "block_type": "TextBlock"}, {"code": "GenericAPIView", "block_type": "CodeSpanBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "get_serializer()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "pagination_class", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "filter_backends", "block_type": "CodeSpanBlock"}, {"text": ",\netc. For basic ", "block_type": "TextBlock"}, {"code": "APIView", "block_type": "CodeSpanBlock"}, {"text": " subclasses, default introspection is essentially limited to\nthe URL kwarg path parameters for this reason.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"children": [{"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " encapsulates the view introspection needed for schema generation.\nBecause of this all the schema generation logic is kept in a single place,\nrather than being spread around the already extensive view, serializer and\nfield APIs.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "Keeping with this pattern, try not to let schema logic leak into your own\nviews, serializers, or fields when customizing the schema generation. You might\nbe tempted to do something like this:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class CustomSchema(AutoSchema):\n    \"\"\"\n    AutoSchema subclass using schema_extra_info on the view.\n    \"\"\"\n    ...\n\nclass CustomView(APIView):\n    schema = CustomSchema()\n    schema_extra_info = ... some extra info ...", "language": "python", "block_type": "CodeBlock"}, {"children": [{"text": "Here, the ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " subclass goes looking for ", "block_type": "TextBlock"}, {"code": "schema_extra_info", "block_type": "CodeSpanBlock"}, {"text": " on the\nview. This is ", "block_type": "TextBlock"}, {"children": [{"text": "OK", "block_type": "TextBlock"}], "block_type": "EmphasisTextBlock"}, {"text": " (it doesn't actually hurt) but it means you'll end up with\nyour schema logic spread out in a number of different places.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "Instead try to subclass ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " such that the ", "block_type": "TextBlock"}, {"code": "extra_info", "block_type": "CodeSpanBlock"}, {"text": " doesn't leak\nout into the view:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class BaseSchema(AutoSchema):\n    \"\"\"\n    AutoSchema subclass that knows how to use extra_info.\n    \"\"\"\n    ...\n\nclass CustomSchema(BaseSchema):\n    extra_info = ... some extra info ...\n\nclass CustomView(APIView):\n    schema = CustomSchema()", "language": "python", "block_type": "CodeBlock"}, {"children": [{"text": "This style is slightly more verbose but maintains the encapsulation of the\nschema related code. It's more ", "block_type": "TextBlock"}, {"children": [{"text": "cohesive", "block_type": "TextBlock"}], "block_type": "EmphasisTextBlock"}, {"text": " in the ", "block_type": "TextBlock"}, {"children": [{"text": "parlance", "block_type": "TextBlock"}], "block_type": "EmphasisTextBlock"}, {"text": ". It'll keep the\nrest of your API code more tidy.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "If an option applies to many view classes, rather than creating a specific\nsubclass per-view, you may find it more convenient to allow specifying the\noption as an ", "block_type": "TextBlock"}, {"code": "__init__()", "block_type": "CodeSpanBlock"}, {"text": " kwarg to your base ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " subclass:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class CustomSchema(BaseSchema):\n    def __init__(self, **kwargs):\n        # store extra_info for later\n        self.extra_info = kwargs.pop(\"extra_info\")\n        super().__init__(**kwargs)\n\nclass CustomView(APIView):\n    schema = CustomSchema(\n        extra_info=... some extra info ...\n    )", "language": "python", "block_type": "CodeBlock"}, {"children": [{"text": "This saves you having to create a custom subclass per-view for a commonly used option.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "Not all ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " methods expose related  ", "block_type": "TextBlock"}, {"code": "__init__()", "block_type": "CodeSpanBlock"}, {"text": " kwargs, but those for\nthe more commonly needed options do.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " methods", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"children": [{"code": "get_components()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"children": [{"text": "Generates the OpenAPI components that describe request and response bodies,\nderiving  their properties from the serializer.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "Returns a dictionary mapping the component name to the generated\nrepresentation. By default this has just a single pair but you may override\n", "block_type": "TextBlock"}, {"code": "get_components()", "block_type": "CodeSpanBlock"}, {"text": " to return multiple pairs if your view uses multiple\nserializers.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "get_component_name()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"children": [{"text": "Computes the component's name from the serializer.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "You may see warnings if your API has duplicate component names. If so you can override ", "block_type": "TextBlock"}, {"code": "get_component_name()", "block_type": "CodeSpanBlock"}, {"text": " or pass the ", "block_type": "TextBlock"}, {"code": "component_name", "block_type": "CodeSpanBlock"}, {"text": " ", "block_type": "TextBlock"}, {"code": "__init__()", "block_type": "CodeSpanBlock"}, {"text": " kwarg (see below) to provide different names.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "get_reference()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"children": [{"text": "Returns a reference to the serializer component. This may be useful if you override ", "block_type": "TextBlock"}, {"code": "get_schema()", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "map_serializer()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"children": [{"text": "Maps serializers to their OpenAPI representations.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "Most serializers should conform to the standard OpenAPI ", "block_type": "TextBlock"}, {"code": "object", "block_type": "CodeSpanBlock"}, {"text": " type, but you may\nwish to override ", "block_type": "TextBlock"}, {"code": "map_serializer()", "block_type": "CodeSpanBlock"}, {"text": " in order to customize this or other\nserializer-level fields.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "map_field()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"children": [{"text": "Maps individual serializer fields to their schema representation. The base implementation\nwill handle the default fields that Django REST Framework provides.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "For ", "block_type": "TextBlock"}, {"code": "SerializerMethodField", "block_type": "CodeSpanBlock"}, {"text": " instances, for which the schema is unknown, or custom field subclasses you should override ", "block_type": "TextBlock"}, {"code": "map_field()", "block_type": "CodeSpanBlock"}, {"text": " to generate the correct schema:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class CustomSchema(AutoSchema):\n    \"\"\"Extension of ``AutoSchema`` to add support for custom field schemas.\"\"\"\n\n    def map_field(self, field):\n        # Handle SerializerMethodFields or custom fields here...\n        # ...\n        return super().map_field(field)", "language": "python", "block_type": "CodeBlock"}, {"children": [{"text": "Authors of third-party packages should aim to provide an ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " subclass,\nand a mixin, overriding ", "block_type": "TextBlock"}, {"code": "map_field()", "block_type": "CodeSpanBlock"}, {"text": " so that users can easily generate schemas\nfor their custom fields.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "get_tags()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"children": [{"text": "OpenAPI groups operations by tags. By default tags taken from the first path\nsegment of the routed URL. For example, a URL like ", "block_type": "TextBlock"}, {"code": "/users/{id}/", "block_type": "CodeSpanBlock"}, {"text": " will generate\nthe tag ", "block_type": "TextBlock"}, {"code": "users", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "You can pass an ", "block_type": "TextBlock"}, {"code": "__init__()", "block_type": "CodeSpanBlock"}, {"text": " kwarg to manually specify tags (see below), or\noverride ", "block_type": "TextBlock"}, {"code": "get_tags()", "block_type": "CodeSpanBlock"}, {"text": " to provide custom logic.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "get_operation()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"children": [{"text": "Returns the ", "block_type": "TextBlock"}, {"children": [{"text": "OpenAPI operation object", "block_type": "TextBlock"}], "url": "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#operationObject", "title": null, "block_type": "LinkBlock"}, {"text": " that describes the\nendpoint, including path and query parameters for pagination, filtering, and so\non.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "Together with ", "block_type": "TextBlock"}, {"code": "get_components()", "block_type": "CodeSpanBlock"}, {"text": ", this is the main entry point to the view\nintrospection.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "get_operation_id()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"children": [{"text": "There must be a unique ", "block_type": "TextBlock"}, {"children": [{"text": "operationid", "block_type": "TextBlock"}], "url": "openapi-operationid", "title": null, "block_type": "LinkBlock"}, {"text": " for each operation.\nBy default the ", "block_type": "TextBlock"}, {"code": "operationId", "block_type": "CodeSpanBlock"}, {"text": " is deduced from the model name, serializer name or\nview name. The operationId looks like \"listItems\", \"retrieveItem\",\n\"updateItem\", etc. The ", "block_type": "TextBlock"}, {"code": "operationId", "block_type": "CodeSpanBlock"}, {"text": " is camelCase by convention.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "get_operation_id_base()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"children": [{"text": "If you have several views with the same model name, you may see duplicate\noperationIds.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "In order to work around this, you can override ", "block_type": "TextBlock"}, {"code": "get_operation_id_base()", "block_type": "CodeSpanBlock"}, {"text": " to\nprovide a different base for name part of the ID.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "get_serializer()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"children": [{"text": "If the view has implemented ", "block_type": "TextBlock"}, {"code": "get_serializer()", "block_type": "CodeSpanBlock"}, {"text": ", returns the result.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "get_request_serializer()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"children": [{"text": "By default returns ", "block_type": "TextBlock"}, {"code": "get_serializer()", "block_type": "CodeSpanBlock"}, {"text": " but can be overridden to\ndifferentiate between request and response objects.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "get_response_serializer()", "block_type": "CodeSpanBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"children": [{"text": "By default returns ", "block_type": "TextBlock"}, {"code": "get_serializer()", "block_type": "CodeSpanBlock"}, {"text": " but can be overridden to\ndifferentiate between request and response objects.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"code": "AutoSchema.__init__()", "block_type": "CodeSpanBlock"}, {"text": " kwargs", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"children": [{"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " provides a number of ", "block_type": "TextBlock"}, {"code": "__init__()", "block_type": "CodeSpanBlock"}, {"text": " kwargs that can be used for\ncommon customizations, if the default generated values are not appropriate.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "The available kwargs are:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"children": [{"code": "tags", "block_type": "CodeSpanBlock"}, {"text": ": Specify a list of tags.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "component_name", "block_type": "CodeSpanBlock"}, {"text": ": Specify the component name.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "operation_id_base", "block_type": "CodeSpanBlock"}, {"text": ": Specify the resource-name part of operation IDs.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"children": [{"text": "You pass the kwargs when declaring the ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " instance on your view:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class PetDetailView(generics.RetrieveUpdateDestroyAPIView):\n    schema = AutoSchema(\n        tags=['Pets'],\n        component_name='Pet',\n        operation_id_base='Pet',\n    )\n    ...", "language": null, "block_type": "CodeBlock"}, {"children": [{"text": "Assuming a ", "block_type": "TextBlock"}, {"code": "Pet", "block_type": "CodeSpanBlock"}, {"text": " model and ", "block_type": "TextBlock"}, {"code": "PetSerializer", "block_type": "CodeSpanBlock"}, {"text": " serializer, the kwargs in this\nexample are probably not needed. Often, though, you'll need to pass the kwargs\nif you have multiple view targeting the same model, or have multiple views with\nidentically named serializers.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"children": [{"text": "If your views have related customizations that are needed frequently, you can\ncreate a base ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " subclass for your project that takes additional\n", "block_type": "TextBlock"}, {"code": "__init__()", "block_type": "CodeSpanBlock"}, {"text": " kwargs to save subclassing ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " for each view.", "block_type": "TextBlock"}], "block_type": "Paragraph"}]}