{"source": "/home/ilyachch/Projects/OpenSource/django-rest-framework-rusdoc/.reference/api-navigation/renderers.md", "blocks": [{"block_type": "SeparatorBlock"}, {"translated_data": "\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a:", "children": [{"text": "source:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* renderers.py", "children": [{"children": [{"text": "renderers.py", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u0420\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u044b", "children": [{"text": "Renderers", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "> \u041f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 TemplateResponse \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d \u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u0430\u043d. \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0438 \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0431\u0430\u0439\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u043d \u043a\u043b\u0438\u0435\u043d\u0442\u0443.\n>\n> - [Django documentation](https://docs.djangoproject.com/en/stable/ref/template-response/#the-rendering-process)", "children": [{"children": [{"text": "Before a TemplateResponse instance can be returned to the client, it must be rendered. The rendering process takes the intermediate representation of template and context, and turns it into the final byte stream that can be served to the client.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "NewlineBlock"}, {"children": [{"text": "\u2014 ", "block_type": "TextBlock"}, {"children": [{"text": "Django documentation", "block_type": "TextBlock"}], "url": "https://docs.djangoproject.com/en/stable/ref/template-response/#the-rendering-process", "title": null, "block_type": "LinkBlock"}], "block_type": "Paragraph"}], "block_type": "BlockQuote"}, {"translated_data": "\u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a REST \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0440\u044f\u0434 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 Renderer, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u044b \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438 \u043c\u0435\u0434\u0438\u0430. \u0422\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u043e\u0432, \u0447\u0442\u043e \u0434\u0430\u0435\u0442 \u0432\u0430\u043c \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043c\u0435\u0434\u0438\u0430.", "children": [{"text": "REST framework includes a number of built in Renderer classes, that allow you to return responses with various media types. There is also support for defining your own custom renderers, which gives you the flexibility to design your own media types.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u041a\u0430\u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440", "children": [{"text": "How the renderer is determined", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041d\u0430\u0431\u043e\u0440 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432. \u041f\u0440\u0438 \u0432\u0445\u043e\u0434\u0435 \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a REST \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440 \u0434\u043b\u044f \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.", "children": [{"text": "The set of valid renderers for a view is always defined as a list of classes. When a view is entered REST framework will perform content negotiation on the incoming request, and determine the most appropriate renderer to satisfy the request.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 `Accept` \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u0442\u0438\u043f\u044b \u043c\u0435\u0434\u0438\u0430 \u043e\u0436\u0438\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u043e\u0442\u0432\u0435\u0442\u0435. \u041f\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u044e, \u0441\u0443\u0444\u0444\u0438\u043a\u0441\u044b \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0432 URL \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u044f\u0432\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, URL `http://example.com/api/users_count.json` \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u0441\u0435\u0433\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON.", "children": [{"text": "The basic process of content negotiation involves examining the request's ", "block_type": "TextBlock"}, {"code": "Accept", "block_type": "CodeSpanBlock"}, {"text": " header, to determine which media types it expects in the response. Optionally, format suffixes on the URL may be used to explicitly request a particular representation. For example the URL ", "block_type": "TextBlock"}, {"code": "http://example.com/api/users_count.json", "block_type": "CodeSpanBlock"}, {"text": " might be an endpoint that always returns JSON data.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e [content negotiation] (content-negotiation.md).", "children": [{"text": "For more information see the documentation on ", "block_type": "TextBlock"}, {"children": [{"text": "content negotiation", "block_type": "TextBlock"}], "url": "content-negotiation.md", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u043e\u0432", "children": [{"text": "Setting the renderers", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041d\u0430\u0431\u043e\u0440 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u0432 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 `DEFAULT_RENDERER_CLASSES`. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c `JSON` \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043c\u0435\u0434\u0438\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c API \u0441\u0430\u043c\u043e\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f.", "children": [{"text": "The default set of renderers may be set globally, using the ", "block_type": "TextBlock"}, {"code": "DEFAULT_RENDERER_CLASSES", "block_type": "CodeSpanBlock"}, {"text": " setting. For example, the following settings would use ", "block_type": "TextBlock"}, {"code": "JSON", "block_type": "CodeSpanBlock"}, {"text": " as the main media type and also include the self describing API.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ]\n}", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0434\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 `APIView`.", "children": [{"text": "You can also set the renderers used for an individual view, or viewset, using the ", "block_type": "TextBlock"}, {"code": "APIView", "block_type": "CodeSpanBlock"}, {"text": " class-based views.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from django.contrib.auth.models import User\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass UserCountView(APIView):\n    \"\"\"\n    A view that returns the count of active users in JSON.\n    \"\"\"\n    renderer_classes = [JSONRenderer]\n\n    def get(self, request, format=None):\n        user_count = User.objects.filter(active=True).count()\n        content = {'user_count': user_count}\n        return Response(content)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0418\u043b\u0438, \u0435\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 `@api_view` \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445.", "children": [{"text": "Or, if you're using the ", "block_type": "TextBlock"}, {"code": "@api_view", "block_type": "CodeSpanBlock"}, {"text": " decorator with function based views.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "@api_view(['GET'])\n@renderer_classes([JSONRenderer])\ndef user_count_view(request, format=None):\n    \"\"\"\n    A view that returns the count of active users in JSON.\n    \"\"\"\n    user_count = User.objects.filter(active=True).count()\n    content = {'user_count': user_count}\n    return Response(content)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u0423\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0438\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430", "children": [{"text": "Ordering of renderer classes", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0412\u0430\u0436\u043d\u043e \u043f\u0440\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e API \u043f\u043e\u0434\u0443\u043c\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u043a\u0430\u043a\u043e\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \u043c\u0435\u0434\u0438\u0430. \u0415\u0441\u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u043d\u0435\u0434\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a `Accept: */*` \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u0438\u043b\u0438 \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a `Accept`, \u0442\u043e REST framework \u0432\u044b\u0431\u0435\u0440\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043e\u0442\u0432\u0435\u0442\u0435.", "children": [{"text": "It's important when specifying the renderer classes for your API to think about what priority you want to assign to each media type. If a client underspecifies the representations it can accept, such as sending an ", "block_type": "TextBlock"}, {"code": "Accept: */*", "block_type": "CodeSpanBlock"}, {"text": " header, or not including an ", "block_type": "TextBlock"}, {"code": "Accept", "block_type": "CodeSpanBlock"}, {"text": " header at all, then REST framework will select the first renderer in the list to use for the response.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0432\u0430\u0448 API \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 JSON-\u043e\u0442\u0432\u0435\u0442\u044b \u0438 HTML-\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c `JSONRenderer` \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c `JSON` \u043e\u0442\u0432\u0435\u0442\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a `Accept`.", "children": [{"text": "For example if your API serves JSON responses and the HTML browsable API, you might want to make ", "block_type": "TextBlock"}, {"code": "JSONRenderer", "block_type": "CodeSpanBlock"}, {"text": " your default renderer, in order to send ", "block_type": "TextBlock"}, {"code": "JSON", "block_type": "CodeSpanBlock"}, {"text": " responses to clients that do not specify an ", "block_type": "TextBlock"}, {"code": "Accept", "block_type": "CodeSpanBlock"}, {"text": " header.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u0430\u0448 API \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u0442\u0430\u043a \u0438 \u043e\u0442\u0432\u0435\u0442\u044b API \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c `TemplateHTMLRenderer` \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0447\u0442\u043e\u0431\u044b \u0445\u043e\u0440\u043e\u0448\u043e \u0438\u0433\u0440\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0430\u0440\u044b\u043c\u0438 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 [broken accept headers](http://www.gethifi.com/blog/browser-rest-http-accept-headers).", "children": [{"text": "If your API includes views that can serve both regular webpages and API responses depending on the request, then you might consider making ", "block_type": "TextBlock"}, {"code": "TemplateHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": " your default renderer, in order to play nicely with older browsers that send ", "block_type": "TextBlock"}, {"children": [{"text": "broken accept headers", "block_type": "TextBlock"}], "url": "http://www.gethifi.com/blog/browser-rest-http-accept-headers", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# API Reference", "children": [{"text": "API Reference", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "## JSONRenderer", "children": [{"text": "JSONRenderer", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 `JSON`, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443 utf-8.", "children": [{"text": "Renders the request data into ", "block_type": "TextBlock"}, {"code": "JSON", "block_type": "CodeSpanBlock"}, {"text": ", using utf-8 encoding.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0441\u0442\u0438\u043b\u044c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u044e\u043d\u0438\u043a\u043e\u0434\u0430 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0439 \u0441\u0442\u0438\u043b\u044c \u0431\u0435\u0437 \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432:", "children": [{"text": "Note that the default style is to include unicode characters, and render the response using a compact style with no unnecessary whitespace:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "{\"unicode black star\":\"\u2605\",\"value\":999}", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043c\u0435\u0434\u0438\u0430\u0442\u0438\u043f\u0430 ``\u043e\u0442\u0441\u0442\u0443\u043f``, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 ``JSON`` \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043e\u0442\u0441\u0442\u0443\u043f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, `Accept: application/json; indent=4`.", "children": [{"text": "The client may additionally include an ", "block_type": "TextBlock"}, {"code": "'indent'", "block_type": "CodeSpanBlock"}, {"text": " media type parameter, in which case the returned ", "block_type": "TextBlock"}, {"code": "JSON", "block_type": "CodeSpanBlock"}, {"text": " will be indented. For example ", "block_type": "TextBlock"}, {"code": "Accept: application/json; indent=4", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "{\n    \"unicode black star\": \"\u2605\",\n    \"value\": 999\n}", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0421\u0442\u0438\u043b\u044c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 JSON \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043b\u044e\u0447\u0435\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a `UNICODE_JSON` \u0438 `COMPACT_JSON`.", "children": [{"text": "The default JSON encoding style can be altered using the ", "block_type": "TextBlock"}, {"code": "UNICODE_JSON", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": "COMPACT_JSON", "block_type": "CodeSpanBlock"}, {"text": " settings keys.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.media_type**: `application/json`.", "children": [{"children": [{"text": ".media_type", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "application/json", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.format**: ``json``.", "children": [{"children": [{"text": ".format", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "'json'", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.charset**: `None`.", "children": [{"children": [{"text": ".charset", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "None", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "## TemplateHTMLRenderer", "children": [{"text": "TemplateHTMLRenderer", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0420\u0435\u043d\u0434\u0435\u0440\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 HTML, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 Django. \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u043e\u0432, \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432 `Response`, \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c. \u0422\u0430\u043a\u0436\u0435, \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u043e\u0432, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 `\u0438\u043c\u044f_\u0448\u0430\u0431\u043b\u043e\u043d\u0430` \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 `Response`.", "children": [{"text": "Renders data to HTML, using Django's standard template rendering. Unlike other renderers, the data passed to the ", "block_type": "TextBlock"}, {"code": "Response", "block_type": "CodeSpanBlock"}, {"text": " does not need to be serialized. Also, unlike other renderers, you may want to include a ", "block_type": "TextBlock"}, {"code": "template_name", "block_type": "CodeSpanBlock"}, {"text": " argument when creating the ", "block_type": "TextBlock"}, {"code": "Response", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "TemplateHTMLRenderer \u0441\u043e\u0437\u0434\u0430\u0441\u0442 `RequestContext`, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f `response.data` \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0438\u043a\u0442\u0430\u043d\u0442\u0430 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430, \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442 \u0438\u043c\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.", "children": [{"text": "The TemplateHTMLRenderer will create a ", "block_type": "TextBlock"}, {"code": "RequestContext", "block_type": "CodeSpanBlock"}, {"text": ", using the ", "block_type": "TextBlock"}, {"code": "response.data", "block_type": "CodeSpanBlock"}, {"text": " as the context dict, and determine a template name to use to render the context.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "**\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:** \u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440, `Response`, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430, \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u0431\u044b\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u043c \u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u0435\u0440\u043d\u0443\u0442 \u0432 dict \u043f\u0435\u0440\u0435\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b `TemplateHTMLRenderer` \u0441\u043c\u043e\u0433 \u0435\u0433\u043e \u043e\u0442\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u044c. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"children": [{"text": "Note:", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": " When used with a view that makes use of a serializer the ", "block_type": "TextBlock"}, {"code": "Response", "block_type": "CodeSpanBlock"}, {"text": " sent for rendering may not be a dictionary and will need to be wrapped in a dict before returning to allow the ", "block_type": "TextBlock"}, {"code": "TemplateHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": " to render it. For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "response.data = {'results': response.data}", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "\u0418\u043c\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f (\u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f):", "children": [{"text": "The template name is determined by (in order of preference):", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "1. \u042f\u0432\u043d\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 `\u0438\u043c\u044f_\u0448\u0430\u0431\u043b\u043e\u043d\u0430`, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u0432 \u043e\u0442\u0432\u0435\u0442.\n2. \u042f\u0432\u043d\u044b\u0439 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `.template_name`, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430.\n3. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u0437\u043e\u0432\u0430 `view.get_template_names()`.", "children": [{"children": [{"text": "An explicit ", "block_type": "TextBlock"}, {"code": "template_name", "block_type": "CodeSpanBlock"}, {"text": " argument passed to the response.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "An explicit ", "block_type": "TextBlock"}, {"code": ".template_name", "block_type": "CodeSpanBlock"}, {"text": " attribute set on this class.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "The return result of calling ", "block_type": "TextBlock"}, {"code": "view.get_template_names()", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": true, "level": 1, "start": 1, "block_type": "ListBlock"}, {"translated_data": "\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0435\u0433\u043e `TemplateHTMLRenderer`:", "children": [{"text": "An example of a view that uses ", "block_type": "TextBlock"}, {"code": "TemplateHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": ":", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class UserDetail(generics.RetrieveAPIView):\n    \"\"\"\n    A view that returns a templated HTML representation of a given user.\n    \"\"\"\n    queryset = User.objects.all()\n    renderer_classes = [TemplateHTMLRenderer]\n\n    def get(self, request, *args, **kwargs):\n        self.object = self.get_object()\n        return Response({'user': self.object}, template_name='user_detail.html')", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c `TemplateHTMLRenderer` \u043b\u0438\u0431\u043e \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 REST, \u043b\u0438\u0431\u043e \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 HTML \u0438 API \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0441 \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438.", "children": [{"text": "You can use ", "block_type": "TextBlock"}, {"code": "TemplateHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": " either to return regular HTML pages using REST framework, or to return both HTML and API responses from a single endpoint.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0435 \u0441\u0430\u0439\u0442\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 `TemplateHTMLRenderer` \u043d\u0430\u0440\u044f\u0434\u0443 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u043e\u0432, \u0432\u0430\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f `TemplateHTMLRenderer` \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a `renderer_classes`, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0431\u044b\u043b \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u044b\u043c \u0434\u0430\u0436\u0435 \u0434\u043b\u044f \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442 \u043f\u043b\u043e\u0445\u043e \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 `ACCEPT:`.", "children": [{"text": "If you're building websites that use ", "block_type": "TextBlock"}, {"code": "TemplateHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": " along with other renderer classes, you should consider listing ", "block_type": "TextBlock"}, {"code": "TemplateHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": " as the first class in the ", "block_type": "TextBlock"}, {"code": "renderer_classes", "block_type": "CodeSpanBlock"}, {"text": " list, so that it will be prioritised first even for browsers that send poorly formed ", "block_type": "TextBlock"}, {"code": "ACCEPT:", "block_type": "CodeSpanBlock"}, {"text": " headers.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f `TemplateHTMLRenderer` \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432 [*HTML & Forms* Topic Page](../topics/html-and-forms.md).", "children": [{"text": "See the ", "block_type": "TextBlock"}, {"children": [{"children": [{"text": "HTML & Forms", "block_type": "TextBlock"}], "block_type": "EmphasisTextBlock"}, {"text": " Topic Page", "block_type": "TextBlock"}], "url": "../topics/html-and-forms.md", "title": null, "block_type": "LinkBlock"}, {"text": " for further examples of ", "block_type": "TextBlock"}, {"code": "TemplateHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": " usage.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.media_type**: `text/html`.", "children": [{"children": [{"text": ".media_type", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "text/html", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.format**: `'html``.", "children": [{"children": [{"text": ".format", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "'html'", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.charset**: `utf-8`", "children": [{"children": [{"text": ".charset", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "utf-8", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0421\u043c. \u0442\u0430\u043a\u0436\u0435: `StaticHTMLRenderer`", "children": [{"text": "See also: ", "block_type": "TextBlock"}, {"code": "StaticHTMLRenderer", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "## StaticHTMLRenderer", "children": [{"text": "StaticHTMLRenderer", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0440\u0435\u043d\u0434\u0435\u0440\u0435\u043d\u043d\u044b\u0439 HTML. \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u043e\u0432, \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432 \u043e\u0431\u044a\u0435\u043a\u0442 \u043e\u0442\u0432\u0435\u0442\u0430, \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435.", "children": [{"text": "A simple renderer that simply returns pre-rendered HTML. Unlike other renderers, the data passed to the response object should be a string representing the content to be returned.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0435\u0433\u043e `StaticHTMLRenderer`:", "children": [{"text": "An example of a view that uses ", "block_type": "TextBlock"}, {"code": "StaticHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": ":", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "@api_view(['GET'])\n@renderer_classes([StaticHTMLRenderer])\ndef simple_html_view(request):\n    data = '<html><body><h1>Hello, world</h1></body></html>'\n    return Response(data)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c `StaticHTMLRenderer` \u043b\u0438\u0431\u043e \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 REST, \u043b\u0438\u0431\u043e \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 HTML- \u0438 API-\u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0441 \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438.", "children": [{"text": "You can use ", "block_type": "TextBlock"}, {"code": "StaticHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": " either to return regular HTML pages using REST framework, or to return both HTML and API responses from a single endpoint.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.media_type**: `text/html`.", "children": [{"children": [{"text": ".media_type", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "text/html", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.format**: `'html``.", "children": [{"children": [{"text": ".format", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "'html'", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.charset**: `utf-8`", "children": [{"children": [{"text": ".charset", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "utf-8", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0421\u043c. \u0442\u0430\u043a\u0436\u0435: `TemplateHTMLRenderer`.", "children": [{"text": "See also: ", "block_type": "TextBlock"}, {"code": "TemplateHTMLRenderer", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "## BrowsableAPIRenderer", "children": [{"text": "BrowsableAPIRenderer", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0420\u0435\u043d\u0434\u0435\u0440\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 HTML \u0434\u043b\u044f Browsable API:", "children": [{"text": "Renders data into HTML for the Browsable API:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "![The BrowsableAPIRenderer](../img/quickstart.png)", "children": [{"url": "../img/quickstart.png", "alt": "The BrowsableAPIRenderer", "title": null, "block_type": "ImageBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u042d\u0442\u043e\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440 \u0438\u043c\u0435\u043b \u0431\u044b \u043d\u0430\u0438\u0432\u044b\u0441\u0448\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442, \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0435\u0433\u043e \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u0432 \u0441\u0442\u0438\u043b\u0435 API \u043d\u0430 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435.", "children": [{"text": "This renderer will determine which other renderer would have been given highest priority, and use that to display an API style response within the HTML page.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.media_type**: `text/html`.", "children": [{"children": [{"text": ".media_type", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "text/html", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.format**: `'api``.", "children": [{"children": [{"text": ".format", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "'api'", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.charset**: `utf-8`", "children": [{"children": [{"text": ".charset", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "utf-8", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.template**: `'rest_framework/api.html'`.", "children": [{"children": [{"text": ".template", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "'rest_framework/api.html'", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "#### \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 BrowsableAPIRenderer", "children": [{"text": "Customizing BrowsableAPIRenderer", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u043e\u043c \u0441 \u043d\u0430\u0438\u0432\u044b\u0441\u0448\u0438\u043c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u043c, \u043a\u0440\u043e\u043c\u0435 `BrowsableAPIRenderer`. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u044d\u0442\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c HTML \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c JSON \u0432 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u043e\u043c API, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0432 \u043c\u0435\u0442\u043e\u0434 `get_default_renderer()`. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "By default the response content will be rendered with the highest priority renderer apart from ", "block_type": "TextBlock"}, {"code": "BrowsableAPIRenderer", "block_type": "CodeSpanBlock"}, {"text": ". If you need to customize this behavior, for example to use HTML as the default return format, but use JSON in the browsable API, you can do so by overriding the ", "block_type": "TextBlock"}, {"code": "get_default_renderer()", "block_type": "CodeSpanBlock"}, {"text": " method. For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class CustomBrowsableAPIRenderer(BrowsableAPIRenderer):\n    def get_default_renderer(self, view):\n        return JSONRenderer()", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## AdminRenderer", "children": [{"text": "AdminRenderer", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0420\u0435\u043d\u0434\u0435\u0440\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 HTML \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0438\u043b\u0435 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430:", "children": [{"text": "Renders data into HTML for an admin-like display:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "![\u0412\u0438\u0434 AdminRender](../img/admin.png)", "children": [{"url": "../img/admin.png", "alt": "The AdminRender view", "title": null, "block_type": "ImageBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u042d\u0442\u043e\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0432 \u0441\u0442\u0438\u043b\u0435 CRUD, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u043c\u0438.", "children": [{"text": "This renderer is suitable for CRUD-style web APIs that should also present a user-friendly interface for managing the data.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0438\u043b\u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u0432\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u0432\u0432\u043e\u0434\u0430, \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u0445\u043e\u0440\u043e\u0448\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 `AdminRenderer`, \u0442\u0430\u043a \u043a\u0430\u043a HTML-\u0444\u043e\u0440\u043c\u044b \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0434\u043e\u043b\u0436\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0438\u0445.", "children": [{"text": "Note that views that have nested or list serializers for their input won't work well with the ", "block_type": "TextBlock"}, {"code": "AdminRenderer", "block_type": "CodeSpanBlock"}, {"text": ", as the HTML forms are unable to properly support them.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "**\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435**: `AdminRenderer` \u0441\u043f\u043e\u0441\u043e\u0431\u0435\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `URL_FIELD_NAME` (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `url`). \u0414\u043b\u044f `HyperlinkedModelSerializer` \u0442\u0430\u043a \u0438 \u0431\u0443\u0434\u0435\u0442, \u043d\u043e \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 `ModelSerializer` \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e `Serializer` \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043f\u043e\u043b\u0435 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u044f\u0432\u043d\u043e. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0437\u0434\u0435\u0441\u044c \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 `get_absolute_url`:", "children": [{"children": [{"text": "Note", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": The ", "block_type": "TextBlock"}, {"code": "AdminRenderer", "block_type": "CodeSpanBlock"}, {"text": " is only able to include links to detail pages when a properly configured ", "block_type": "TextBlock"}, {"code": "URL_FIELD_NAME", "block_type": "CodeSpanBlock"}, {"text": " (", "block_type": "TextBlock"}, {"code": "url", "block_type": "CodeSpanBlock"}, {"text": " by default) attribute is present in the data. For ", "block_type": "TextBlock"}, {"code": "HyperlinkedModelSerializer", "block_type": "CodeSpanBlock"}, {"text": " this will be the case, but for ", "block_type": "TextBlock"}, {"code": "ModelSerializer", "block_type": "CodeSpanBlock"}, {"text": " or plain ", "block_type": "TextBlock"}, {"code": "Serializer", "block_type": "CodeSpanBlock"}, {"text": " classes you'll need to make sure to include the field explicitly. For example here we use models ", "block_type": "TextBlock"}, {"code": "get_absolute_url", "block_type": "CodeSpanBlock"}, {"text": " method:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class AccountSerializer(serializers.ModelSerializer):\n    url = serializers.CharField(source='get_absolute_url', read_only=True)\n\n    class Meta:\n        model = Account", "language": null, "block_type": "CodeBlock"}, {"translated_data": "**.media_type**: `text/html`.", "children": [{"children": [{"text": ".media_type", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "text/html", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.format**: `'admin``.", "children": [{"children": [{"text": ".format", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "'admin'", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.charset**: `utf-8`", "children": [{"children": [{"text": ".charset", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "utf-8", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.template**: `'rest_framework/admin.html'`.", "children": [{"children": [{"text": ".template", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "'rest_framework/admin.html'", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "## HTMLFormRenderer", "children": [{"text": "HTMLFormRenderer", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u043c, \u0432 \u0444\u043e\u0440\u043c\u0443 HTML. \u0412\u044b\u0432\u043e\u0434 \u044d\u0442\u043e\u0433\u043e \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u0430 \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0435 \u0442\u0435\u0433\u0438 `<form>`, \u0441\u043a\u0440\u044b\u0442\u044b\u0439 CSRF-\u0432\u0445\u043e\u0434 \u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0435-\u043b\u0438\u0431\u043e \u043a\u043d\u043e\u043f\u043a\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438.", "children": [{"text": "Renders data returned by a serializer into an HTML form. The output of this renderer does not include the enclosing ", "block_type": "TextBlock"}, {"code": "<form>", "block_type": "CodeSpanBlock"}, {"text": " tags, a hidden CSRF input or any submit buttons.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u042d\u0442\u043e\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440 \u043d\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u0445 \u043f\u0443\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0432 \u0442\u0435\u0433 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 `render_form`.", "children": [{"text": "This renderer is not intended to be used directly, but can instead be used in templates by passing a serializer instance to the ", "block_type": "TextBlock"}, {"code": "render_form", "block_type": "CodeSpanBlock"}, {"text": " template tag.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "{% load rest_framework %}\n\n<form action=\"/submit-report/\" method=\"post\">\n    {% csrf_token %}\n    {% render_form serializer %}\n    <input type=\"submit\" value=\"Save\" />\n</form>", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e [HTML & Forms](../topics/html-and-forms.md).", "children": [{"text": "For more information see the ", "block_type": "TextBlock"}, {"children": [{"text": "HTML & Forms", "block_type": "TextBlock"}], "url": "../topics/html-and-forms.md", "title": null, "block_type": "LinkBlock"}, {"text": " documentation.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.media_type**: `text/html`.", "children": [{"children": [{"text": ".media_type", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "text/html", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.format**: ``\u0444\u043e\u0440\u043c\u0430\u0442``.", "children": [{"children": [{"text": ".format", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "'form'", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.charset**: `utf-8`", "children": [{"children": [{"text": ".charset", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "utf-8", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.template**: `'rest_framework/horizontal/form.html'`.", "children": [{"children": [{"text": ".template", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "'rest_framework/horizontal/form.html'", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "## MultiPartRenderer", "children": [{"text": "MultiPartRenderer", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u042d\u0442\u043e\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043d\u043e\u0433\u043e\u0447\u0430\u0441\u0442\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u044b HTML. **\u041e\u043d \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u043e\u0442\u0432\u0435\u0442\u043e\u0432**, \u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f [\u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u0438 \u0444\u0430\u0431\u0440\u0438\u043a\u0443 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432] (testing.md) \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 REST.", "children": [{"text": "This renderer is used for rendering HTML multipart form data. ", "block_type": "TextBlock"}, {"children": [{"text": "It is not suitable as a response renderer", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ", but is instead used for creating test requests, using REST framework's ", "block_type": "TextBlock"}, {"children": [{"text": "test client and test request factory", "block_type": "TextBlock"}], "url": "testing.md", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.media_type**: `multipart/form-data; border=BoUnDaRyStRiNg`.", "children": [{"children": [{"text": ".media_type", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "multipart/form-data; boundary=BoUnDaRyStRiNg", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.format**: ``\u043c\u043d\u043e\u0433\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439``.", "children": [{"children": [{"text": ".format", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "'multipart'", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "**.charset**: `utf-8`", "children": [{"children": [{"text": ".charset", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": ", "block_type": "TextBlock"}, {"code": "utf-8", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u044b", "children": [{"text": "Custom renderers", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "\u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c `BaseRenderer`, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 `.media_type` \u0438 `.format` \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 `.render(self, data, accepted_media_type=None, renderer_context=None)`.", "children": [{"text": "To implement a custom renderer, you should override ", "block_type": "TextBlock"}, {"code": "BaseRenderer", "block_type": "CodeSpanBlock"}, {"text": ", set the ", "block_type": "TextBlock"}, {"code": ".media_type", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": ".format", "block_type": "CodeSpanBlock"}, {"text": " properties, and implement the ", "block_type": "TextBlock"}, {"code": ".render(self, data, accepted_media_type=None, renderer_context=None)", "block_type": "CodeSpanBlock"}, {"text": " method.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041c\u0435\u0442\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0431\u0430\u0439\u0442\u0441\u0442\u0440\u0438\u043d\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0435\u043b\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 HTTP.", "children": [{"text": "The method should return a bytestring, which will be used as the body of the HTTP response.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u0443 `.render()`, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435:", "children": [{"text": "The arguments passed to the ", "block_type": "TextBlock"}, {"code": ".render()", "block_type": "CodeSpanBlock"}, {"text": " method are:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### `data`", "children": [{"code": "data", "block_type": "CodeSpanBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0435\u0439 `Response()`.", "children": [{"text": "The request data, as set by the ", "block_type": "TextBlock"}, {"code": "Response()", "block_type": "CodeSpanBlock"}, {"text": " instantiation.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### `accepted_media_type=None`", "children": [{"code": "accepted_media_type=None", "block_type": "CodeSpanBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0442\u043e \u044d\u0442\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0439 \u0442\u0438\u043f \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044f, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e.", "children": [{"text": "Optional. If provided, this is the accepted media type, as determined by the content negotiation stage.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 `Accept:` \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c, \u0447\u0435\u043c \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `media_type` \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u0430, \u0438 \u043c\u043e\u0436\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0442\u0438\u043f\u0430 \u043c\u0435\u0434\u0438\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, `\"application/json; nested=true\"`.", "children": [{"text": "Depending on the client's ", "block_type": "TextBlock"}, {"code": "Accept:", "block_type": "CodeSpanBlock"}, {"text": " header, this may be more specific than the renderer's ", "block_type": "TextBlock"}, {"code": "media_type", "block_type": "CodeSpanBlock"}, {"text": " attribute, and may include media type parameters. For example ", "block_type": "TextBlock"}, {"code": "\"application/json; nested=true\"", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### `renderer_context=None`", "children": [{"code": "renderer_context=None", "block_type": "CodeSpanBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f, \u0442\u043e \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0439 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c.", "children": [{"text": "Optional. If provided, this is a dictionary of contextual information provided by the view.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0441\u044e\u0434\u0430 \u0432\u0445\u043e\u0434\u044f\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043a\u043b\u044e\u0447\u0438: `view`, `request`, `response`, `args`, `kwargs`.", "children": [{"text": "By default this will include the following keys: ", "block_type": "TextBlock"}, {"code": "view", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "request", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "response", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "args", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "kwargs", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u041f\u0440\u0438\u043c\u0435\u0440", "children": [{"text": "Example", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0435\u0440\u043d\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c `data` \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430.", "children": [{"text": "The following is an example plaintext renderer that will return a response with the ", "block_type": "TextBlock"}, {"code": "data", "block_type": "CodeSpanBlock"}, {"text": " parameter as the content of the response.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from django.utils.encoding import smart_text\nfrom rest_framework import renderers\n\n\nclass PlainTextRenderer(renderers.BaseRenderer):\n    media_type = 'text/plain'\n    format = 'txt'\n\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        return smart_text(data, encoding=self.charset)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432", "children": [{"text": "Setting the character set", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043a\u043b\u0430\u0441\u0441\u044b \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443 `UTF-8`. \u0427\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0443\u044e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `charset` \u0434\u043b\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u0430.", "children": [{"text": "By default renderer classes are assumed to be using the ", "block_type": "TextBlock"}, {"code": "UTF-8", "block_type": "CodeSpanBlock"}, {"text": " encoding. To use a different encoding, set the ", "block_type": "TextBlock"}, {"code": "charset", "block_type": "CodeSpanBlock"}, {"text": " attribute on the renderer.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class PlainTextRenderer(renderers.BaseRenderer):\n    media_type = 'text/plain'\n    format = 'txt'\n    charset = 'iso-8859-1'\n\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        return data.encode(self.charset)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u043a\u043b\u0430\u0441\u0441 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 unicode, \u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043e \u0432 \u0431\u0430\u0439\u0442\u0441\u0442\u0440\u0438\u043d\u0433 \u043a\u043b\u0430\u0441\u0441\u043e\u043c `Response`, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `charset`, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043d\u0430 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u0435, \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438.", "children": [{"text": "Note that if a renderer class returns a unicode string, then the response content will be coerced into a bytestring by the ", "block_type": "TextBlock"}, {"code": "Response", "block_type": "CodeSpanBlock"}, {"text": " class, with the ", "block_type": "TextBlock"}, {"code": "charset", "block_type": "CodeSpanBlock"}, {"text": " attribute set on the renderer used to determine the encoding.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0431\u0430\u0439\u0442\u0441\u0442\u0440\u0438\u043d\u0433, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0435 \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435, \u0432\u0430\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 charset \u0440\u0430\u0432\u043d\u043e\u0435 `None`, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 `Content-Type` \u043e\u0442\u0432\u0435\u0442\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f `charset`.", "children": [{"text": "If the renderer returns a bytestring representing raw binary content, you should set a charset value of ", "block_type": "TextBlock"}, {"code": "None", "block_type": "CodeSpanBlock"}, {"text": ", which will ensure the ", "block_type": "TextBlock"}, {"code": "Content-Type", "block_type": "CodeSpanBlock"}, {"text": " header of the response will not have a ", "block_type": "TextBlock"}, {"code": "charset", "block_type": "CodeSpanBlock"}, {"text": " value set.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0432\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `render_style` \u043d\u0430 `'binary'`. \u042d\u0442\u043e \u0442\u0430\u043a\u0436\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 API \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.", "children": [{"text": "In some cases you may also want to set the ", "block_type": "TextBlock"}, {"code": "render_style", "block_type": "CodeSpanBlock"}, {"text": " attribute to ", "block_type": "TextBlock"}, {"code": "'binary'", "block_type": "CodeSpanBlock"}, {"text": ". Doing so will also ensure that the browsable API will not attempt to display the binary content as a string.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class JPEGRenderer(renderers.BaseRenderer):\n    media_type = 'image/jpeg'\n    format = 'jpg'\n    charset = None\n    render_style = 'binary'\n\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        return data", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430", "children": [{"text": "Advanced renderer usage", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0433\u0438\u0431\u043a\u0438\u0435 \u0432\u0435\u0449\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u044b \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 REST. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b...", "children": [{"text": "You can do some pretty flexible things using REST framework's renderers. Some examples...", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0441\u043a\u0438\u0445 \u0438\u043b\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u0438 \u0442\u043e\u0439 \u0436\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044f.\n* \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b HTML, \u0442\u0430\u043a \u0438 \u043e\u0442\u0432\u0435\u0442\u044b API \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 JSON \u0441 \u043e\u0434\u043d\u043e\u0439 \u0438 \u0442\u043e\u0439 \u0436\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438.\n* \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0438\u043f\u043e\u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f HTML \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 API.\n* \u041d\u0435\u0434\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043c\u0435\u0434\u0438\u0430\u0442\u0438\u043f \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f `media_type = 'image/*'`, \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a `Accept` \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430.", "children": [{"children": [{"text": "Provide either flat or nested representations from the same endpoint, depending on the requested media type.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "Serve both regular HTML webpages, and JSON based API responses from the same endpoints.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "Specify multiple types of HTML representation for API clients to use.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "Underspecify a renderer's media type, such as using ", "block_type": "TextBlock"}, {"code": "media_type = 'image/*'", "block_type": "CodeSpanBlock"}, {"text": ", and use the ", "block_type": "TextBlock"}, {"code": "Accept", "block_type": "CodeSpanBlock"}, {"text": " header to vary the encoding of the response.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"translated_data": "## \u0420\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0438\u043f\u0430 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044f", "children": [{"text": "Varying behavior by media type", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0445\u043e\u0442\u0435\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0442\u0438\u043b\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u0440\u0438\u043d\u044f\u0442\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044f. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043a `request.accepted_renderer`, \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430.", "children": [{"text": "In some cases you might want your view to use different serialization styles depending on the accepted media type. If you need to do this you can access ", "block_type": "TextBlock"}, {"code": "request.accepted_renderer", "block_type": "CodeSpanBlock"}, {"text": " to determine the negotiated renderer that will be used for the response.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "@api_view(['GET'])\n@renderer_classes([TemplateHTMLRenderer, JSONRenderer])\ndef list_users(request):\n    \"\"\"\n    A view that can return JSON or HTML representations\n    of the users in the system.\n    \"\"\"\n    queryset = Users.objects.filter(active=True)\n\n    if request.accepted_renderer.format == 'html':\n        # TemplateHTMLRenderer takes a context dict,\n        # and additionally requires a 'template_name'.\n        # It does not require serialization.\n        data = {'users': queryset}\n        return Response(data, template_name='list_users.html')\n\n    # JSONRenderer requires serialized data as normal.\n    serializer = UserSerializer(instance=queryset)\n    data = serializer.data\n    return Response(data)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u041d\u0435\u0434\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044f.", "children": [{"text": "Underspecifying the media type", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0445\u043e\u0442\u0435\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u043c\u0435\u0434\u0438\u0430. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u0438\u043f\u044b \u043c\u0435\u0434\u0438\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0440\u0435\u0430\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 `media_type`, \u0442\u0430\u043a\u043e\u0435 \u043a\u0430\u043a `image/*`, \u0438\u043b\u0438 `*/*`.", "children": [{"text": "In some cases you might want a renderer to serve a range of media types. In this case you can underspecify the media types it should respond to, by using a ", "block_type": "TextBlock"}, {"code": "media_type", "block_type": "CodeSpanBlock"}, {"text": " value such as ", "block_type": "TextBlock"}, {"code": "image/*", "block_type": "CodeSpanBlock"}, {"text": ", or ", "block_type": "TextBlock"}, {"code": "*/*", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435\u0434\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438 \u043c\u0435\u0434\u0438\u0430\u0442\u0438\u043f \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u0430, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0443\u043a\u0430\u0437\u0430\u043b\u0438 \u043c\u0435\u0434\u0438\u0430\u0442\u0438\u043f \u044f\u0432\u043d\u043e, \u043a\u043e\u0433\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0435 \u043e\u0442\u0432\u0435\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `content_type`. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "If you underspecify the renderer's media type, you should make sure to specify the media type explicitly when you return the response, using the ", "block_type": "TextBlock"}, {"code": "content_type", "block_type": "CodeSpanBlock"}, {"text": " attribute. For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "return Response(data, content_type='image/png')", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u041f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0435\u0439", "children": [{"text": "Designing your media types", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0414\u043b\u044f \u0446\u0435\u043b\u0435\u0439 \u043c\u043d\u043e\u0433\u0438\u0445 Web API \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 `JSON` \u0441 \u0433\u0438\u043f\u0435\u0440\u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 \u043d\u0430 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u043d\u0435\u0434\u0440\u0438\u0442\u044c RESTful \u0434\u0438\u0437\u0430\u0439\u043d \u0438 [HATEOAS](http://timelessrepo.com/haters-gonna-hateoas), \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0434\u0443\u043c\u0430\u0442\u044c \u0434\u0438\u0437\u0430\u0439\u043d \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u043c\u0435\u0434\u0438\u0430.", "children": [{"text": "For the purposes of many Web APIs, simple ", "block_type": "TextBlock"}, {"code": "JSON", "block_type": "CodeSpanBlock"}, {"text": " responses with hyperlinked relations may be sufficient. If you want to fully embrace RESTful design and ", "block_type": "TextBlock"}, {"children": [{"text": "HATEOAS", "block_type": "TextBlock"}], "url": "http://timelessrepo.com/haters-gonna-hateoas", "title": null, "block_type": "LinkBlock"}, {"text": " you'll need to consider the design and usage of your media types in more detail.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041f\u043e \u0441\u043b\u043e\u0432\u0430\u043c [\u0420\u043e\u044f \u0424\u0438\u043b\u0434\u0438\u043d\u0433\u0430] (https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven), \"REST API \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u0442\u044c \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u0441\u0432\u043e\u0438 \u0443\u0441\u0438\u043b\u0438\u044f \u043f\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430(\u043e\u0432) \u043c\u0435\u0434\u0438\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0438\u043b\u0438 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0445 \u0438\u043c\u0435\u043d \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0439 \u0438/\u0438\u043b\u0438 \u0433\u0438\u043f\u0435\u0440\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u0434\u043b\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043c\u0435\u0434\u0438\u0430\".", "children": [{"text": "In ", "block_type": "TextBlock"}, {"children": [{"text": "the words of Roy Fielding", "block_type": "TextBlock"}], "url": "https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven", "title": null, "block_type": "LinkBlock"}, {"text": ", \"A REST API should spend almost all of its descriptive effort in defining the media type(s) used for representing resources and driving application state, or in defining extended relation names and/or hypertext-enabled mark-up for existing standard media types.\".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0425\u043e\u0440\u043e\u0448\u0438\u043c\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0442\u0438\u043f\u043e\u0432 \u043c\u0435\u0434\u0438\u0430 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 GitHub \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043c\u0435\u0434\u0438\u0430 [application/vnd.github+json](https://developer.github.com/v3/media/) \u0438 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u043d\u0430\u044f IANA \u0433\u0438\u043f\u0435\u0440\u043c\u0435\u0434\u0438\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 JSON [application/vnd.collection+json](http://www.amundsen.com/media-types/collection/) \u041c\u0430\u0439\u043a\u0430 \u0410\u043c\u0443\u043d\u0434\u0441\u0435\u043d\u0430.", "children": [{"text": "For good examples of custom media types, see GitHub's use of a custom ", "block_type": "TextBlock"}, {"children": [{"text": "application/vnd.github+json", "block_type": "TextBlock"}], "url": "https://developer.github.com/v3/media/", "title": null, "block_type": "LinkBlock"}, {"text": " media type, and Mike Amundsen's IANA approved ", "block_type": "TextBlock"}, {"children": [{"text": "application/vnd.collection+json", "block_type": "TextBlock"}], "url": "http://www.amundsen.com/media-types/collection/", "title": null, "block_type": "LinkBlock"}, {"text": " JSON-based hypermedia.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## HTML \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a", "children": [{"text": "HTML error views", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041e\u0431\u044b\u0447\u043d\u043e \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440 \u0432\u0435\u0434\u0435\u0442 \u0441\u0435\u0431\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0442\u043e\u0433\u043e, \u0438\u043c\u0435\u0435\u0442 \u043b\u0438 \u043e\u043d \u0434\u0435\u043b\u043e \u0441 \u043e\u0431\u044b\u0447\u043d\u044b\u043c \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u0438\u043b\u0438 \u0441 \u043e\u0442\u0432\u0435\u0442\u043e\u043c, \u0432\u044b\u0437\u0432\u0430\u043d\u043d\u044b\u043c \u0432\u043e\u0437\u043d\u0438\u043a\u0448\u0438\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c `Http404` \u0438\u043b\u0438 `PermissionDenied`, \u0438\u043b\u0438 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u043c `APIException`.", "children": [{"text": "Typically a renderer will behave the same regardless of if it's dealing with a regular response, or with a response caused by an exception being raised, such as an ", "block_type": "TextBlock"}, {"code": "Http404", "block_type": "CodeSpanBlock"}, {"text": " or ", "block_type": "TextBlock"}, {"code": "PermissionDenied", "block_type": "CodeSpanBlock"}, {"text": " exception, or a subclass of ", "block_type": "TextBlock"}, {"code": "APIException", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 `TemplateHTMLRenderer` \u0438\u043b\u0438 `StaticHTMLRenderer` \u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u0435\u0440\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u043e\u0442\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c [Django's default handling of error views](https://docs.djangoproject.com/en/stable/topics/http/views/#customizing-error-views).", "children": [{"text": "If you're using either the ", "block_type": "TextBlock"}, {"code": "TemplateHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": " or the ", "block_type": "TextBlock"}, {"code": "StaticHTMLRenderer", "block_type": "CodeSpanBlock"}, {"text": " and an exception is raised, the behavior is slightly different, and mirrors ", "block_type": "TextBlock"}, {"children": [{"text": "Django's default handling of error views", "block_type": "TextBlock"}], "url": "https://docs.djangoproject.com/en/stable/topics/http/views/#customizing-error-views", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0438\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 HTML, \u0431\u0443\u0434\u0443\u0442 \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0441\u0442\u0430\u0440\u0448\u0438\u043d\u0441\u0442\u0432\u0430.", "children": [{"text": "Exceptions raised and handled by an HTML renderer will attempt to render using one of the following methods, by order of precedence.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u0435 \u0448\u0430\u0431\u043b\u043e\u043d \u0441 \u0438\u043c\u0435\u043d\u0435\u043c `{status_code}.html`.\n* \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u0435 \u0448\u0430\u0431\u043b\u043e\u043d \u0441 \u0438\u043c\u0435\u043d\u0435\u043c `api_exception.html`.\n* \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u0434 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 HTTP \u0438 \u0442\u0435\u043a\u0441\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"404 Not Found\".", "children": [{"children": [{"text": "Load and render a template named ", "block_type": "TextBlock"}, {"code": "{status_code}.html", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "Load and render a template named ", "block_type": "TextBlock"}, {"code": "api_exception.html", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "Render the HTTP status code and text, for example \"404 Not Found\".", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"translated_data": "\u0428\u0430\u0431\u043b\u043e\u043d\u044b \u0431\u0443\u0434\u0443\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0441 `RequestContext`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043b\u044e\u0447\u0438 `status_code` \u0438 `details`.", "children": [{"text": "Templates will render with a ", "block_type": "TextBlock"}, {"code": "RequestContext", "block_type": "CodeSpanBlock"}, {"text": " which includes the ", "block_type": "TextBlock"}, {"code": "status_code", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": "details", "block_type": "CodeSpanBlock"}, {"text": " keys.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "**\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435**: \u0415\u0441\u043b\u0438 `DEBUG=True`, \u0442\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 HTTP \u0438 \u0442\u0435\u043a\u0441\u0442\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043a\u0438 \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0438 Django.", "children": [{"children": [{"text": "Note", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": If ", "block_type": "TextBlock"}, {"code": "DEBUG=True", "block_type": "CodeSpanBlock"}, {"text": ", Django's standard traceback error page will be displayed instead of rendering the HTTP status code and text.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u041f\u0430\u043a\u0435\u0442\u044b \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "children": [{"text": "Third party packages", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "\u0422\u0430\u043a\u0436\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u044b \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439.", "children": [{"text": "The following third party packages are also available.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## YAML", "children": [{"text": "YAML", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "[REST framework YAML](https://jpadilla.github.io/django-rest-framework-yaml/) \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0438 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 [YAML](http://www.yaml.org/). \u0420\u0430\u043d\u0435\u0435 \u043e\u043d \u0431\u044b\u043b \u0432\u043a\u043b\u044e\u0447\u0435\u043d \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 \u043f\u0430\u043a\u0435\u0442 REST framework, \u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043f\u0430\u043a\u0435\u0442.", "children": [{"children": [{"text": "REST framework YAML", "block_type": "TextBlock"}], "url": "https://jpadilla.github.io/django-rest-framework-yaml/", "title": null, "block_type": "LinkBlock"}, {"text": " provides ", "block_type": "TextBlock"}, {"children": [{"text": "YAML", "block_type": "TextBlock"}], "url": "http://www.yaml.org/", "title": null, "block_type": "LinkBlock"}, {"text": " parsing and rendering support. It was previously included directly in the REST framework package, and is now instead supported as a third-party package.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "#### \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430", "children": [{"text": "Installation & configuration", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e pip.", "children": [{"text": "Install using pip.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "$ pip install djangorestframework-yaml", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 REST.", "children": [{"text": "Modify your REST framework settings.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "REST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework_yaml.parsers.YAMLParser',\n    ],\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework_yaml.renderers.YAMLRenderer',\n    ],\n}", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## XML", "children": [{"text": "XML", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "[REST Framework XML](https://jpadilla.github.io/django-rest-framework-xml/) \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043d\u0435\u0444\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 XML. \u0420\u0430\u043d\u0435\u0435 \u043e\u043d \u0431\u044b\u043b \u0432\u043a\u043b\u044e\u0447\u0435\u043d \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 \u043f\u0430\u043a\u0435\u0442 REST Framework, \u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043f\u0430\u043a\u0435\u0442.", "children": [{"children": [{"text": "REST Framework XML", "block_type": "TextBlock"}], "url": "https://jpadilla.github.io/django-rest-framework-xml/", "title": null, "block_type": "LinkBlock"}, {"text": " provides a simple informal XML format. It was previously included directly in the REST framework package, and is now instead supported as a third-party package.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "#### \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430", "children": [{"text": "Installation & configuration", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e pip.", "children": [{"text": "Install using pip.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "$ pip install djangorestframework-xml", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 REST.", "children": [{"text": "Modify your REST framework settings.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "REST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework_xml.parsers.XMLParser',\n    ],\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework_xml.renderers.XMLRenderer',\n    ],\n}", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## JSONP", "children": [{"text": "JSONP", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "[REST framework JSONP](https://jpadilla.github.io/django-rest-framework-jsonp/) \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 JSONP. \u0420\u0430\u043d\u0435\u0435 \u043e\u043d \u0431\u044b\u043b \u0432\u043a\u043b\u044e\u0447\u0435\u043d \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 \u043f\u0430\u043a\u0435\u0442 REST framework, \u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043f\u0430\u043a\u0435\u0442.", "children": [{"children": [{"text": "REST framework JSONP", "block_type": "TextBlock"}], "url": "https://jpadilla.github.io/django-rest-framework-jsonp/", "title": null, "block_type": "LinkBlock"}, {"text": " provides JSONP rendering support. It was previously included directly in the REST framework package, and is now instead supported as a third-party package.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "**\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435**: \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0435 AJAX-\u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0432\u0430\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 [CORS](https://www.w3.org/TR/cors/) \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b `JSONP`. \u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 [CORS](https://www.django-rest-framework.org/topics/ajax-csrf-cors/).", "children": [{"children": [{"text": "Warning", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": If you require cross-domain AJAX requests, you should generally be using the more modern approach of ", "block_type": "TextBlock"}, {"children": [{"text": "CORS", "block_type": "TextBlock"}], "url": "https://www.w3.org/TR/cors/", "title": null, "block_type": "LinkBlock"}, {"text": " as an alternative to ", "block_type": "TextBlock"}, {"code": "JSONP", "block_type": "CodeSpanBlock"}, {"text": ". See the ", "block_type": "TextBlock"}, {"children": [{"text": "CORS documentation", "block_type": "TextBlock"}], "url": "https://www.django-rest-framework.org/topics/ajax-csrf-cors/", "title": null, "block_type": "LinkBlock"}, {"text": " for more details.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041f\u043e\u0434\u0445\u043e\u0434 `jsonp` \u043f\u043e \u0441\u0443\u0442\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0445\u0430\u043a\u043e\u043c \u0434\u043b\u044f \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430 \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 [\u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0445 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a API] (https://stackoverflow.com/questions/613962/is-jsonp-safe-to-use), \u0433\u0434\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b `GET` \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "jsonp", "block_type": "CodeSpanBlock"}, {"text": " approach is essentially a browser hack, and is ", "block_type": "TextBlock"}, {"children": [{"text": "only appropriate for globally readable API endpoints", "block_type": "TextBlock"}], "url": "https://stackoverflow.com/questions/613962/is-jsonp-safe-to-use", "title": null, "block_type": "LinkBlock"}, {"text": ", where ", "block_type": "TextBlock"}, {"code": "GET", "block_type": "CodeSpanBlock"}, {"text": " requests are unauthenticated and do not require any user permissions.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "#### \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430", "children": [{"text": "Installation & configuration", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e pip.", "children": [{"text": "Install using pip.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "$ pip install djangorestframework-jsonp", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 REST.", "children": [{"text": "Modify your REST framework settings.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework_jsonp.renderers.JSONPRenderer',\n    ],\n}", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## MessagePack", "children": [{"text": "MessagePack", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "[MessagePack](https://msgpack.org/) - \u044d\u0442\u043e \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0439 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. [Juan Riaza](https://github.com/juanriaza) \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u0430\u043a\u0435\u0442 [djangorestframework-msgpack](https://github.com/juanriaza/django-rest-framework-msgpack), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 MessagePack \u0434\u043b\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 REST.", "children": [{"children": [{"text": "MessagePack", "block_type": "TextBlock"}], "url": "https://msgpack.org/", "title": null, "block_type": "LinkBlock"}, {"text": " is a fast, efficient binary serialization format. ", "block_type": "TextBlock"}, {"children": [{"text": "Juan Riaza", "block_type": "TextBlock"}], "url": "https://github.com/juanriaza", "title": null, "block_type": "LinkBlock"}, {"text": " maintains the ", "block_type": "TextBlock"}, {"children": [{"text": "djangorestframework-msgpack", "block_type": "TextBlock"}], "url": "https://github.com/juanriaza/django-rest-framework-msgpack", "title": null, "block_type": "LinkBlock"}, {"text": " package which provides MessagePack renderer and parser support for REST framework.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## Microsoft Excel: XLSX (\u0414\u0432\u043e\u0438\u0447\u043d\u044b\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446)", "children": [{"text": "Microsoft Excel: XLSX (Binary Spreadsheet Endpoints)", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "XLSX - \u044d\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u0432 \u043c\u0438\u0440\u0435 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u0445 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446. [\u0422\u0438\u043c \u0410\u043b\u043b\u0435\u043d](https://github.com/flipperpa) \u0438\u0437 [The Wharton School](https://github.com/wharton) \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 [drf-excel](https://github.com/wharton/drf-excel), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u0435\u0447\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u0432 \u0432\u0438\u0434\u0435 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b XLSX \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e OpenPyXL \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0435\u0435. \u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u0442\u0438\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0438\u0434\u0430.", "children": [{"text": "XLSX is the world's most popular binary spreadsheet format. ", "block_type": "TextBlock"}, {"children": [{"text": "Tim Allen", "block_type": "TextBlock"}], "url": "https://github.com/flipperpa", "title": null, "block_type": "LinkBlock"}, {"text": " of ", "block_type": "TextBlock"}, {"children": [{"text": "The Wharton School", "block_type": "TextBlock"}], "url": "https://github.com/wharton", "title": null, "block_type": "LinkBlock"}, {"text": " maintains ", "block_type": "TextBlock"}, {"children": [{"text": "drf-excel", "block_type": "TextBlock"}], "url": "https://github.com/wharton/drf-excel", "title": null, "block_type": "LinkBlock"}, {"text": ", which renders an endpoint as an XLSX spreadsheet using OpenPyXL, and allows the client to download it. Spreadsheets can be styled on a per-view basis.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "#### \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430", "children": [{"text": "Installation & configuration", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e pip.", "children": [{"text": "Install using pip.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "$ pip install drf-excel", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 REST.", "children": [{"text": "Modify your REST framework settings.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "REST_FRAMEWORK = {\n    ...\n\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n        'drf_excel.renderers.XLSXRenderer',\n    ],\n}", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0444\u0430\u0439\u043b\u0430 \u0431\u0435\u0437 \u0438\u043c\u0435\u043d\u0438 (\u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0447\u0430\u0441\u0442\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \"download\" \u0431\u0435\u0437 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f), \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0438\u043a\u0441\u0438\u043d \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 `Content-Disposition`. \u0415\u0441\u043b\u0438 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0442\u043e \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043e `export.xlsx`. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "To avoid having a file streamed without a filename (which the browser will often default to the filename \"download\", with no extension), we need to use a mixin to override the ", "block_type": "TextBlock"}, {"code": "Content-Disposition", "block_type": "CodeSpanBlock"}, {"text": " header. If no filename is provided, it will default to ", "block_type": "TextBlock"}, {"code": "export.xlsx", "block_type": "CodeSpanBlock"}, {"text": ". For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.viewsets import ReadOnlyModelViewSet\nfrom drf_excel.mixins import XLSXFileMixin\nfrom drf_excel.renderers import XLSXRenderer\n\nfrom .models import MyExampleModel\nfrom .serializers import MyExampleSerializer\n\nclass MyExampleViewSet(XLSXFileMixin, ReadOnlyModelViewSet):\n    queryset = MyExampleModel.objects.all()\n    serializer_class = MyExampleSerializer\n    renderer_classes = [XLSXRenderer]\n    filename = 'my_export.xlsx'", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## CSV", "children": [{"text": "CSV", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u044f\u0442\u044b\u043c\u0438, - \u044d\u0442\u043e \u0444\u043e\u0440\u043c\u0430\u0442 \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043b\u0435\u0433\u043a\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446. [Mjumbe Poe](https://github.com/mjumbewu) \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u0430\u043a\u0435\u0442 [djangorestframework-csv](https://github.com/mjumbewu/django-rest-framework-csv), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 CSV-\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 \u0434\u043b\u044f REST-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430.", "children": [{"text": "Comma-separated values are a plain-text tabular data format, that can be easily imported into spreadsheet applications. ", "block_type": "TextBlock"}, {"children": [{"text": "Mjumbe Poe", "block_type": "TextBlock"}], "url": "https://github.com/mjumbewu", "title": null, "block_type": "LinkBlock"}, {"text": " maintains the ", "block_type": "TextBlock"}, {"children": [{"text": "djangorestframework-csv", "block_type": "TextBlock"}], "url": "https://github.com/mjumbewu/django-rest-framework-csv", "title": null, "block_type": "LinkBlock"}, {"text": " package which provides CSV renderer support for REST framework.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## UltraJSON", "children": [{"text": "UltraJSON", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "[UltraJSON](https://github.com/esnme/ultrajson) - \u044d\u0442\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a JSON \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 C, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 JSON. [Adam Mertz](https://github.com/Amertz08) \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 [drf_ujson2](https://github.com/Amertz08/drf_ujson2), \u0444\u043e\u0440\u043a \u043d\u044b\u043d\u0435 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e [drf-ujson-renderer](https://github.com/gizmag/drf-ujson-renderer), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 JSON \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0430\u043a\u0435\u0442\u0430 UJSON.", "children": [{"children": [{"text": "UltraJSON", "block_type": "TextBlock"}], "url": "https://github.com/esnme/ultrajson", "title": null, "block_type": "LinkBlock"}, {"text": " is an optimized C JSON encoder which can give significantly faster JSON rendering. ", "block_type": "TextBlock"}, {"children": [{"text": "Adam Mertz", "block_type": "TextBlock"}], "url": "https://github.com/Amertz08", "title": null, "block_type": "LinkBlock"}, {"text": " maintains ", "block_type": "TextBlock"}, {"children": [{"text": "drf_ujson2", "block_type": "TextBlock"}], "url": "https://github.com/Amertz08/drf_ujson2", "title": null, "block_type": "LinkBlock"}, {"text": ", a fork of the now unmaintained ", "block_type": "TextBlock"}, {"children": [{"text": "drf-ujson-renderer", "block_type": "TextBlock"}], "url": "https://github.com/gizmag/drf-ujson-renderer", "title": null, "block_type": "LinkBlock"}, {"text": ", which implements JSON rendering using the UJSON package.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## CamelCase JSON", "children": [{"text": "CamelCase JSON", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "[djangorestframework-camel-case](https://github.com/vbabiy/djangorestframework-camel-case) \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u044b \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u044b JSON \u0432 \u0432\u0435\u0440\u0431\u043b\u044e\u0436\u044c\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u0434\u043b\u044f REST-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043c\u0435\u043d\u0430 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0441\u0442\u0438\u043b\u0435 Python \u0441 \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u0435\u043c, \u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u0445 \u0432 API \u043a\u0430\u043a \u0438\u043c\u0435\u043d\u0430 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0432\u0435\u0440\u0431\u043b\u044e\u0436\u044c\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u0432 \u0441\u0442\u0438\u043b\u0435 Javascript. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f [\u0412\u0438\u0442\u0430\u043b\u0438\u0435\u043c \u0411\u0430\u0431\u0438\u0435\u043c](https://github.com/vbabiy).", "children": [{"children": [{"text": "djangorestframework-camel-case", "block_type": "TextBlock"}], "url": "https://github.com/vbabiy/djangorestframework-camel-case", "title": null, "block_type": "LinkBlock"}, {"text": " provides camel case JSON renderers and parsers for REST framework. This allows serializers to use Python-style underscored field names, but be exposed in the API as Javascript-style camel case field names. It is maintained by ", "block_type": "TextBlock"}, {"children": [{"text": "Vitaly Babiy", "block_type": "TextBlock"}], "url": "https://github.com/vbabiy", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## Pandas (CSV, Excel, PNG)", "children": [{"text": "Pandas (CSV, Excel, PNG)", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "[Django REST Pandas](https://github.com/wq/django-rest-pandas) \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0438 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 [Pandas](https://pandas.pydata.org/) DataFrame API. Django REST Pandas \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440\u044b \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u043e\u0432 CSV \u0432 \u0441\u0442\u0438\u043b\u0435 Pandas, \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043a\u043d\u0438\u0433 Excel (\u043a\u0430\u043a `.xls`, \u0442\u0430\u043a \u0438 `.xlsx`) \u0438 \u0440\u044f\u0434\u0430 [\u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432](https://github.com/wq/django-rest-pandas#supported-formats). \u041e\u043d \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f [S. Andrew Sheppard](https://github.com/sheppard) \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 [wq Project](https://github.com/wq).", "children": [{"children": [{"text": "Django REST Pandas", "block_type": "TextBlock"}], "url": "https://github.com/wq/django-rest-pandas", "title": null, "block_type": "LinkBlock"}, {"text": " provides a serializer and renderers that support additional data processing and output via the ", "block_type": "TextBlock"}, {"children": [{"text": "Pandas", "block_type": "TextBlock"}], "url": "https://pandas.pydata.org/", "title": null, "block_type": "LinkBlock"}, {"text": " DataFrame API. Django REST Pandas includes renderers for Pandas-style CSV files, Excel workbooks (both ", "block_type": "TextBlock"}, {"code": ".xls", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": ".xlsx", "block_type": "CodeSpanBlock"}, {"text": "), and a number of ", "block_type": "TextBlock"}, {"children": [{"text": "other formats", "block_type": "TextBlock"}], "url": "https://github.com/wq/django-rest-pandas#supported-formats", "title": null, "block_type": "LinkBlock"}, {"text": ". It is maintained by ", "block_type": "TextBlock"}, {"children": [{"text": "S. Andrew Sheppard", "block_type": "TextBlock"}], "url": "https://github.com/sheppard", "title": null, "block_type": "LinkBlock"}, {"text": " as part of the ", "block_type": "TextBlock"}, {"children": [{"text": "wq Project", "block_type": "TextBlock"}], "url": "https://github.com/wq", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## LaTeX", "children": [{"text": "LaTeX", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "[Rest Framework Latex](https://github.com/mypebble/rest-framework-latex) \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 PDF-\u0444\u0430\u0439\u043b\u044b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Laulatex. \u041e\u043d \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f [Pebble (S/F Software)](https://github.com/mypebble).", "children": [{"children": [{"text": "Rest Framework Latex", "block_type": "TextBlock"}], "url": "https://github.com/mypebble/rest-framework-latex", "title": null, "block_type": "LinkBlock"}, {"text": " provides a renderer that outputs PDFs using Laulatex. It is maintained by ", "block_type": "TextBlock"}, {"children": [{"text": "Pebble (S/F Software)", "block_type": "TextBlock"}], "url": "https://github.com/mypebble", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}]}