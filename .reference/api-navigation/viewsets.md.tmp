{"source": "/home/ilyachch/Projects/OpenSource/django-rest-framework-rusdoc/.reference/api-navigation/viewsets.md", "blocks": [{"block_type": "SeparatorBlock"}, {"translated_data": "\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a:", "children": [{"text": "source:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* Viewsets.py", "children": [{"children": [{"text": "viewsets.py", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u0412\u0438\u0434\u044b", "children": [{"text": "ViewSets", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "> \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0430, \u043a\u0430\u043a\u043e\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432\u0430\u0448 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430.\n>\n> - [\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Ruby on Rails] (https://guides.rubyonrails.org/action_controller_overview.html)", "children": [{"children": [{"text": "After routing has determined which controller to use for a request, your controller is responsible for making sense of the request and producing the appropriate output.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "NewlineBlock"}, {"children": [{"text": "\u2014 ", "block_type": "TextBlock"}, {"children": [{"text": "Ruby on Rails Documentation", "block_type": "TextBlock"}], "url": "https://guides.rubyonrails.org/action_controller_overview.html", "title": null, "block_type": "LinkBlock"}], "block_type": "Paragraph"}], "block_type": "BlockQuote"}, {"translated_data": "Django Rest Framework \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u043d\u0430\u0431\u043e\u0440\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0432 \u043e\u0434\u043d\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u043c `viewset '.\n\u0412 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u0445 \u0432\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043d\u0446\u0435\u043f\u0442\u0443\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0445\u043e\u0436\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u043d\u0430\u0437\u0432\u0430\u043d\u043d\u044b\u0435 \u0447\u0442\u043e -\u0442\u043e \u0432\u0440\u043e\u0434\u0435 \u00ab\u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\u00bb \u0438\u043b\u0438 \u00ab\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432\u00bb.", "children": [{"text": "Django REST framework allows you to combine the logic for a set of related views in a single class, called a ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": ". In other frameworks you may also find conceptually similar implementations named something like 'Resources' or 'Controllers'.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `viewset`-\u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e ** \u0442\u0438\u043f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043b\u0430\u0441\u0441\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u0430 **, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a` .get () `\u0438\u043b\u0438` .post () `, \u0438 \u0432\u043c\u0435\u0441\u0442\u043e \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0430\u043a\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u043a\u0430\u043a`.\nlist () `\u0438` .create () `.", "children": [{"text": "A ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": " class is simply ", "block_type": "TextBlock"}, {"children": [{"text": "a type of class-based View, that does not provide any method handlers", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": " such as ", "block_type": "TextBlock"}, {"code": ".get()", "block_type": "CodeSpanBlock"}, {"text": " or ", "block_type": "TextBlock"}, {"code": ".post()", "block_type": "CodeSpanBlock"}, {"text": ", and instead provides actions such as ", "block_type": "TextBlock"}, {"code": ".list()", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": ".create()", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 \u0434\u043b\u044f `viewset` \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438 \u0432 \u0442\u043e\u0447\u043a\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434` .as_view () `.", "children": [{"text": "The method handlers for a ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": " are only bound to the corresponding actions at the point of finalizing the view, using the ", "block_type": "TextBlock"}, {"code": ".as_view()", "block_type": "CodeSpanBlock"}, {"text": " method.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0432\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u044f\u0432\u043d\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0447\u0435\u0442\u0435 Views \u0432 URLConf, \u0432\u044b \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0435 \u0441\u043c\u0435\u0441\u044c \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043b\u0430\u0441\u0441\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 URLConf \u0434\u043b\u044f \u0432\u0430\u0441.", "children": [{"text": "Typically, rather than explicitly registering the views in a viewset in the urlconf, you'll register the viewset with a router class, that automatically determines the urlconf for you.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u041f\u0440\u0438\u043c\u0435\u0440", "children": [{"text": "Example", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435.", "children": [{"text": "Let's define a simple viewset that can be used to list or retrieve all the users in the system.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from django.contrib.auth.models import User\nfrom django.shortcuts import get_object_or_404\nfrom myapps.serializers import UserSerializer\nfrom rest_framework import viewsets\nfrom rest_framework.response import Response\n\nclass UserViewSet(viewsets.ViewSet):\n    \"\"\"\n    A simple ViewSet for listing or retrieving users.\n    \"\"\"\n    def list(self, request):\n        queryset = User.objects.all()\n        serializer = UserSerializer(queryset, many=True)\n        return Response(serializer.data)\n\n    def retrieve(self, request, pk=None):\n        queryset = User.objects.all()\n        user = get_object_or_404(queryset, pk=pk)\n        serializer = UserSerializer(user)\n        return Response(serializer.data)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u0432\u044f\u0437\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0441\u0435\u0442 \u0441 \u0434\u0432\u0443\u043c\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0430\u043a:", "children": [{"text": "If we need to, we can bind this viewset into two separate views, like so:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "user_list = UserViewSet.as_view({'get': 'list'})\nuser_detail = UserViewSet.as_view({'get': 'retrieve'})", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u043c\u044b \u043d\u0435 \u0434\u0435\u043b\u0430\u043b\u0438 \u044d\u0442\u043e\u0433\u043e, \u043d\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u044d\u0442\u043e\u0433\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u043c \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0441 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u043c \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u0438 \u0431\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c URLConf.", "children": [{"text": "Typically we wouldn't do this, but would instead register the viewset with a router, and allow the urlconf to be automatically generated.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from myapp.views import UserViewSet\nfrom rest_framework.routers import DefaultRouter\n\nrouter = DefaultRouter()\nrouter.register(r'users', UserViewSet, basename='user')\nurlpatterns = router.urls", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0412\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0432\u0438\u0434\u044b, \u0432\u044b \u0447\u0430\u0441\u0442\u043e \u0437\u0430\u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u043d\u0430\u0431\u043e\u0440 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "Rather than writing your own viewsets, you'll often want to use the existing base classes that provide a default set of behavior. For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A viewset for viewing and editing user instances.\n    \"\"\"\n    serializer_class = UserSerializer\n    queryset = User.objects.all()", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0432\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 `viewset` \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0430` view '.", "children": [{"text": "There are two main advantages of using a ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": " class over using a ", "block_type": "TextBlock"}, {"code": "View", "block_type": "CodeSpanBlock"}, {"text": " class.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* \u041f\u043e\u0432\u0442\u043e\u0440\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0430 \u0432 \u043e\u0434\u0438\u043d \u043a\u043b\u0430\u0441\u0441.\n\u0412 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c \u0432\u044b\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u043e\u0434\u0438\u043d \u0440\u0430\u0437, \u0438 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u0445.\n* \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440\u044b, \u043d\u0430\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0438\u043c\u0435\u0442\u044c \u0434\u0435\u043b\u043e \u0441 \u043f\u0440\u043e\u0432\u043e\u0434\u043a\u043e\u0439 URL Conf.", "children": [{"children": [{"text": "Repeated logic can be combined into a single class. In the above example, we only need to specify the ", "block_type": "TextBlock"}, {"code": "queryset", "block_type": "CodeSpanBlock"}, {"text": " once, and it'll be used across multiple views.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "By using routers, we no longer need to deal with wiring up the URL conf ourselves.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"translated_data": "\u041e\u0431\u0430 \u043e\u043d\u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0438\u0441\u0441\u043e\u043c.\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438 URL CONFS \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u0442\u043a\u043e \u0438 \u0434\u0430\u0435\u0442 \u0432\u0430\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f.\n\u0412\u0438\u0434\u044b \u043f\u043e\u043b\u0435\u0437\u043d\u044b, \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0431\u044b\u0441\u0442\u0440\u043e \u0432\u0441\u0442\u0430\u0442\u044c \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438\u043b\u0438 \u043a\u043e\u0433\u0434\u0430 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0439 API, \u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e URL -\u0430\u0434\u0440\u0435\u0441\u0430 \u043f\u043e\u0432\u0441\u044e\u0434\u0443.", "children": [{"text": "Both of these come with a trade-off. Using regular views and URL confs is more explicit and gives you more control. ViewSets are helpful if you want to get up and running quickly, or when you have a large API and you want to enforce a consistent URL configuration throughout.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## viewset actions", "children": [{"text": "ViewSet actions", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0435 \u0432 Framework REST, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u044f\u0442 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 CREATE/RESIED/UPDATE/\u0423\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0438\u043b\u044f, \u043a\u0430\u043a \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u043d\u0438\u0436\u0435:", "children": [{"text": "The default routers included with REST framework will provide routes for a standard set of create/retrieve/update/destroy style actions, as shown below:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class UserViewSet(viewsets.ViewSet):\n    \"\"\"\n    Example empty viewset demonstrating the standard\n    actions that will be handled by a router class.\n\n    If you're using format suffixes, make sure to also include\n    the `format=None` keyword argument for each action.\n    \"\"\"\n\n    def list(self, request):\n        pass\n\n    def create(self, request):\n        pass\n\n    def retrieve(self, request, pk=None):\n        pass\n\n    def update(self, request, pk=None):\n        pass\n\n    def partial_update(self, request, pk=None):\n        pass\n\n    def destroy(self, request, pk=None):\n        pass", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u0438\u043d\u0442\u0440\u043e\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438", "children": [{"text": "Introspecting ViewSet actions", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0412\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043d\u0430 `viewset '.", "children": [{"text": "During dispatch, the following attributes are available on the ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* `baseName` - \u0431\u0430\u0437\u0430 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u0435\u043d URL -\u0430\u0434\u0440\u0435\u0441\u043e\u0432.\n* `action` - \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440,` list`, `create`).\n* `Detail` - Boolean, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044f, \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043b\u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f.\n* `\u0421\u0443\u0444\u0444\u0438\u043a\u0441 - \u0441\u0443\u0444\u0444\u0438\u043a\u0441 \u0434\u0438\u0441\u043f\u043b\u0435\u044f \u0434\u043b\u044f \u0442\u0438\u043f\u0430 \u0432\u0438\u0434\u0430 - \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442` detail`.\n* `name` - \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c\u043e\u0435 \u0438\u043c\u044f \u0434\u043b\u044f ViewSet.\n\u042d\u0442\u043e\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0434\u043b\u044f `\u0441\u0443\u0444\u0444\u0438\u043a\u0441.\n* `description` - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0441\u043f\u043b\u0435\u044f \u0434\u043b\u044f \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0437\u043e\u0440\u0430.", "children": [{"children": [{"code": "basename", "block_type": "CodeSpanBlock"}, {"text": " - the base to use for the URL names that are created.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "action", "block_type": "CodeSpanBlock"}, {"text": " - the name of the current action (e.g., ", "block_type": "TextBlock"}, {"code": "list", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "create", "block_type": "CodeSpanBlock"}, {"text": ").", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "detail", "block_type": "CodeSpanBlock"}, {"text": " - boolean indicating if the current action is configured for a list or detail view.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "suffix", "block_type": "CodeSpanBlock"}, {"text": " - the display suffix for the viewset type - mirrors the ", "block_type": "TextBlock"}, {"code": "detail", "block_type": "CodeSpanBlock"}, {"text": " attribute.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "name", "block_type": "CodeSpanBlock"}, {"text": " - the display name for the viewset. This argument is mutually exclusive to ", "block_type": "TextBlock"}, {"code": "suffix", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "description", "block_type": "CodeSpanBlock"}, {"text": " - the display description for the individual view of a viewset.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"translated_data": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u044d\u0442\u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0430 \u0432\u0441\u0435, \u043a\u0440\u043e\u043c\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u00abList\u00bb, \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u044d\u0442\u0438\u043c:", "children": [{"text": "You may inspect these attributes to adjust behavior based on the current action. For example, you could restrict permissions to everything except the ", "block_type": "TextBlock"}, {"code": "list", "block_type": "CodeSpanBlock"}, {"text": " action similar to this:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "def get_permissions(self):\n    \"\"\"\n    Instantiates and returns the list of permissions that this view requires.\n    \"\"\"\n    if self.action == 'list':\n        permission_classes = [IsAuthenticated]\n    else:\n        permission_classes = [IsAdminUser]\n    return [permission() for permission in permission_classes]", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u043b\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438", "children": [{"text": "Marking extra actions for routing", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043c\u0435\u0442\u0438\u0442\u044c \u0438\u0445 \u043a\u0430\u043a \u0442\u0430\u043a\u043e\u0432\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 `@action`.\n\u041a\u0430\u043a \u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u044b \u043b\u0438\u0431\u043e \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043b\u0438\u0431\u043e \u0434\u043b\u044f \u0446\u0435\u043b\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438.\n\u0427\u0442\u043e\u0431\u044b \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u044d\u0442\u043e, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u00abDetail\u00bb \u043d\u0430 `true` \u0438\u043b\u0438` false '.\n\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0448\u0430\u0431\u043b\u043e\u043d\u044b URL -\u0430\u0434\u0440\u0435\u0441\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u00abDefaultrouter\u00bb \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u00abpk\u00bb \u0432 \u0441\u0432\u043e\u0438\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u0445 URL.", "children": [{"text": "If you have ad-hoc methods that should be routable, you can mark them as such with the ", "block_type": "TextBlock"}, {"code": "@action", "block_type": "CodeSpanBlock"}, {"text": " decorator. Like regular actions, extra actions may be intended for either a single object, or an entire collection. To indicate this, set the ", "block_type": "TextBlock"}, {"code": "detail", "block_type": "CodeSpanBlock"}, {"text": " argument to ", "block_type": "TextBlock"}, {"code": "True", "block_type": "CodeSpanBlock"}, {"text": " or ", "block_type": "TextBlock"}, {"code": "False", "block_type": "CodeSpanBlock"}, {"text": ". The router will configure its URL patterns accordingly. e.g., the ", "block_type": "TextBlock"}, {"code": "DefaultRouter", "block_type": "CodeSpanBlock"}, {"text": " will configure detail actions to contain ", "block_type": "TextBlock"}, {"code": "pk", "block_type": "CodeSpanBlock"}, {"text": " in their URL patterns.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439:", "children": [{"text": "A more complete example of extra actions:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from django.contrib.auth.models import User\nfrom rest_framework import status, viewsets\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom myapp.serializers import UserSerializer, PasswordSerializer\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A viewset that provides the standard actions\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n    @action(detail=True, methods=['post'])\n    def set_password(self, request, pk=None):\n        user = self.get_object()\n        serializer = PasswordSerializer(data=request.data)\n        if serializer.is_valid():\n            user.set_password(serializer.validated_data['password'])\n            user.save()\n            return Response({'status': 'password set'})\n        else:\n            return Response(serializer.errors,\n                            status=status.HTTP_400_BAD_REQUEST)\n\n    @action(detail=False)\n    def recent_users(self, request):\n        recent_users = User.objects.all().order_by('-last_login')\n\n        page = self.paginate_queryset(recent_users)\n        if page is not None:\n            serializer = self.get_serializer(page, many=True)\n            return self.get_paginated_response(serializer.data)\n\n        serializer = self.get_serializer(recent_users, many=True)\n        return Response(serializer.data)", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u00ab\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u00bb \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b `get` \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b HTTP, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u00ab \u041c\u0435\u0442\u043e\u0434\u044b \u00bb.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "action", "block_type": "CodeSpanBlock"}, {"text": " decorator will route ", "block_type": "TextBlock"}, {"code": "GET", "block_type": "CodeSpanBlock"}, {"text": " requests by default, but may also accept other HTTP methods by setting the ", "block_type": "TextBlock"}, {"code": "methods", "block_type": "CodeSpanBlock"}, {"text": " argument. For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "@action(detail=True, methods=['post', 'delete'])\n    def unset_password(self, request, pk=None):\n       ...", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043b\u044e\u0431\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u043e\u0431\u0437\u043e\u0440\u0430, \u0442\u0430\u043a\u0443\u044e \u043a\u0430\u043a `rescision_class`,` serializer_class`, `filter_backends` ...:", "children": [{"text": "The decorator allows you to override any viewset-level configuration such as ", "block_type": "TextBlock"}, {"code": "permission_classes", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "serializer_class", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "filter_backends", "block_type": "CodeSpanBlock"}, {"text": "...:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "@action(detail=True, methods=['post'], permission_classes=[IsAdminOrIsSelf])\n    def set_password(self, request, pk=None):\n       ...", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0417\u0430\u0442\u0435\u043c \u0434\u0432\u0430 \u043d\u043e\u0432\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043d\u0430 URLS `^users/{pk}/set_password/$` \u0438 `^users/{pk}/unset_password/$`.\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b `url_path` \u0438` url_name`, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0435\u0433\u043c\u0435\u043d\u0442 URL -\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0438\u043c\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e URL -\u0430\u0434\u0440\u0435\u0441\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f.", "children": [{"text": "The two new actions will then be available at the urls ", "block_type": "TextBlock"}, {"code": "^users/{pk}/set_password/$", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": "^users/{pk}/unset_password/$", "block_type": "CodeSpanBlock"}, {"text": ". Use the ", "block_type": "TextBlock"}, {"code": "url_path", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": "url_name", "block_type": "CodeSpanBlock"}, {"text": " parameters to change the URL segment and the reverse URL name of the action.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0432\u044b\u0437\u043e\u0432\u0438\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 `.get_extra_actions ()`.", "children": [{"text": "To view all extra actions, call the ", "block_type": "TextBlock"}, {"code": ".get_extra_actions()", "block_type": "CodeSpanBlock"}, {"text": " method.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 HTTP \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439", "children": [{"text": "Routing additional HTTP methods for extra actions", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b HTTP \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 `viewset.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b\u0448\u0435\u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u043e\u043b\u0435\u0439/\u043d\u0435\u0440\u0435\u0434\u043e\u0432\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u0432 \u043e\u0434\u0438\u043d \u043c\u0430\u0440\u0448\u0440\u0443\u0442.\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b.", "children": [{"text": "Extra actions can map additional HTTP methods to separate ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": " methods. For example, the above password set/unset methods could be consolidated into a single route. Note that additional mappings do not accept arguments.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "@action(detail=True, methods=['put'], name='Change Password')\n    def password(self, request, pk=None):\n        \"\"\"Update the user's password.\"\"\"\n        ...\n\n    @password.mapping.delete\n    def delete_password(self, request, pk=None):\n        \"\"\"Delete the user's password.\"\"\"\n        ...", "language": "python", "block_type": "CodeBlock"}, {"translated_data": "## \u041e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 URL -\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f", "children": [{"text": "Reversing action URLs", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c URL -\u0430\u0434\u0440\u0435\u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 `.reverse_Action ()`.\n\u042d\u0442\u043e \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u043e\u0431\u0435\u0440\u0442\u043a\u0430 \u0434\u043b\u044f `reverse ()`, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f \u043e\u0431\u044a\u0435\u043a\u0442 View `request` \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430` url_name` \u0441 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c `.basename.", "children": [{"text": "If you need to get the URL of an action, use the ", "block_type": "TextBlock"}, {"code": ".reverse_action()", "block_type": "CodeSpanBlock"}, {"text": " method. This is a convenience wrapper for ", "block_type": "TextBlock"}, {"code": "reverse()", "block_type": "CodeSpanBlock"}, {"text": ", automatically passing the view's ", "block_type": "TextBlock"}, {"code": "request", "block_type": "CodeSpanBlock"}, {"text": " object and prepending the ", "block_type": "TextBlock"}, {"code": "url_name", "block_type": "CodeSpanBlock"}, {"text": " with the ", "block_type": "TextBlock"}, {"code": ".basename", "block_type": "CodeSpanBlock"}, {"text": " attribute.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e `basename '\u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u043c \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438` viewset.\n\u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440, \u0442\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 `baseName` \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u0430` .as_view () `.", "children": [{"text": "Note that the ", "block_type": "TextBlock"}, {"code": "basename", "block_type": "CodeSpanBlock"}, {"text": " is provided by the router during ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": " registration. If you are not using a router, then you must provide the ", "block_type": "TextBlock"}, {"code": "basename", "block_type": "CodeSpanBlock"}, {"text": " argument to the ", "block_type": "TextBlock"}, {"code": ".as_view()", "block_type": "CodeSpanBlock"}, {"text": " method.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430:", "children": [{"text": "Using the example from the previous section:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": ">>> view.reverse_action('set-password', args=['1'])\n'http://localhost:8000/api/users/1/set_password'", "language": "python", "block_type": "CodeBlock"}, {"translated_data": "\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442 `url_name`, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c`@action`.", "children": [{"text": "Alternatively, you can use the ", "block_type": "TextBlock"}, {"code": "url_name", "block_type": "CodeSpanBlock"}, {"text": " attribute set by the ", "block_type": "TextBlock"}, {"code": "@action", "block_type": "CodeSpanBlock"}, {"text": " decorator.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": ">>> view.reverse_action(view.set_password.url_name, args=['1'])\n'http://localhost:8000/api/users/1/set_password'", "language": "python", "block_type": "CodeBlock"}, {"translated_data": "\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442 `url_name` \u0434\u043b\u044f` .reverse_action () `\u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043c\u0443 \u0436\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0443 \u0441 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c`@action`.\n\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u00abList\u00bb \u0438 `create`.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "url_name", "block_type": "CodeSpanBlock"}, {"text": " argument for ", "block_type": "TextBlock"}, {"code": ".reverse_action()", "block_type": "CodeSpanBlock"}, {"text": " should match the same argument to the ", "block_type": "TextBlock"}, {"code": "@action", "block_type": "CodeSpanBlock"}, {"text": " decorator. Additionally, this method can be used to reverse the default actions, such as ", "block_type": "TextBlock"}, {"code": "list", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": "create", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 API", "children": [{"text": "API Reference", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "## Viewset", "children": [{"text": "ViewSet", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `viewset` \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0442` apiview`.\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a `rescision_classes`,` Authentication_classes`, \u0447\u0442\u043e\u0431\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u043e\u0439 API \u043d\u0430 \u0441\u0431\u043e\u0440\u0435 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": " class inherits from ", "block_type": "TextBlock"}, {"code": "APIView", "block_type": "CodeSpanBlock"}, {"text": ". You can use any of the standard attributes such as ", "block_type": "TextBlock"}, {"code": "permission_classes", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "authentication_classes", "block_type": "CodeSpanBlock"}, {"text": " in order to control the API policy on the viewset.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `ViewSet` \u043d\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.\n\u0427\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 `viewset`, \u0432\u044b \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0435 \u043a\u043b\u0430\u0441\u0441 \u0438 \u044f\u0432\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": " class does not provide any implementations of actions. In order to use a ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": " class you'll override the class and define the action implementations explicitly.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## genericviewset", "children": [{"text": "GenericViewSet", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `genericViewSet` \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0442` genericApiview` \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `get_object`, \u043c\u0435\u0442\u043e\u0434\u043e\u0432` get_queryset` \u0438 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043d\u043e \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "GenericViewSet", "block_type": "CodeSpanBlock"}, {"text": " class inherits from ", "block_type": "TextBlock"}, {"code": "GenericAPIView", "block_type": "CodeSpanBlock"}, {"text": ", and provides the default set of ", "block_type": "TextBlock"}, {"code": "get_object", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "get_queryset", "block_type": "CodeSpanBlock"}, {"text": " methods and other generic view base behavior, but does not include any actions by default.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 `genericViewSet`, \u0432\u044b \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u043a\u043b\u0430\u0441\u0441 \u0438 \u043b\u0438\u0431\u043e \u0441\u043c\u0435\u0448\u0438\u0432\u0430\u044e\u0442 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043c\u0438\u043a\u0448\u0438\u043d\u0430, \u043b\u0438\u0431\u043e \u044f\u0432\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.", "children": [{"text": "In order to use a ", "block_type": "TextBlock"}, {"code": "GenericViewSet", "block_type": "CodeSpanBlock"}, {"text": " class you'll override the class and either mixin the required mixin classes, or define the action implementations explicitly.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## modelviewset", "children": [{"text": "ModelViewSet", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `modelviewset` \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0442` genericapiview` \u0438 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439, \u0441\u043c\u0435\u0448\u0438\u0432\u0430\u044f \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043c\u0438\u043a\u0448\u0438\u043d\u0430.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "ModelViewSet", "block_type": "CodeSpanBlock"}, {"text": " class inherits from ", "block_type": "TextBlock"}, {"code": "GenericAPIView", "block_type": "CodeSpanBlock"}, {"text": " and includes implementations for various actions, by mixing in the behavior of the various mixin classes.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u043c `modelViewSet`, \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f` .list () `,` .retrieve () `,` .create () `,` .update () `,` .partial_update () `\u0438` .destroy (\n) `.", "children": [{"text": "The actions provided by the ", "block_type": "TextBlock"}, {"code": "ModelViewSet", "block_type": "CodeSpanBlock"}, {"text": " class are ", "block_type": "TextBlock"}, {"code": ".list()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".retrieve()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".create()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".update()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".partial_update()", "block_type": "CodeSpanBlock"}, {"text": ", and ", "block_type": "TextBlock"}, {"code": ".destroy()", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "#### \u041f\u0440\u0438\u043c\u0435\u0440", "children": [{"text": "Example", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 `modelviewset` Extens` genericapiview`, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b `Queryset` \u0438` serializer_class`.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "Because ", "block_type": "TextBlock"}, {"code": "ModelViewSet", "block_type": "CodeSpanBlock"}, {"text": " extends ", "block_type": "TextBlock"}, {"code": "GenericAPIView", "block_type": "CodeSpanBlock"}, {"text": ", you'll normally need to provide at least the ", "block_type": "TextBlock"}, {"code": "queryset", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": "serializer_class", "block_type": "CodeSpanBlock"}, {"text": " attributes. For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class AccountViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A simple ViewSet for viewing and editing accounts.\n    \"\"\"\n    queryset = Account.objects.all()\n    serializer_class = AccountSerializer\n    permission_classes = [IsAccountAdminOrReadOnly]", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u0430, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 `genericapiview`.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c `viewset`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0447\u0442\u043e -\u0442\u043e \u0432\u0440\u043e\u0434\u0435 \u044d\u0442\u043e\u0433\u043e:", "children": [{"text": "Note that you can use any of the standard attributes or method overrides provided by ", "block_type": "TextBlock"}, {"code": "GenericAPIView", "block_type": "CodeSpanBlock"}, {"text": ". For example, to use a ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": " that dynamically determines the queryset it should operate on, you might do something like this:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class AccountViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A simple ViewSet for viewing and editing the accounts\n    associated with the user.\n    \"\"\"\n    serializer_class = AccountSerializer\n    permission_classes = [IsAccountAdminOrReadOnly]\n\n    def get_queryset(self):\n        return self.request.user.accounts.all()", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041e\u0434\u043d\u0430\u043a\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 `Queryset` \u0438\u0437 \u0432\u0430\u0448\u0435\u0433\u043e` viewset`, \u043b\u044e\u0431\u043e\u0439 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 [router] (routers.md) \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u043c\u044f \u0432\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u0438 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u00ab\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u00bb.\nKwarg \u043a\u0430\u043a \u0447\u0430\u0441\u0442\u044c \u0432\u0430\u0448\u0435\u0439 [Router Registration] (Routers.md).", "children": [{"text": "Note however that upon removal of the ", "block_type": "TextBlock"}, {"code": "queryset", "block_type": "CodeSpanBlock"}, {"text": " property from your ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": ", any associated ", "block_type": "TextBlock"}, {"children": [{"text": "router", "block_type": "TextBlock"}], "url": "routers.md", "title": null, "block_type": "LinkBlock"}, {"text": " will be unable to derive the basename of your Model automatically, and so you will have to specify the ", "block_type": "TextBlock"}, {"code": "basename", "block_type": "CodeSpanBlock"}, {"text": " kwarg as part of your ", "block_type": "TextBlock"}, {"children": [{"text": "router registration", "block_type": "TextBlock"}], "url": "routers.md", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0422\u0430\u043a\u0436\u0435 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e, \u0445\u043e\u0442\u044f \u044d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 CREATE/LIST/RETIVE/UPDATE/\u0423\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439.", "children": [{"text": "Also note that although this class provides the complete set of create/list/retrieve/update/destroy actions by default, you can restrict the available operations by using the standard permission classes.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## readonlymodelviewset", "children": [{"text": "ReadOnlyModelViewSet", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u041a\u043b\u0430\u0441\u0441 `readonlymodelviewset` \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0442` genericapiview`.\n\u041a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u00abModelViewSet\u00bb, \u043e\u043d \u0442\u0430\u043a\u0436\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439, \u043d\u043e \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 `modelViewSet` \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u00ab \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u00bb,` .list () `\u0438` .retrieve () `.", "children": [{"text": "The ", "block_type": "TextBlock"}, {"code": "ReadOnlyModelViewSet", "block_type": "CodeSpanBlock"}, {"text": " class also inherits from ", "block_type": "TextBlock"}, {"code": "GenericAPIView", "block_type": "CodeSpanBlock"}, {"text": ". As with ", "block_type": "TextBlock"}, {"code": "ModelViewSet", "block_type": "CodeSpanBlock"}, {"text": " it also includes implementations for various actions, but unlike ", "block_type": "TextBlock"}, {"code": "ModelViewSet", "block_type": "CodeSpanBlock"}, {"text": " only provides the 'read-only' actions, ", "block_type": "TextBlock"}, {"code": ".list()", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": ".retrieve()", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "#### \u041f\u0440\u0438\u043c\u0435\u0440", "children": [{"text": "Example", "block_type": "TextBlock"}], "level": 4, "block_type": "HeadingBlock"}, {"translated_data": "\u041a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 `modelviewset`, \u0432\u0430\u043c \u043e\u0431\u044b\u0447\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b` Queryset` \u0438 `serializer_class`.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "As with ", "block_type": "TextBlock"}, {"code": "ModelViewSet", "block_type": "CodeSpanBlock"}, {"text": ", you'll normally need to provide at least the ", "block_type": "TextBlock"}, {"code": "queryset", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": "serializer_class", "block_type": "CodeSpanBlock"}, {"text": " attributes. For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "class AccountViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    A simple ViewSet for viewing accounts.\n    \"\"\"\n    queryset = Account.objects.all()\n    serializer_class = AccountSerializer", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u041e\u043f\u044f\u0442\u044c \u0436\u0435, \u043a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 `modelviewset`, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0434\u043b\u044f` genericapiview`.", "children": [{"text": "Again, as with ", "block_type": "TextBlock"}, {"code": "ModelViewSet", "block_type": "CodeSpanBlock"}, {"text": ", you can use any of the standard attributes and method overrides available to ", "block_type": "TextBlock"}, {"code": "GenericAPIView", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "# \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0432\u0438\u0434\u043e\u0432\u044b\u0445 \u0441\u0435\u0442\u0435\u0439", "children": [{"text": "Custom ViewSet base classes", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u044b `viewset`, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439` modelViewSet` \u0438\u043b\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043a\u0430\u043a\u0438\u043c -\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c.", "children": [{"text": "You may need to provide custom ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": " classes that do not have the full set of ", "block_type": "TextBlock"}, {"code": "ModelViewSet", "block_type": "CodeSpanBlock"}, {"text": " actions, or that customize the behavior in some other way.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## \u041f\u0440\u0438\u043c\u0435\u0440", "children": [{"text": "Example", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 ViewSet, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 `create`,` list` \u0438 `retive`, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044f \u043e\u0442` genericviewset` \u0438 \u0441\u043c\u0435\u0448\u0438\u0432\u0430\u0439\u0442\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f:", "children": [{"text": "To create a base viewset class that provides ", "block_type": "TextBlock"}, {"code": "create", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "list", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": "retrieve", "block_type": "CodeSpanBlock"}, {"text": " operations, inherit from ", "block_type": "TextBlock"}, {"code": "GenericViewSet", "block_type": "CodeSpanBlock"}, {"text": ", and mixin the required actions:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework import mixins\n\nclass CreateListRetrieveViewSet(mixins.CreateModelMixin,\n                                mixins.ListModelMixin,\n                                mixins.RetrieveModelMixin,\n                                viewsets.GenericViewSet):\n    \"\"\"\n    A viewset that provides `retrieve`, `create`, and `list` actions.\n\n    To use it, override the class and set the `.queryset` and\n    `.serializer_class` attributes.\n    \"\"\"\n    pass", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0421\u043e\u0437\u0434\u0430\u0432\u0430\u044f \u0441\u0432\u043e\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b `viewset`, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043e\u0431\u0449\u0435\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0438\u0434\u0430\u0445 \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u0432\u0430\u0448\u0435\u043c\u0443 API.", "children": [{"text": "By creating your own base ", "block_type": "TextBlock"}, {"code": "ViewSet", "block_type": "CodeSpanBlock"}, {"text": " classes, you can provide common behavior that can be reused in multiple viewsets across your API.", "block_type": "TextBlock"}], "block_type": "Paragraph"}]}