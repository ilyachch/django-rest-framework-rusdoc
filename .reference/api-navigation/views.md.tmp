{"source": "/home/ilyachch/Projects/OpenSource/django-rest-framework-rusdoc/.reference/api-navigation/views.md", "blocks": [{"block_type": "SeparatorBlock"}, {"translated_data": "\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a:", "children": [{"text": "source:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* Decerators.py\n* views.py", "children": [{"children": [{"text": "decorators.py", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "views.py", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u041a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0435 \u0432\u0437\u0433\u043b\u044f\u0434\u044b", "children": [{"text": "Class-based Views", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "> \u0412\u0437\u0433\u043b\u044f\u0434\u044b \u0414\u0436\u0430\u043d\u0433\u043e, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043a\u043b\u0430\u0441\u0441\u0435, \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0434\u043e\u043b\u0433\u043e\u0436\u0434\u0430\u043d\u043d\u044b\u043c \u043e\u0442\u0445\u043e\u0434\u043e\u043c \u043e\u0442 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432 \u0441\u0442\u0430\u0440\u043e\u0433\u043e \u0441\u0442\u0438\u043b\u044f.\n>\n>-[Reinout van Rees] (https://reinout.vanrees.org/weblog/2011/08/24/class \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 views-usage.html)", "children": [{"children": [{"text": "Django's class-based views are a welcome departure from the old-style views.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "NewlineBlock"}, {"children": [{"text": "\u2014 ", "block_type": "TextBlock"}, {"children": [{"text": "Reinout van Rees", "block_type": "TextBlock"}], "url": "https://reinout.vanrees.org/weblog/2011/08/24/class-based-views-usage.html", "title": null, "block_type": "LinkBlock"}], "block_type": "Paragraph"}], "block_type": "BlockQuote"}, {"translated_data": "Framework REST \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0430\u0441\u0441 `apiview`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u043b\u0435\u043d \u043a\u043b\u0430\u0441\u0441 Django` view`.", "children": [{"text": "REST framework provides an ", "block_type": "TextBlock"}, {"code": "APIView", "block_type": "CodeSpanBlock"}, {"text": " class, which subclasses Django's ", "block_type": "TextBlock"}, {"code": "View", "block_type": "CodeSpanBlock"}, {"text": " class.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "`\u041a\u043b\u0430\u0441\u0441\u044b Apiview` \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043e\u0442 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432` View` \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:", "children": [{"code": "APIView", "block_type": "CodeSpanBlock"}, {"text": " classes are different from regular ", "block_type": "TextBlock"}, {"code": "View", "block_type": "CodeSpanBlock"}, {"text": " classes in the following ways:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* \u0417\u0430\u043f\u0440\u043e\u0441\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u0431\u0443\u0434\u0443\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b Framework Framework, \u0430 \u043d\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b Django `httprequest.\n* \u041c\u0435\u0442\u043e\u0434\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c `` `` ``, \u0432\u043c\u0435\u0441\u0442\u043e \u00abhttpresponse\u00bb, \u0432\u043c\u0435\u0441\u0442\u043e \u00abhttpresponse\u00bb \u0414\u0436\u0430\u043d\u0433\u043e.\n\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0440\u0430\u043c\u0438 \u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0435 \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043d\u0430 \u043e\u0442\u0432\u0435\u0442\u0435.\n* \u041b\u044e\u0431\u044b\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f `apiexception '\u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u0439\u043c\u0430\u043d\u044b \u0438 \u043e\u043f\u043e\u0441\u0440\u0435\u0434\u043e\u0432\u0430\u043d\u044b \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043e\u0442\u0432\u0435\u0442\u0430\u0445.\n* \u0412\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0431\u0443\u0434\u0443\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u044b, \u0438 \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0438/\u0438\u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0440\u043e\u0441\u0441\u0435\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0441\u043b\u043e\u043d\u043a\u0438.", "children": [{"children": [{"text": "Requests passed to the handler methods will be REST framework's ", "block_type": "TextBlock"}, {"code": "Request", "block_type": "CodeSpanBlock"}, {"text": " instances, not Django's ", "block_type": "TextBlock"}, {"code": "HttpRequest", "block_type": "CodeSpanBlock"}, {"text": " instances.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "Handler methods may return REST framework's ", "block_type": "TextBlock"}, {"code": "Response", "block_type": "CodeSpanBlock"}, {"text": ", instead of Django's ", "block_type": "TextBlock"}, {"code": "HttpResponse", "block_type": "CodeSpanBlock"}, {"text": ". The view will manage content negotiation and setting the correct renderer on the response.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "Any ", "block_type": "TextBlock"}, {"code": "APIException", "block_type": "CodeSpanBlock"}, {"text": " exceptions will be caught and mediated into appropriate responses.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"text": "Incoming requests will be authenticated and appropriate permission and/or throttle checks will be run before dispatching the request to the handler method.", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"translated_data": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 `apiview` \u0432 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0442\u0430\u043a\u043e\u0435 \u0436\u0435, \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430` view`, \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e, \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u0442\u0430\u043a\u043e\u0439 \u043a\u0430\u043a `.get ()` \u0438\u043b\u0438 `.post ()`.\n\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0440\u044f\u0434 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u044e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0430\u0441\u043f\u0435\u043a\u0442\u044b \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438 API.", "children": [{"text": "Using the ", "block_type": "TextBlock"}, {"code": "APIView", "block_type": "CodeSpanBlock"}, {"text": " class is pretty much the same as using a regular ", "block_type": "TextBlock"}, {"code": "View", "block_type": "CodeSpanBlock"}, {"text": " class, as usual, the incoming request is dispatched to an appropriate handler method such as ", "block_type": "TextBlock"}, {"code": ".get()", "block_type": "CodeSpanBlock"}, {"text": " or ", "block_type": "TextBlock"}, {"code": ".post()", "block_type": "CodeSpanBlock"}, {"text": ". Additionally, a number of attributes may be set on the class that control various aspects of the API policy.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import authentication, permissions\nfrom django.contrib.auth.models import User\n\nclass ListUsers(APIView):\n    \"\"\"\n    View to list all users in the system.\n\n    * Requires token authentication.\n    * Only admin users are able to access this view.\n    \"\"\"\n    authentication_classes = [authentication.TokenAuthentication]\n    permission_classes = [permissions.IsAdminUser]\n\n    def get(self, request, format=None):\n        \"\"\"\n        Return a list of all users.\n        \"\"\"\n        usernames = [user.username for user in User.objects.all()]\n        return Response(usernames)", "language": null, "block_type": "CodeBlock"}, {"block_type": "SeparatorBlock"}, {"translated_data": "** \u041f\u0420\u0418\u041c\u0415\u0427\u0410\u041d\u0418\u0415 **: \u041f\u043e\u043b\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b, \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0438 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 Django Rest Framework `apiview`,` genericapiview`, \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 `mixins` \u0438` Viewsets` \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438.\n\u0412 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0437\u0434\u0435\u0441\u044c, \u0440\u0435\u0441\u0443\u0440\u0441 [Classy Django REST] (http://www.cdrf.co) \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0443\u044e \u0441\u043f\u0440\u0430\u0432\u043a\u0443 \u0441 \u043f\u043e\u043b\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c\u0438, \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 Django Rest Framework \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.", "children": [{"children": [{"text": "Note", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": ": The full methods, attributes on, and relations between Django REST Framework's ", "block_type": "TextBlock"}, {"code": "APIView", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "GenericAPIView", "block_type": "CodeSpanBlock"}, {"text": ", various ", "block_type": "TextBlock"}, {"code": "Mixins", "block_type": "CodeSpanBlock"}, {"text": ", and ", "block_type": "TextBlock"}, {"code": "Viewsets", "block_type": "CodeSpanBlock"}, {"text": " can be initially complex. In addition to the documentation here, the ", "block_type": "TextBlock"}, {"children": [{"text": "Classy Django REST Framework", "block_type": "TextBlock"}], "url": "http://www.cdrf.co", "title": null, "block_type": "LinkBlock"}, {"text": " resource provides a browsable reference, with full methods and attributes, for each of Django REST Framework's class-based views.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "## \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438 API", "children": [{"text": "API policy attributes", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u044e\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0435 \u0430\u0441\u043f\u0435\u043a\u0442\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 API.", "children": [{"text": "The following attributes control the pluggable aspects of API views.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### .renderer_classes", "children": [{"text": ".renderer_classes", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .parser_classes", "children": [{"text": ".parser_classes", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .Authentication_Classes", "children": [{"text": ".authentication_classes", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .throttle_classes", "children": [{"text": ".throttle_classes", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .permission_classes", "children": [{"text": ".permission_classes", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .content_negotiation_class", "children": [{"text": ".content_negotiation_class", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "## \u041c\u0435\u0442\u043e\u0434\u044b \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438 API", "children": [{"text": "API policy instantiation methods", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 REST \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e\u043b\u0438\u0442\u0438\u043a API -\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b.\n\u041e\u0431\u044b\u0447\u043d\u043e \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u044d\u0442\u0438 \u043c\u0435\u0442\u043e\u0434\u044b.", "children": [{"text": "The following methods are used by REST framework to instantiate the various pluggable API policies. You won't typically need to override these methods.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### .get_renderers (self)", "children": [{"text": ".get_renderers(self)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .get_parsers (self)", "children": [{"text": ".get_parsers(self)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .get_authenticators (self)", "children": [{"text": ".get_authenticators(self)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .get_throttles (self)", "children": [{"text": ".get_throttles(self)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .get_permissions (self)", "children": [{"text": ".get_permissions(self)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .get_content_negotiator (self)", "children": [{"text": ".get_content_negotiator(self)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .get_exception_handler (self)", "children": [{"text": ".get_exception_handler(self)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "## \u041c\u0435\u0442\u043e\u0434\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438 API", "children": [{"text": "API policy implementation methods", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u043d\u0430 \u043c\u0435\u0442\u043e\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.", "children": [{"text": "The following methods are called before dispatching to the handler method.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### .check_permissions (Self, \u0437\u0430\u043f\u0440\u043e\u0441)", "children": [{"text": ".check_permissions(self, request)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .check_throttles (Self, \u0437\u0430\u043f\u0440\u043e\u0441)", "children": [{"text": ".check_throttles(self, request)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "### .perform_content_negotiation (self, \u0437\u0430\u043f\u0440\u043e\u0441, force = false)", "children": [{"text": ".perform_content_negotiation(self, request, force=False)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "## \u043c\u0435\u0442\u043e\u0434\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438", "children": [{"text": "Dispatch methods", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f `.dispatch ()`.\n\u041e\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u043b\u044e\u0431\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0434\u043e \u0438\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u0437\u043e\u0432\u0430 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a `.get ()`, `.post ()`, `put ()`, `patch ()` \u0438 `.delete ()`.", "children": [{"text": "The following methods are called directly by the view's ", "block_type": "TextBlock"}, {"code": ".dispatch()", "block_type": "CodeSpanBlock"}, {"text": " method. These perform any actions that need to occur before or after calling the handler methods such as ", "block_type": "TextBlock"}, {"code": ".get()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": ".post()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "put()", "block_type": "CodeSpanBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"code": "patch()", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": ".delete()", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### .initial (Self, \u0437\u0430\u043f\u0440\u043e\u0441, *args, ** kwargs)", "children": [{"text": ".initial(self, request, ", "block_type": "TextBlock"}, {"text": "*", "block_type": "TextBlock"}, {"text": "args, ", "block_type": "TextBlock"}, {"text": "*", "block_type": "TextBlock"}, {"text": "*", "block_type": "TextBlock"}, {"text": "kwargs)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043b\u044e\u0431\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0442\u0438 \u0434\u043e \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043c\u0435\u0442\u043e\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d.\n\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0438 \u0434\u0440\u043e\u0441\u0441\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0443.", "children": [{"text": "Performs any actions that need to occur before the handler method gets called. This method is used to enforce permissions and throttling, and perform content negotiation.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041e\u0431\u044b\u0447\u043d\u043e \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434.", "children": [{"text": "You won't typically need to override this method.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### .handle_exception (self, exc)", "children": [{"text": ".handle_exception(self, exc)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u041b\u044e\u0431\u043e\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0431\u0440\u043e\u0448\u0435\u043d\u043d\u043e\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e \u044d\u0442\u043e\u043c\u0443 \u043c\u0435\u0442\u043e\u0434\u0443, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043b\u0438\u0431\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u00ab\u041e\u0442\u0432\u0435\u0442\u0430\u00bb, \u043b\u0438\u0431\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u043e\u0441\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435.", "children": [{"text": "Any exception thrown by the handler method will be passed to this method, which either returns a ", "block_type": "TextBlock"}, {"code": "Response", "block_type": "CodeSpanBlock"}, {"text": " instance, or re-raises the exception.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043b\u044e\u0431\u043e\u0439 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441 `rest_framework.exceptions.apiexception`, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f Django` http404` \u0438 `ormissiondenied` \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043e\u0442\u0432\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438.", "children": [{"text": "The default implementation handles any subclass of ", "block_type": "TextBlock"}, {"code": "rest_framework.exceptions.APIException", "block_type": "CodeSpanBlock"}, {"text": ", as well as Django's ", "block_type": "TextBlock"}, {"code": "Http404", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": "PermissionDenied", "block_type": "CodeSpanBlock"}, {"text": " exceptions, and returns an appropriate error response.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u044b \u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0443, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432\u0430\u0448 API, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434.", "children": [{"text": "If you need to customize the error responses your API returns you should subclass this method.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### .Initialize_Request (Self, \u0437\u0430\u043f\u0440\u043e\u0441, *args, ** kwargs)", "children": [{"text": ".initialize_request(self, request, ", "block_type": "TextBlock"}, {"text": "*", "block_type": "TextBlock"}, {"text": "args, ", "block_type": "TextBlock"}, {"text": "*", "block_type": "TextBlock"}, {"text": "*", "block_type": "TextBlock"}, {"text": "kwargs)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `request`, \u0430 \u043d\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e Django` httprequest.", "children": [{"text": "Ensures that the request object that is passed to the handler method is an instance of ", "block_type": "TextBlock"}, {"code": "Request", "block_type": "CodeSpanBlock"}, {"text": ", rather than the usual Django ", "block_type": "TextBlock"}, {"code": "HttpRequest", "block_type": "CodeSpanBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041e\u0431\u044b\u0447\u043d\u043e \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434.", "children": [{"text": "You won't typically need to override this method.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "### .finalize_response (Self, \u0437\u0430\u043f\u0440\u043e\u0441, \u043e\u0442\u0432\u0435\u0442, *args, ** kwargs)", "children": [{"text": ".finalize_response(self, request, response, ", "block_type": "TextBlock"}, {"text": "*", "block_type": "TextBlock"}, {"text": "args, ", "block_type": "TextBlock"}, {"text": "*", "block_type": "TextBlock"}, {"text": "*", "block_type": "TextBlock"}, {"text": "kwargs)", "block_type": "TextBlock"}], "level": 3, "block_type": "HeadingBlock"}, {"translated_data": "\u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442, \u0447\u0442\u043e\u0431\u044b \u043b\u044e\u0431\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u00ab\u043e\u0442\u0432\u0435\u0442\u0430\u00bb \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u0438\u043f \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430, \u043a\u0430\u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0435\u043c \u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0435.", "children": [{"text": "Ensures that any ", "block_type": "TextBlock"}, {"code": "Response", "block_type": "CodeSpanBlock"}, {"text": " object returned from the handler method will be rendered into the correct content type, as determined by the content negotiation.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041e\u0431\u044b\u0447\u043d\u043e \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434.", "children": [{"text": "You won't typically need to override this method.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "# \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439", "children": [{"text": "Function Based Views", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "> \u0421\u043a\u0430\u0437\u0430\u0442\u044c [\u044d\u0442\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0435 \u0432\u0437\u0433\u043b\u044f\u0434\u044b] \u0432\u0441\u0435\u0433\u0434\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c-\u043e\u0448\u0438\u0431\u043a\u0430.\n>\n>-[\u041d\u0438\u043a \u041a\u043e\u0433\u043b\u0430\u043d] (http://www.boredomandlainess.org/2012/05/djangos-cbvs-are-not-mistake-but.html)", "children": [{"children": [{"text": "Saying ", "block_type": "TextBlock"}, {"text": "[", "block_type": "TextBlock"}, {"text": "that class-based views", "block_type": "TextBlock"}, {"text": "]", "block_type": "TextBlock"}, {"text": " is always the superior solution is a mistake.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "NewlineBlock"}, {"children": [{"text": "\u2014 ", "block_type": "TextBlock"}, {"children": [{"text": "Nick Coghlan", "block_type": "TextBlock"}], "url": "http://www.boredomandlaziness.org/2012/05/djangos-cbvs-are-not-mistake-but.html", "title": null, "block_type": "LinkBlock"}], "block_type": "Paragraph"}], "block_type": "BlockQuote"}, {"translated_data": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 REST \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u043c\u0438 \u0432\u0438\u0434\u0430\u043c\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439.\n\u041e\u043d \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0435\u0440\u0442\u044b\u0432\u0430\u044e\u0442 \u0432\u0430\u0448\u0438 \u0432\u0438\u0434\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043e\u043d\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u00ab\u0437\u0430\u043f\u0440\u043e\u0441\u0430\u00bb (\u0430 \u043d\u0435 \u043e\u0431\u044b\u0447\u043d\u044b\u0439 Django `httprequest`) \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u043c \u0432\u0435\u0440\u043d\u0443\u0442\u044c` response` (\u0432\u043c\u0435\u0441\u0442\u043e django `httpresponse`\n) \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442\u044c \u0432\u0430\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c, \u043a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441.", "children": [{"text": "REST framework also allows you to work with regular function based views. It provides a set of simple decorators that wrap your function based views to ensure they receive an instance of ", "block_type": "TextBlock"}, {"code": "Request", "block_type": "CodeSpanBlock"}, {"text": " (rather than the usual Django ", "block_type": "TextBlock"}, {"code": "HttpRequest", "block_type": "CodeSpanBlock"}, {"text": ") and allows them to return a ", "block_type": "TextBlock"}, {"code": "Response", "block_type": "CodeSpanBlock"}, {"text": " (instead of a Django ", "block_type": "TextBlock"}, {"code": "HttpResponse", "block_type": "CodeSpanBlock"}, {"text": "), and allow you to configure how the request is processed.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## @api_view ()", "children": [{"text": "@api_view()", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "** \u041f\u043e\u0434\u043f\u0438\u0441\u044c: ** `@API_VIEW (http_method_names = ['get'])`", "children": [{"children": [{"text": "Signature:", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": " ", "block_type": "TextBlock"}, {"code": "@api_view(http_method_names=['GET'])", "block_type": "CodeSpanBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u042f\u0434\u0440\u043e\u043c \u044d\u0442\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 `api_view`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043c\u0435\u0442\u043e\u0434\u043e\u0432 HTTP, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u0432\u0430\u0448\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0430\u043a \u0432\u044b \u0431\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0438 \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:", "children": [{"text": "The core of this functionality is the ", "block_type": "TextBlock"}, {"code": "api_view", "block_type": "CodeSpanBlock"}, {"text": " decorator, which takes a list of HTTP methods that your view should respond to. For example, this is how you would write a very simple view that just manually returns some data:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n@api_view()\ndef hello_world(request):\n    return Response({\"message\": \"Hello, world!\"})", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b, \u043a\u043b\u0430\u0441\u0441\u044b \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0442. \u0414., \u0423\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0432 [\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445] (\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438.md).", "children": [{"text": "This view will use the default renderers, parsers, authentication classes etc specified in the ", "block_type": "TextBlock"}, {"children": [{"text": "settings", "block_type": "TextBlock"}], "url": "settings.md", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043d\u044f\u0442\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0442\u043e\u0434\u044b `get`.\n\u0414\u0440\u0443\u0433\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0431\u0443\u0434\u0443\u0442 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u00ab405 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043d\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u00bb.\n\u0427\u0442\u043e\u0431\u044b \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u044d\u0442\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u0443\u043a\u0430\u0436\u0438\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "By default only ", "block_type": "TextBlock"}, {"code": "GET", "block_type": "CodeSpanBlock"}, {"text": " methods will be accepted. Other methods will respond with \"405 Method Not Allowed\". To alter this behavior, specify which methods the view allows, like so:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "@api_view(['GET', 'POST'])\ndef hello_world(request):\n    if request.method == 'POST':\n        return Response({\"message\": \"Got some data!\", \"data\": request.data})\n    return Response({\"message\": \"Hello, world!\"})", "language": null, "block_type": "CodeBlock"}, {"translated_data": "## \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438 API", "children": [{"text": "API policy decorators", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, Framework REST \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u0432\u0430\u0448\u0438\u043c \u0432\u0437\u0433\u043b\u044f\u0434\u0430\u043c.\n\u041e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0438\u0439\u0442\u0438 * \u043f\u043e\u0441\u043b\u0435 * (\u043d\u0438\u0436\u0435) \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 `@api_view`.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f [\u0434\u0440\u043e\u0441\u0441\u0435\u043b\u044c\u043d\u0430\u044f \u0437\u0430\u0441\u043b\u043e\u043d\u043a\u0430] (trottling.md), \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0432 \u0434\u0435\u043d\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 `@Throtttle_classes`, \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0434\u0440\u043e\u0441\u0441\u0435\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0441\u043b\u043e\u043d\u043a\u0438:", "children": [{"text": "To override the default settings, REST framework provides a set of additional decorators which can be added to your views. These must come ", "block_type": "TextBlock"}, {"children": [{"text": "after", "block_type": "TextBlock"}], "block_type": "EmphasisTextBlock"}, {"text": " (below) the ", "block_type": "TextBlock"}, {"code": "@api_view", "block_type": "CodeSpanBlock"}, {"text": " decorator. For example, to create a view that uses a ", "block_type": "TextBlock"}, {"children": [{"text": "throttle", "block_type": "TextBlock"}], "url": "throttling.md", "title": null, "block_type": "LinkBlock"}, {"text": " to ensure it can only be called once per day by a particular user, use the ", "block_type": "TextBlock"}, {"code": "@throttle_classes", "block_type": "CodeSpanBlock"}, {"text": " decorator, passing a list of throttle classes:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.decorators import api_view, throttle_classes\nfrom rest_framework.throttling import UserRateThrottle\n\nclass OncePerDayUserThrottle(UserRateThrottle):\n    rate = '1/day'\n\n@api_view(['GET'])\n@throttle_classes([OncePerDayUserThrottle])\ndef view(request):\n    return Response({\"message\": \"Hello for today! See you tomorrow!\"})", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u042d\u0442\u0438 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u043d\u0430 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430\u0445 `apiview`, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0448\u0435.", "children": [{"text": "These decorators correspond to the attributes set on ", "block_type": "TextBlock"}, {"code": "APIView", "block_type": "CodeSpanBlock"}, {"text": " subclasses, described above.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b:", "children": [{"text": "The available decorators are:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "* `@Renderer_Classes (...)`\n* `@parser_classes (...)`\n* `@authentication_classes (...)`\n* `@throttle_classes (...)`\n* `@permission_classes (...)`", "children": [{"children": [{"code": "@renderer_classes(...)", "block_type": "CodeSpanBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "@parser_classes(...)", "block_type": "CodeSpanBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "@authentication_classes(...)", "block_type": "CodeSpanBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "@throttle_classes(...)", "block_type": "CodeSpanBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}, {"children": [{"code": "@permission_classes(...)", "block_type": "CodeSpanBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}, {"translated_data": "\u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0431\u0435\u0440\u0435\u0442 \u043e\u0434\u0438\u043d \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0438\u043b\u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.", "children": [{"text": "Each of these decorators takes a single argument which must be a list or tuple of classes.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"translated_data": "## View Schema Decorator", "children": [{"text": "View schema decorator", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "\u0427\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0441\u0445\u0435\u043c\u044b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 `@Schema`.\n\u042d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u0439\u0442\u0438 * \u043f\u043e\u0441\u043b\u0435 * (\u043d\u0438\u0436\u0435) \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 `@api_view`.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:", "children": [{"text": "To override the default schema generation for function based views you may use the ", "block_type": "TextBlock"}, {"code": "@schema", "block_type": "CodeSpanBlock"}, {"text": " decorator. This must come ", "block_type": "TextBlock"}, {"children": [{"text": "after", "block_type": "TextBlock"}], "block_type": "EmphasisTextBlock"}, {"text": " (below) the ", "block_type": "TextBlock"}, {"code": "@api_view", "block_type": "CodeSpanBlock"}, {"text": " decorator. For example:", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from rest_framework.decorators import api_view, schema\nfrom rest_framework.schemas import AutoSchema\n\nclass CustomAutoSchema(AutoSchema):\n    def get_link(self, path, method, base_url):\n        # override view introspection here...\n\n@api_view(['GET'])\n@schema(CustomAutoSchema())\ndef view(request):\n    return Response({\"message\": \"Hello for today! See you tomorrow!\"})", "language": null, "block_type": "CodeBlock"}, {"translated_data": "\u042d\u0442\u043e\u0442 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0434\u0438\u043d \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 `autoschema`, \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430 Autoschema` \u0438\u043b\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u00ab \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u00bb, \u043a\u0430\u043a \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0432 [\u0441\u0445\u0435\u043c\u0430\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438] (Schemas.md).\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0439\u0442\u0438 \u00ab\u043d\u0435\u0442\u00bb, \u0447\u0442\u043e\u0431\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u0437 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0445\u0435\u043c\u044b.", "children": [{"text": "This decorator takes a single ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " instance, an ", "block_type": "TextBlock"}, {"code": "AutoSchema", "block_type": "CodeSpanBlock"}, {"text": " subclass instance or ", "block_type": "TextBlock"}, {"code": "ManualSchema", "block_type": "CodeSpanBlock"}, {"text": " instance as described in the ", "block_type": "TextBlock"}, {"children": [{"text": "Schemas documentation", "block_type": "TextBlock"}], "url": "schemas.md", "title": null, "block_type": "LinkBlock"}, {"text": ". You may pass ", "block_type": "TextBlock"}, {"code": "None", "block_type": "CodeSpanBlock"}, {"text": " in order to exclude the view from schema generation.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "@api_view(['GET'])\n@schema(None)\ndef view(request):\n    return Response({\"message\": \"Will not appear in schema!\"})", "language": null, "block_type": "CodeBlock"}]}