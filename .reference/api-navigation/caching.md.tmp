{"source": "/home/ilyachch/Projects/OpenSource/django-rest-framework-rusdoc/.reference/api-navigation/caching.md", "blocks": [{"translated_data": "# \u041a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435", "children": [{"text": "Caching", "block_type": "TextBlock"}], "level": 1, "block_type": "HeadingBlock"}, {"translated_data": "> \u0423 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0436\u0435\u043d\u0449\u0438\u043d\u044b \u0431\u044b\u043b\u043e \u043e\u0447\u0435\u043d\u044c \u043e\u0441\u0442\u0440\u043e\u0435 \u0441\u043e\u0437\u043d\u0430\u043d\u0438\u0435, \u043d\u043e \u043f\u043e\u0447\u0442\u0438 \u043d\u0435 \u0431\u044b\u043b\u043e \u0432\u043e\u0441\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f ... \u043e\u043d\u0430 \u043f\u043e\u043c\u043d\u0438\u043b\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0438 \u043e\u043d\u0430 \u0443\u0441\u0435\u0440\u0434\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0430.\n>\n> * \u041b\u0438\u0434\u0438\u044f \u0414\u044d\u0432\u0438\u0441", "children": [{"children": [{"text": "A certain woman had a very sharp consciousness but almost no memory ... She remembered enough to work, and she worked hard.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "NewlineBlock"}, {"children": [{"children": [{"text": "Lydia Davis", "block_type": "TextBlock"}], "nested_children": [], "level": 1, "block_type": "ListItemBlock"}], "ordered": false, "level": 1, "start": null, "block_type": "ListBlock"}], "block_type": "BlockQuote"}, {"translated_data": "\u041a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 REST \u0445\u043e\u0440\u043e\u0448\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0443\u0442\u0438\u043b\u0438\u0442\u0430\u043c\u0438 Cache, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0432 Django.", "children": [{"text": "Caching in REST Framework works well with the cache utilities provided in Django.", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"block_type": "SeparatorBlock"}, {"translated_data": "## \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u044d\u0448\u0430 \u0441 Apiview \u0438 Spearssets", "children": [{"text": "Using cache with apiview and viewsets", "block_type": "TextBlock"}], "level": 2, "block_type": "HeadingBlock"}, {"translated_data": "Django \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 [`method_decorator`] (https://docs.djangoproject.com/en/dev/topics/class \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 Views/intro/#decorating-too-class) \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0441 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u043a\u043e\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.\n\u042d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 \u043a\u044d\u0448\u0430, \u0442\u0430\u043a\u0438\u043c\u0438 \u043a\u0430\u043a [`cache_page`] (https://docs.djangoproject.com/en/dev/topics/cache/#the-per-view-cache), [vary_on_cookie`] (\nhttps://docs.djangoproject.com/en/dev/topics/http/decorators/#django.views.decorators.vary.vary_on_cookie) \u0438 [vary_on_headers`] (https://docs.djangoproject.com/en/headers\nDev/Thepics/http/decerators/#django.views.decorators.vary.vary_on_headers).", "children": [{"text": "Django provides a ", "block_type": "TextBlock"}, {"children": [{"code": "method_decorator", "block_type": "CodeSpanBlock"}], "url": "https://docs.djangoproject.com/en/dev/topics/class-based-views/intro/#decorating-the-class", "title": null, "block_type": "LinkBlock"}, {"text": " to use decorators with class based views. This can be used with other cache decorators such as ", "block_type": "TextBlock"}, {"children": [{"code": "cache_page", "block_type": "CodeSpanBlock"}], "url": "https://docs.djangoproject.com/en/dev/topics/cache/#the-per-view-cache", "title": null, "block_type": "LinkBlock"}, {"text": ", ", "block_type": "TextBlock"}, {"children": [{"code": "vary_on_cookie", "block_type": "CodeSpanBlock"}], "url": "https://docs.djangoproject.com/en/dev/topics/http/decorators/#django.views.decorators.vary.vary_on_cookie", "title": null, "block_type": "LinkBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"children": [{"code": "vary_on_headers", "block_type": "CodeSpanBlock"}], "url": "https://docs.djangoproject.com/en/dev/topics/http/decorators/#django.views.decorators.vary.vary_on_headers", "title": null, "block_type": "LinkBlock"}, {"text": ".", "block_type": "TextBlock"}], "block_type": "Paragraph"}, {"code": "from django.utils.decorators import method_decorator\nfrom django.views.decorators.cache import cache_page\nfrom django.views.decorators.vary import vary_on_cookie, vary_on_headers\n\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework import viewsets\n\n\nclass UserViewSet(viewsets.ViewSet):\n    # With cookie: cache requested url for each user for 2 hours\n    @method_decorator(cache_page(60*60*2))\n    @method_decorator(vary_on_cookie)\n    def list(self, request, format=None):\n        content = {\n            'user_feed': request.user.get_user_feed()\n        }\n        return Response(content)\n\n\nclass ProfileView(APIView):\n    # With auth: cache requested url for each user for 2 hours\n    @method_decorator(cache_page(60*60*2))\n    @method_decorator(vary_on_headers(\"Authorization\",))\n    def get(self, request, format=None):\n        content = {\n            'user_feed': request.user.get_user_feed()\n        }\n        return Response(content)\n\n\nclass PostView(APIView):\n    # Cache page for the requested url\n    @method_decorator(cache_page(60*60*2))\n    def get(self, request, format=None):\n        content = {\n            'title': 'Post title',\n            'body': 'Post content'\n        }\n        return Response(content)", "language": "python", "block_type": "CodeBlock"}, {"translated_data": "** \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: ** [`cache_page`] (https://docs.djangoproject.com/en/dev/topics/cache/#the-per-view-cache) \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u044d\u0448\u0438\u0440\u0443\u0435\u0442` get` \u0438 `head\n`\u041e\u0442\u0432\u0435\u0442\u044b \u0441\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u043c 200.", "children": [{"children": [{"text": "NOTE:", "block_type": "TextBlock"}], "block_type": "StrongTextBlock"}, {"text": " The ", "block_type": "TextBlock"}, {"children": [{"code": "cache_page", "block_type": "CodeSpanBlock"}], "url": "https://docs.djangoproject.com/en/dev/topics/cache/#the-per-view-cache", "title": null, "block_type": "LinkBlock"}, {"text": " decorator only caches the ", "block_type": "TextBlock"}, {"code": "GET", "block_type": "CodeSpanBlock"}, {"text": " and ", "block_type": "TextBlock"}, {"code": "HEAD", "block_type": "CodeSpanBlock"}, {"text": " responses with status 200.", "block_type": "TextBlock"}], "block_type": "Paragraph"}]}